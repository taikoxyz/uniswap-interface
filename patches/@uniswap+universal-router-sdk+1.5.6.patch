diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/Command.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/Command.d.ts
index fff91f4..9db5277 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/Command.d.ts
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/Command.d.ts
@@ -5,7 +5,9 @@ export declare type TradeConfig = {
 export declare enum RouterTradeType {
     UniswapTrade = "UniswapTrade",
     NFTTrade = "NFTTrade",
-    UnwrapWETH = "UnwrapWETH"
+    UnwrapWETH = "UnwrapWETH",
+    WrapSTETH = "WrapSTETH",
+    UnwrapSTETH = "UnwrapSTETH"
 }
 export interface Command {
     tradeType: RouterTradeType;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/index.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/index.d.ts
index 18393c4..d8ab0d6 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/index.d.ts
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/index.d.ts
@@ -8,3 +8,5 @@ export * from './uniswap';
 export * from './sudoswap';
 export * from './x2y2';
 export * from './unwrapWETH';
+export * from './wrapSTETH';
+export * from './unwrapSTETH';
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/uniswap.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/uniswap.d.ts
index 0199016..c160869 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/uniswap.d.ts
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/uniswap.d.ts
@@ -3,8 +3,15 @@ import { Trade as RouterTrade, SwapOptions as RouterSwapOptions } from '@uniswap
 import { Permit2Permit } from '../../utils/inputTokens';
 import { Currency, TradeType } from '@uniswap/sdk-core';
 import { Command, RouterTradeType, TradeConfig } from '../Command';
+import { BigNumberish } from 'ethers';
+export declare type FlatFeeOptions = {
+    amount: BigNumberish;
+    recipient: string;
+};
 export declare type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {
     inputTokenPermit?: Permit2Permit;
+    payerIsRouter?: boolean;
+    flatFee?: FlatFeeOptions;
 };
 export declare class UniswapTrade implements Command {
     trade: RouterTrade<Currency, Currency, TradeType>;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/unwrapSTETH.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/unwrapSTETH.d.ts
new file mode 100644
index 0000000..db44921
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/unwrapSTETH.d.ts
@@ -0,0 +1,10 @@
+import { BigNumberish } from 'ethers';
+import { RoutePlanner } from '../../utils/routerCommands';
+import { Command, RouterTradeType, TradeConfig } from '../Command';
+export declare class UnwrapSTETH implements Command {
+    readonly tradeType: RouterTradeType;
+    readonly recipient: string;
+    readonly amountMinimum: BigNumberish;
+    constructor(recipient: string, amountMinimum: BigNumberish, chainId: number);
+    encode(planner: RoutePlanner, _: TradeConfig): void;
+}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/wrapSTETH.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/wrapSTETH.d.ts
new file mode 100644
index 0000000..dceb66a
--- /dev/null
+++ b/node_modules/@uniswap/universal-router-sdk/dist/entities/protocols/wrapSTETH.d.ts
@@ -0,0 +1,13 @@
+import { BigNumberish } from 'ethers';
+import { RoutePlanner } from '../../utils/routerCommands';
+import { Permit2Permit } from '../../utils/inputTokens';
+import { Command, RouterTradeType, TradeConfig } from '../Command';
+export declare class WrapSTETH implements Command {
+    readonly tradeType: RouterTradeType;
+    readonly permit2Data: Permit2Permit;
+    readonly stethAddress: string;
+    readonly amount: BigNumberish;
+    readonly wrapAmount: BigNumberish;
+    constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit, wrapAmount?: BigNumberish);
+    encode(planner: RoutePlanner, _: TradeConfig): void;
+}
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/index.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/index.d.ts
index 6a25604..089582a 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/index.d.ts
+++ b/node_modules/@uniswap/universal-router-sdk/dist/index.d.ts
@@ -1,3 +1,4 @@
 export { SwapRouter } from './swapRouter';
 export * from './entities';
+export { RoutePlanner, CommandType } from './utils/routerCommands';
 export { UNIVERSAL_ROUTER_ADDRESS, UNIVERSAL_ROUTER_CREATION_BLOCK, PERMIT2_ADDRESS, ROUTER_AS_RECIPIENT, WETH_ADDRESS, } from './utils/constants';
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/test/utils/addresses.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/test/utils/addresses.d.ts
index 9a0a5ec..519023a 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/test/utils/addresses.d.ts
+++ b/node_modules/@uniswap/universal-router-sdk/dist/test/utils/addresses.d.ts
@@ -3,5 +3,6 @@ export declare const FORGE_ROUTER_ADDRESS = "0xe808c1cfeebb6cb36b537b82fa7c9eef3
 export declare const FORGE_PERMIT2_ADDRESS = "0x4a873bdd49f7f9cc0a5458416a12973fab208f8d";
 export declare const FORGE_SENDER_ADDRESS = "0xcf03dd0a894ef79cb5b601a43c4b25e3ae4c67ed";
 export declare const TEST_RECIPIENT_ADDRESS = "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
+export declare const TEST_FEE_RECIPIENT_ADDRESS = "0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb";
 export declare const PERMIT2_ADDRESS: string;
 export declare const ROUTER_ADDRESS: string;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/test/utils/uniswapData.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/test/utils/uniswapData.d.ts
deleted file mode 100644
index 2c0c867..0000000
--- a/node_modules/@uniswap/universal-router-sdk/dist/test/utils/uniswapData.d.ts
+++ /dev/null
@@ -1,23 +0,0 @@
-import { MixedRouteTrade, Trade as RouterTrade } from '@uniswap/router-sdk';
-import { Trade as V2Trade, Pair } from '@uniswap/v2-sdk';
-import { Trade as V3Trade, Pool, FeeAmount } from '@uniswap/v3-sdk';
-import { SwapOptions } from '../../src';
-import { TradeType, Ether, Token, Currency } from '@uniswap/sdk-core';
-export declare const ETHER: Ether;
-export declare const WETH: Token;
-export declare const DAI: Token;
-export declare const USDC: Token;
-export declare const FEE_AMOUNT = FeeAmount.MEDIUM;
-declare type UniswapPools = {
-    WETH_USDC_V2: Pair;
-    USDC_DAI_V2: Pair;
-    WETH_USDC_V3: Pool;
-    WETH_USDC_V3_LOW_FEE: Pool;
-    USDC_DAI_V3: Pool;
-};
-export declare function getUniswapPools(forkBlock?: number): Promise<UniswapPools>;
-export declare function getPair(tokenA: Token, tokenB: Token, blockNumber: number): Promise<Pair>;
-export declare function getPool(tokenA: Token, tokenB: Token, feeAmount: FeeAmount, blockNumber: number): Promise<Pool>;
-export declare function swapOptions(options: Partial<SwapOptions>): SwapOptions;
-export declare function buildTrade(trades: (V2Trade<Currency, Currency, TradeType> | V3Trade<Currency, Currency, TradeType> | MixedRouteTrade<Currency, Currency, TradeType>)[]): RouterTrade<Currency, Currency, TradeType>;
-export {};
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js
index d0e1f6e..da75c0a 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js
@@ -8,12 +8,13 @@ var invariant = _interopDefault(require('tiny-invariant'));
 var UniversalRouter_json = require('@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json');
 var abi$7 = require('@ethersproject/abi');
 var ethers = require('ethers');
-var JSBI = _interopDefault(require('jsbi'));
 var utils = require('ethers/lib/utils');
 var v2Sdk = require('@uniswap/v2-sdk');
 var v3Sdk = require('@uniswap/v3-sdk');
 var routerSdk = require('@uniswap/router-sdk');
 var sdkCore = require('@uniswap/sdk-core');
+require('jsbi');
+require('bignumber.js');
 
 function _extends() {
   _extends = Object.assign ? Object.assign.bind() : function (target) {
@@ -77,6 +78,8 @@ function _createForOfIteratorHelperLoose(o, allowArrayLike) {
   RouterTradeType["UniswapTrade"] = "UniswapTrade";
   RouterTradeType["NFTTrade"] = "NFTTrade";
   RouterTradeType["UnwrapWETH"] = "UnwrapWETH";
+  RouterTradeType["WrapSTETH"] = "WrapSTETH";
+  RouterTradeType["UnwrapSTETH"] = "UnwrapSTETH";
 })(exports.RouterTradeType || (exports.RouterTradeType = {}));
 
 var NFTTrade = function NFTTrade(market, orders) {
@@ -103,12 +106,6 @@ var NFTTrade = function NFTTrade(market, orders) {
 })(exports.TokenType || (exports.TokenType = {}));
 
 var _ABI_DEFINITION;
-/**
- * CommandTypes
- * @description Flags that modify a command's execution
- * @enum {number}
- */
-var CommandType;
 (function (CommandType) {
   CommandType[CommandType["V3_SWAP_EXACT_IN"] = 0] = "V3_SWAP_EXACT_IN";
   CommandType[CommandType["V3_SWAP_EXACT_OUT"] = 1] = "V3_SWAP_EXACT_OUT";
@@ -143,14 +140,16 @@ var CommandType;
   CommandType[CommandType["SEAPORT_V1_4"] = 32] = "SEAPORT_V1_4";
   CommandType[CommandType["EXECUTE_SUB_PLAN"] = 33] = "EXECUTE_SUB_PLAN";
   CommandType[CommandType["APPROVE_ERC20"] = 34] = "APPROVE_ERC20";
-})(CommandType || (CommandType = {}));
+  CommandType[CommandType["WRAP_STETH"] = 35] = "WRAP_STETH";
+  CommandType[CommandType["UNWRAP_STETH"] = 36] = "UNWRAP_STETH";
+})(exports.CommandType || (exports.CommandType = {}));
 var ALLOW_REVERT_FLAG = 0x80;
-var REVERTIBLE_COMMANDS = /*#__PURE__*/new Set([CommandType.SEAPORT_V1_5, CommandType.SEAPORT_V1_4, CommandType.NFTX, CommandType.LOOKS_RARE_V2, CommandType.X2Y2_721, CommandType.X2Y2_1155, CommandType.FOUNDATION, CommandType.SUDOSWAP, CommandType.NFT20, CommandType.EXECUTE_SUB_PLAN, CommandType.CRYPTOPUNKS, CommandType.ELEMENT_MARKET]);
+var REVERTIBLE_COMMANDS = /*#__PURE__*/new Set([exports.CommandType.SEAPORT_V1_5, exports.CommandType.SEAPORT_V1_4, exports.CommandType.NFTX, exports.CommandType.LOOKS_RARE_V2, exports.CommandType.X2Y2_721, exports.CommandType.X2Y2_1155, exports.CommandType.FOUNDATION, exports.CommandType.SUDOSWAP, exports.CommandType.NFT20, exports.CommandType.EXECUTE_SUB_PLAN, exports.CommandType.CRYPTOPUNKS, exports.CommandType.ELEMENT_MARKET]);
 var PERMIT_STRUCT = '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)';
 var PERMIT_BATCH_STRUCT = '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)';
 var PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)';
 var PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]';
-var ABI_DEFINITION = (_ABI_DEFINITION = {}, _ABI_DEFINITION[CommandType.EXECUTE_SUB_PLAN] = ['bytes', 'bytes[]'], _ABI_DEFINITION[CommandType.PERMIT2_PERMIT] = [PERMIT_STRUCT, 'bytes'], _ABI_DEFINITION[CommandType.PERMIT2_PERMIT_BATCH] = [PERMIT_BATCH_STRUCT, 'bytes'], _ABI_DEFINITION[CommandType.PERMIT2_TRANSFER_FROM] = ['address', 'address', 'uint160'], _ABI_DEFINITION[CommandType.PERMIT2_TRANSFER_FROM_BATCH] = [PERMIT2_TRANSFER_FROM_BATCH_STRUCT], _ABI_DEFINITION[CommandType.V3_SWAP_EXACT_IN] = ['address', 'uint256', 'uint256', 'bytes', 'bool'], _ABI_DEFINITION[CommandType.V3_SWAP_EXACT_OUT] = ['address', 'uint256', 'uint256', 'bytes', 'bool'], _ABI_DEFINITION[CommandType.V2_SWAP_EXACT_IN] = ['address', 'uint256', 'uint256', 'address[]', 'bool'], _ABI_DEFINITION[CommandType.V2_SWAP_EXACT_OUT] = ['address', 'uint256', 'uint256', 'address[]', 'bool'], _ABI_DEFINITION[CommandType.WRAP_ETH] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.UNWRAP_WETH] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.SWEEP] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.SWEEP_ERC721] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.SWEEP_ERC1155] = ['address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[CommandType.TRANSFER] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.PAY_PORTION] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.BALANCE_CHECK_ERC20] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.OWNER_CHECK_721] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.OWNER_CHECK_1155] = ['address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[CommandType.APPROVE_ERC20] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.SEAPORT_V1_5] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.SEAPORT_V1_4] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.NFTX] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.LOOKS_RARE_V2] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.X2Y2_721] = ['uint256', 'bytes', 'address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.X2Y2_1155] = ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[CommandType.FOUNDATION] = ['uint256', 'bytes', 'address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.SUDOSWAP] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.NFT20] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.CRYPTOPUNKS] = ['uint256', 'address', 'uint256'], _ABI_DEFINITION[CommandType.ELEMENT_MARKET] = ['uint256', 'bytes'], _ABI_DEFINITION);
+var ABI_DEFINITION = (_ABI_DEFINITION = {}, _ABI_DEFINITION[exports.CommandType.EXECUTE_SUB_PLAN] = ['bytes', 'bytes[]'], _ABI_DEFINITION[exports.CommandType.PERMIT2_PERMIT] = [PERMIT_STRUCT, 'bytes'], _ABI_DEFINITION[exports.CommandType.PERMIT2_PERMIT_BATCH] = [PERMIT_BATCH_STRUCT, 'bytes'], _ABI_DEFINITION[exports.CommandType.PERMIT2_TRANSFER_FROM] = ['address', 'address', 'uint160'], _ABI_DEFINITION[exports.CommandType.PERMIT2_TRANSFER_FROM_BATCH] = [PERMIT2_TRANSFER_FROM_BATCH_STRUCT], _ABI_DEFINITION[exports.CommandType.V3_SWAP_EXACT_IN] = ['address', 'uint256', 'uint256', 'bytes', 'bool'], _ABI_DEFINITION[exports.CommandType.V3_SWAP_EXACT_OUT] = ['address', 'uint256', 'uint256', 'bytes', 'bool'], _ABI_DEFINITION[exports.CommandType.V2_SWAP_EXACT_IN] = ['address', 'uint256', 'uint256', 'address[]', 'bool'], _ABI_DEFINITION[exports.CommandType.V2_SWAP_EXACT_OUT] = ['address', 'uint256', 'uint256', 'address[]', 'bool'], _ABI_DEFINITION[exports.CommandType.WRAP_ETH] = ['address', 'uint256'], _ABI_DEFINITION[exports.CommandType.UNWRAP_WETH] = ['address', 'uint256'], _ABI_DEFINITION[exports.CommandType.SWEEP] = ['address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.SWEEP_ERC721] = ['address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.SWEEP_ERC1155] = ['address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[exports.CommandType.TRANSFER] = ['address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.PAY_PORTION] = ['address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.BALANCE_CHECK_ERC20] = ['address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.OWNER_CHECK_721] = ['address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.OWNER_CHECK_1155] = ['address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[exports.CommandType.APPROVE_ERC20] = ['address', 'uint256'], _ABI_DEFINITION[exports.CommandType.WRAP_STETH] = ['address', 'uint256'], _ABI_DEFINITION[exports.CommandType.UNWRAP_STETH] = ['address', 'uint256'], _ABI_DEFINITION[exports.CommandType.SEAPORT_V1_5] = ['uint256', 'bytes'], _ABI_DEFINITION[exports.CommandType.SEAPORT_V1_4] = ['uint256', 'bytes'], _ABI_DEFINITION[exports.CommandType.NFTX] = ['uint256', 'bytes'], _ABI_DEFINITION[exports.CommandType.LOOKS_RARE_V2] = ['uint256', 'bytes'], _ABI_DEFINITION[exports.CommandType.X2Y2_721] = ['uint256', 'bytes', 'address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.X2Y2_1155] = ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[exports.CommandType.FOUNDATION] = ['uint256', 'bytes', 'address', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.SUDOSWAP] = ['uint256', 'bytes'], _ABI_DEFINITION[exports.CommandType.NFT20] = ['uint256', 'bytes'], _ABI_DEFINITION[exports.CommandType.CRYPTOPUNKS] = ['uint256', 'address', 'uint256'], _ABI_DEFINITION[exports.CommandType.ELEMENT_MARKET] = ['uint256', 'bytes'], _ABI_DEFINITION);
 var RoutePlanner = /*#__PURE__*/function () {
   function RoutePlanner() {
     this.commands = '0x';
@@ -158,7 +157,7 @@ var RoutePlanner = /*#__PURE__*/function () {
   }
   var _proto = RoutePlanner.prototype;
   _proto.addSubPlan = function addSubPlan(subplan) {
-    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true);
+    this.addCommand(exports.CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true);
   };
   _proto.addCommand = function addCommand(type, parameters, allowRevert) {
     if (allowRevert === void 0) {
@@ -185,67 +184,115 @@ function createCommand(type, parameters) {
 }
 
 var _CHAIN_CONFIGS;
-var WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000';
+var NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000';
 var CHAIN_CONFIGS = (_CHAIN_CONFIGS = {}, _CHAIN_CONFIGS[1] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
+  steth: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',
+  wsteth: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',
   creationBlock: 17143817
 }, _CHAIN_CONFIGS[5] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',
+  steth: '0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F',
+  wsteth: '0x6320cD32aA674d2898A68ec82e869385Fc5f7E2f',
   creationBlock: 8940568
 }, _CHAIN_CONFIGS[11155111] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
   creationBlock: 3543575
 }, _CHAIN_CONFIGS[137] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+  router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',
   weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',
-  creationBlock: 42294741
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 46866777
 }, _CHAIN_CONFIGS[80001] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
   creationBlock: 35176052
 }, _CHAIN_CONFIGS[10] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+  router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 96333990
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 108825869
 }, _CHAIN_CONFIGS[420] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0x4200000000000000000000000000000000000006',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
   creationBlock: 8887728
 }, _CHAIN_CONFIGS[42161] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+  router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',
   weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',
-  creationBlock: 87206402
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 125861718
 }, _CHAIN_CONFIGS[421613] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
   creationBlock: 18815277
 }, _CHAIN_CONFIGS[42220] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: WETH_NOT_SUPPORTED_ON_CHAIN,
-  creationBlock: 19106929
+  router: '0x88a3ED7F21A3fCF6adb86b6F878C5B7a02D20e9b',
+  weth: NOT_SUPPORTED_ON_CHAIN,
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 21116361
 }, _CHAIN_CONFIGS[44787] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: WETH_NOT_SUPPORTED_ON_CHAIN,
+  weth: NOT_SUPPORTED_ON_CHAIN,
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
   creationBlock: 17566658
 }, _CHAIN_CONFIGS[56] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+  router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',
   weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
-  creationBlock: 27915533
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 31254967
 }, _CHAIN_CONFIGS[43114] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+  router: '0x82635AF6146972cD6601161c4472ffe97237D292',
   weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',
-  creationBlock: 31583684
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 34491144
 }, _CHAIN_CONFIGS[84531] = {
   router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',
   weth: '0x4200000000000000000000000000000000000006',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
   creationBlock: 6915289
 }, _CHAIN_CONFIGS[8453] = {
-  router: '0x198EF79F1F515F02dFE9e3115eD9fC07183f02fC',
+  router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 1452376
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 3229053
+}, _CHAIN_CONFIGS[167007] = {
+  router: '0x38D80da17dC0c72fD8acc276fc917B69899415f4',
+  weth: '0x7be7937A395FD3B527F428124f6a33E10D1C0638',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 173491
+}, _CHAIN_CONFIGS[167008] = {
+  router: '0xD2C3cbB943FEd0Cfc8389b14a3f6df518fD46346',
+  weth: '0x0011E559da84dde3f841e22dc33F3adbF184D84A',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 774
+}, _CHAIN_CONFIGS[167009] = {
+  router: '0x380A5Ba81efe70fE98AB56613eBF9244a2f3D4c9',
+  weth: '0xae2C46ddb314B9Ba743C6dEE4878F151881333D9',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 14556
 }, _CHAIN_CONFIGS);
 var UNIVERSAL_ROUTER_ADDRESS = function UNIVERSAL_ROUTER_ADDRESS(chainId) {
   if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
@@ -257,9 +304,14 @@ var UNIVERSAL_ROUTER_CREATION_BLOCK = function UNIVERSAL_ROUTER_CREATION_BLOCK(c
 };
 var WETH_ADDRESS = function WETH_ADDRESS(chainId) {
   if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
-  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error("Chain " + chainId + " does not have WETH");
+  if (CHAIN_CONFIGS[chainId].weth == NOT_SUPPORTED_ON_CHAIN) throw new Error("Chain " + chainId + " does not have WETH");
   return CHAIN_CONFIGS[chainId].weth;
 };
+var STETH_ADDRESS = function STETH_ADDRESS(chainId) {
+  if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
+  if (CHAIN_CONFIGS[chainId].steth == NOT_SUPPORTED_ON_CHAIN) throw new Error("Chain " + chainId + " does not have STETH support");
+  return CHAIN_CONFIGS[chainId].steth;
+};
 var PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3';
 var CONTRACT_BALANCE = /*#__PURE__*/ethers.BigNumber.from(2).pow(255);
 var ETH_ADDRESS = '0x0000000000000000000000000000000000000000';
@@ -269,7 +321,11 @@ var ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002';
 var OPENSEA_CONDUIT_SPENDER_ID = 0;
 var SUDOSWAP_SPENDER_ID = 1;
 
-var REFUND_ETH_PRICE_IMPACT_THRESHOLD = /*#__PURE__*/new sdkCore.Percent( /*#__PURE__*/JSBI.BigInt(50), /*#__PURE__*/JSBI.BigInt(100));
+function encodeFeeBips(fee) {
+  return v3Sdk.toHex(fee.multiply(10000).quotient);
+}
+
+var REFUND_ETH_PRICE_IMPACT_THRESHOLD = /*#__PURE__*/new sdkCore.Percent(50, 100);
 // Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router
 // also translates trade objects from previous (v2, v3) SDKs
 var UniswapTrade = /*#__PURE__*/function () {
@@ -277,17 +333,20 @@ var UniswapTrade = /*#__PURE__*/function () {
     this.trade = trade;
     this.options = options;
     this.tradeType = exports.RouterTradeType.UniswapTrade;
+    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted');
   }
   var _proto = UniswapTrade.prototype;
   _proto.encode = function encode(planner, _config) {
     var _this$options$recipie;
-    var payerIsUser = true;
+    var payerIsUser = !this.options.payerIsRouter;
+    // If the input currency is the native currency, we need to wrap it with the router as the recipient
     if (this.trade.inputAmount.currency.isNative) {
       // TODO: optimize if only one v2 pool we can directly send this to the pool
-      planner.addCommand(CommandType.WRAP_ETH, [ROUTER_AS_RECIPIENT, this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]);
+      planner.addCommand(exports.CommandType.WRAP_ETH, [ROUTER_AS_RECIPIENT, this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]);
       // since WETH is now owned by the router, the router pays for inputs
       payerIsUser = false;
     }
+    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender
     this.options.recipient = (_this$options$recipie = this.options.recipient) != null ? _this$options$recipie : SENDER_AS_RECIPIENT;
     // flag for whether we want to perform slippage check on aggregate output of multiple routes
     //   1. when there are >2 exact input trades. this is only a heuristic,
@@ -296,7 +355,7 @@ var UniswapTrade = /*#__PURE__*/function () {
     var performAggregatedSlippageCheck = this.trade.tradeType === sdkCore.TradeType.EXACT_INPUT && this.trade.routes.length > 2;
     var outputIsNative = this.trade.outputAmount.currency.isNative;
     var inputIsNative = this.trade.inputAmount.currency.isNative;
-    var routerMustCustody = performAggregatedSlippageCheck || outputIsNative;
+    var routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options);
     for (var _iterator = _createForOfIteratorHelperLoose(this.trade.swaps), _step; !(_step = _iterator()).done;) {
       var swap = _step.value;
       switch (swap.route.protocol) {
@@ -313,17 +372,44 @@ var UniswapTrade = /*#__PURE__*/function () {
           throw new Error('UNSUPPORTED_TRADE_PROTOCOL');
       }
     }
+    var minimumAmountOut = ethers.BigNumber.from(this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString());
+    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check
     if (routerMustCustody) {
+      // If there is a fee, that percentage is sent to the fee recipient
+      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)
+      if (!!this.options.fee) {
+        var feeBips = encodeFeeBips(this.options.fee.fee);
+        planner.addCommand(exports.CommandType.PAY_PORTION, [this.trade.outputAmount.currency.wrapped.address, this.options.fee.recipient, feeBips]);
+        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee
+        // Otherwise we continue as expected with the trade's normal expected output
+        if (this.trade.tradeType === sdkCore.TradeType.EXACT_OUTPUT) {
+          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000));
+        }
+      }
+      // If there is a flat fee, that absolute amount is sent to the fee recipient
+      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)
+      if (!!this.options.flatFee) {
+        var feeAmount = this.options.flatFee.amount;
+        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut');
+        planner.addCommand(exports.CommandType.TRANSFER, [this.trade.outputAmount.currency.wrapped.address, this.options.flatFee.recipient, feeAmount]);
+        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee
+        // Otherwise we continue as expected with the trade's normal expected output
+        if (this.trade.tradeType === sdkCore.TradeType.EXACT_OUTPUT) {
+          minimumAmountOut = minimumAmountOut.sub(feeAmount);
+        }
+      }
+      // The remaining tokens that need to be sent to the user after the fee is taken will be caught
+      // by this if-else clause.
       if (outputIsNative) {
-        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()]);
+        planner.addCommand(exports.CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut]);
       } else {
-        planner.addCommand(CommandType.SWEEP, [this.trade.outputAmount.currency.wrapped.address, this.options.recipient, this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()]);
+        planner.addCommand(exports.CommandType.SWEEP, [this.trade.outputAmount.currency.wrapped.address, this.options.recipient, minimumAmountOut]);
       }
     }
     if (inputIsNative && (this.trade.tradeType === sdkCore.TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {
       // for exactOutput swaps that take native currency as input
       // we need to send back the change to the user
-      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0]);
+      planner.addCommand(exports.CommandType.UNWRAP_WETH, [this.options.recipient, 0]);
     }
   };
   return UniswapTrade;
@@ -335,13 +421,13 @@ function addV2Swap(planner, _ref, tradeType, options, payerIsUser, routerMustCus
     outputAmount = _ref.outputAmount;
   var trade = new v2Sdk.Trade(route, tradeType == sdkCore.TradeType.EXACT_INPUT ? inputAmount : outputAmount, tradeType);
   if (tradeType == sdkCore.TradeType.EXACT_INPUT) {
-    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [
+    planner.addCommand(exports.CommandType.V2_SWAP_EXACT_IN, [
     // if native, we have to unwrap so keep in the router for now
     routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), route.path.map(function (pool) {
       return pool.address;
     }), payerIsUser]);
   } else if (tradeType == sdkCore.TradeType.EXACT_OUTPUT) {
-    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), route.path.map(function (pool) {
+    planner.addCommand(exports.CommandType.V2_SWAP_EXACT_OUT, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), route.path.map(function (pool) {
       return pool.address;
     }), payerIsUser]);
   }
@@ -359,9 +445,9 @@ function addV3Swap(planner, _ref2, tradeType, options, payerIsUser, routerMustCu
   });
   var path = v3Sdk.encodeRouteToPath(route, trade.tradeType === sdkCore.TradeType.EXACT_OUTPUT);
   if (tradeType == sdkCore.TradeType.EXACT_INPUT) {
-    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), path, payerIsUser]);
+    planner.addCommand(exports.CommandType.V3_SWAP_EXACT_IN, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), path, payerIsUser]);
   } else if (tradeType == sdkCore.TradeType.EXACT_OUTPUT) {
-    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), path, payerIsUser]);
+    planner.addCommand(exports.CommandType.V3_SWAP_EXACT_OUT, [routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient, trade.minimumAmountOut(options.slippageTolerance).quotient.toString(), trade.maximumAmountIn(options.slippageTolerance).quotient.toString(), path, payerIsUser]);
   }
 }
 // encode a mixed route swap, i.e. including both v2 and v3 pools
@@ -411,12 +497,12 @@ function addMixedSwap(planner, swap, tradeType, options, payerIsUser, routerMust
     };
     if (mixedRouteIsAllV3(newRoute)) {
       var path = routerSdk.encodeMixedRouteToPath(newRoute);
-      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [
+      planner.addCommand(exports.CommandType.V3_SWAP_EXACT_IN, [
       // if not last section: send tokens directly to the first v2 pair of the next section
       // note: because of the partitioning function we can be sure that the next section is v2
       isLastSectionInRoute(i) ? tradeRecipient : sections[i + 1][0].liquidityToken.address, i == 0 ? amountIn : CONTRACT_BALANCE, !isLastSectionInRoute(i) ? 0 : amountOut, path, payerIsUser && i === 0]);
     } else {
-      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, i === 0 ? amountIn : CONTRACT_BALANCE, !isLastSectionInRoute(i) ? 0 : amountOut, newRoute.path.map(function (pool) {
+      planner.addCommand(exports.CommandType.V2_SWAP_EXACT_IN, [isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, i === 0 ? amountIn : CONTRACT_BALANCE, !isLastSectionInRoute(i) ? 0 : amountOut, newRoute.path.map(function (pool) {
         return pool.address;
       }), payerIsUser && i === 0]);
     }
@@ -426,6 +512,9 @@ function addMixedSwap(planner, swap, tradeType, options, payerIsUser, routerMust
 function riskOfPartialFill(trade) {
   return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD);
 }
+function hasFeeOption(swapOptions) {
+  return !!swapOptions.fee || !!swapOptions.flatFee;
+}
 
 var SIGNATURE_LENGTH = 65;
 var EIP_2098_SIGNATURE_LENGTH = 64;
@@ -437,7 +526,7 @@ function encodePermit(planner, permit2) {
     // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id
     signature = ethers.ethers.utils.joinSignature(ethers.ethers.utils.splitSignature(permit2.signature));
   }
-  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature]);
+  planner.addCommand(exports.CommandType.PERMIT2_PERMIT, [permit2, signature]);
 }
 // Handles the encoding of commands needed to gather input tokens for a trade
 // Approval: The router approving another address to take tokens.
@@ -451,14 +540,14 @@ function encodeInputTokenOptions(planner, options) {
   if (!!options.permit2TransferFrom && !!options.permit2Permit) !(options.permit2TransferFrom.token === options.permit2Permit.details.token) ?  invariant(false, "inconsistent token")  : void 0;
   // if an options.approval is required, add it
   if (!!options.approval) {
-    planner.addCommand(CommandType.APPROVE_ERC20, [options.approval.token, mapApprovalProtocol(options.approval.protocol)]);
+    planner.addCommand(exports.CommandType.APPROVE_ERC20, [options.approval.token, mapApprovalProtocol(options.approval.protocol)]);
   }
   // if this order has a options.permit2Permit, encode it
   if (!!options.permit2Permit) {
     encodePermit(planner, options.permit2Permit);
   }
   if (!!options.permit2TransferFrom) {
-    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [options.permit2TransferFrom.token, options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT, options.permit2TransferFrom.amount]);
+    planner.addCommand(exports.CommandType.PERMIT2_TRANSFER_FROM, [options.permit2TransferFrom.token, options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT, options.permit2TransferFrom.amount]);
   }
 }
 function mapApprovalProtocol(protocolAddress) {
@@ -552,18 +641,25 @@ var SwapRouter = /*#__PURE__*/function () {
           allowRevert: false
         });
         currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount);
+        /**
+         * is (Un)WrapSTETH
+         */
+      } else if (trade.tradeType == exports.RouterTradeType.WrapSTETH || trade.tradeType == exports.RouterTradeType.UnwrapSTETH) {
+        trade.encode(planner, {
+          allowRevert: false
+        });
         /**
          * else
          */
       } else {
-        throw 'trade must be of instance: UniswapTrade or NFTTrade';
+        throw 'trade must be of instance: UniswapTrade, NFTTrade, UnwrapWETH, WrapSTETH';
       }
     }
     // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades
     // or NFT trades with potential slippage (i.e. sudo).
     // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient
     nftInputTokens.forEach(function (inputToken) {
-      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0]);
+      planner.addCommand(exports.CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0]);
     });
     return SwapRouter.encodePlan(planner, transactionValue, config);
   }
@@ -587,7 +683,7 @@ var SwapRouter = /*#__PURE__*/function () {
       });
       totalPrice = totalPrice.add(trade.getTotalPrice());
     }
-    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0]);
+    planner.addCommand(exports.CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0]);
     return SwapRouter.encodePlan(planner, totalPrice, config);
   }
   /**
@@ -646,7 +742,7 @@ var CryptopunkTrade = /*#__PURE__*/function (_NFTTrade) {
   _proto.encode = function encode(planner, config) {
     for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
       var item = _step.value;
-      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert);
+      planner.addCommand(exports.CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert);
     }
   };
   _proto.getBuyItems = function getBuyItems() {
@@ -2305,7 +2401,7 @@ var FoundationTrade = /*#__PURE__*/function (_NFTTrade) {
     for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
       var item = _step.value;
       var calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [item.tokenAddress, item.tokenId, item.price, item.referrer]);
-      planner.addCommand(CommandType.FOUNDATION, [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId], config.allowRevert);
+      planner.addCommand(exports.CommandType.FOUNDATION, [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId], config.allowRevert);
     }
   };
   _proto.getBuyItems = function getBuyItems() {
@@ -4351,7 +4447,7 @@ var LooksRareV2Trade = /*#__PURE__*/function (_NFTTrade) {
     } else {
       calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [takerBids, makerOrders, makerSignatures, merkleTrees, ZERO_ADDRESS, false]);
     }
-    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert);
+    planner.addCommand(exports.CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert);
   };
   _proto.getBuyItems = function getBuyItems() {
     var buyItems = [];
@@ -4679,7 +4775,7 @@ var NFT20Trade = /*#__PURE__*/function (_NFTTrade) {
     for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
       var order = _step.value;
       var calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [order.tokenAddress, order.tokenIds, order.tokenAmounts, order.recipient, order.fee, order.isV3]);
-      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert);
+      planner.addCommand(exports.CommandType.NFT20, [order.value, calldata], config.allowRevert);
     }
   };
   _proto.getBuyItems = function getBuyItems() {
@@ -5340,7 +5436,7 @@ var NFTXTrade = /*#__PURE__*/function (_NFTTrade) {
     for (var _iterator = _createForOfIteratorHelperLoose(this.orders), _step; !(_step = _iterator()).done;) {
       var order = _step.value;
       var calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [order.vaultId, order.tokenIds.length, order.tokenIds, order.swapCalldata, order.recipient]);
-      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert);
+      planner.addCommand(exports.CommandType.NFTX, [order.value, calldata], config.allowRevert);
     }
   };
   _proto.getBuyItems = function getBuyItems() {
@@ -8107,10 +8203,10 @@ var SeaportTrade = /*#__PURE__*/function (_NFTTrade) {
     switch (protocolAddress.toLowerCase()) {
       case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc':
         // Seaport v1.5
-        return CommandType.SEAPORT_V1_5;
+        return exports.CommandType.SEAPORT_V1_5;
       case '0x00000000000001ad428e4906ae43d8f9852d0dd6':
         // Seaport v1.4
-        return CommandType.SEAPORT_V1_4;
+        return exports.CommandType.SEAPORT_V1_4;
       default:
         throw new Error('unsupported Seaport address');
     }
@@ -9301,7 +9397,7 @@ var SudoswapTrade = /*#__PURE__*/function (_NFTTrade) {
       var value = order.swaps.reduce(function (prevVal, swap) {
         return prevVal.add(swap.maxCost);
       }, ethers.BigNumber.from(0));
-      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert);
+      planner.addCommand(exports.CommandType.SUDOSWAP, [value, calldata], config.allowRevert);
     }
   };
   _proto.getBuyItems = function getBuyItems() {
@@ -10454,9 +10550,9 @@ var X2Y2Trade = /*#__PURE__*/function (_NFTTrade) {
       var functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'));
       var calldata = functionSelector + item.signedInput.slice(2);
       if (item.tokenType == exports.TokenType.ERC721) {
-        planner.addCommand(CommandType.X2Y2_721, [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId], config.allowRevert);
+        planner.addCommand(exports.CommandType.X2Y2_721, [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId], config.allowRevert);
       } else if (item.tokenType == exports.TokenType.ERC1155) {
-        planner.addCommand(CommandType.X2Y2_1155, [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount], config.allowRevert);
+        planner.addCommand(exports.CommandType.X2Y2_1155, [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount], config.allowRevert);
       }
     }
   };
@@ -10504,11 +10600,51 @@ var UnwrapWETH = /*#__PURE__*/function () {
         amount: this.amount.toString()
       }
     });
-    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount]);
+    planner.addCommand(exports.CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount]);
   };
   return UnwrapWETH;
 }();
 
+var WrapSTETH = /*#__PURE__*/function () {
+  function WrapSTETH(amount, chainId, permit2, wrapAmount) {
+    this.tradeType = exports.RouterTradeType.WrapSTETH;
+    this.stethAddress = STETH_ADDRESS(chainId);
+    this.amount = amount;
+    this.wrapAmount = wrapAmount != null ? wrapAmount : CONTRACT_BALANCE;
+    if (!!permit2) {
+      !(permit2.details.token.toLowerCase() === this.stethAddress.toLowerCase()) ?  invariant(false, "must be permitting STETH address: " + this.stethAddress)  : void 0;
+      !(permit2.details.amount >= amount) ?  invariant(false, "Did not permit enough STETH for unwrapSTETH transaction")  : void 0;
+      this.permit2Data = permit2;
+    }
+  }
+  var _proto = WrapSTETH.prototype;
+  _proto.encode = function encode(planner, _) {
+    encodeInputTokenOptions(planner, {
+      permit2Permit: this.permit2Data,
+      permit2TransferFrom: {
+        token: this.stethAddress,
+        amount: this.amount.toString()
+      }
+    });
+    planner.addCommand(exports.CommandType.WRAP_STETH, [ROUTER_AS_RECIPIENT, this.wrapAmount]);
+  };
+  return WrapSTETH;
+}();
+
+var UnwrapSTETH = /*#__PURE__*/function () {
+  function UnwrapSTETH(recipient, amountMinimum, chainId) {
+    this.tradeType = exports.RouterTradeType.UnwrapSTETH;
+    this.recipient = recipient;
+    this.amountMinimum = amountMinimum;
+    !(STETH_ADDRESS(chainId) != NOT_SUPPORTED_ON_CHAIN) ?  invariant(false, "STETH not supported on chain " + chainId)  : void 0;
+  }
+  var _proto = UnwrapSTETH.prototype;
+  _proto.encode = function encode(planner, _) {
+    planner.addCommand(exports.CommandType.UNWRAP_STETH, [this.recipient, this.amountMinimum]);
+  };
+  return UnwrapSTETH;
+}();
+
 exports.CryptopunkTrade = CryptopunkTrade;
 exports.FoundationTrade = FoundationTrade;
 exports.LooksRareV2Trade = LooksRareV2Trade;
@@ -10517,13 +10653,16 @@ exports.NFTTrade = NFTTrade;
 exports.NFTXTrade = NFTXTrade;
 exports.PERMIT2_ADDRESS = PERMIT2_ADDRESS;
 exports.ROUTER_AS_RECIPIENT = ROUTER_AS_RECIPIENT;
+exports.RoutePlanner = RoutePlanner;
 exports.SeaportTrade = SeaportTrade;
 exports.SudoswapTrade = SudoswapTrade;
 exports.SwapRouter = SwapRouter;
 exports.UNIVERSAL_ROUTER_ADDRESS = UNIVERSAL_ROUTER_ADDRESS;
 exports.UNIVERSAL_ROUTER_CREATION_BLOCK = UNIVERSAL_ROUTER_CREATION_BLOCK;
 exports.UniswapTrade = UniswapTrade;
+exports.UnwrapSTETH = UnwrapSTETH;
 exports.UnwrapWETH = UnwrapWETH;
 exports.WETH_ADDRESS = WETH_ADDRESS;
+exports.WrapSTETH = WrapSTETH;
 exports.X2Y2Trade = X2Y2Trade;
 //# sourceMappingURL=universal-router-sdk.cjs.development.js.map
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map
index bb2df23..9ccb4dd 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"universal-router-sdk.cjs.development.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 42294741,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 96333990,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 87206402,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 19106929,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 27915533,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 31583684,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x198EF79F1F515F02dFE9e3115eD9fC07183f02fC',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 1452376,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import JSBI from 'jsbi'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE } from '../../utils/constants'\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(100))\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {}\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = true\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    if (routerMustCustody) {\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","router","weth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","JSBI","BigInt","UniswapTrade","trade","options","planner","_config","payerIsUser","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","quotient","recipient","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","inputIsNative","routerMustCustody","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","wrapped","address","EXACT_OUTPUT","riskOfPartialFill","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","amount","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","lt","sub","uniswapTrade","swapOptions","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","fee","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"universal-router-sdk.cjs.development.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/entities/protocols/wrapSTETH.ts","../src/entities/protocols/unwrapSTETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n  WrapSTETH = 'WrapSTETH',\n  UnwrapSTETH = 'UnwrapSTETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n  WRAP_STETH = 0x23,\n  UNWRAP_STETH = 0x24,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n  [CommandType.WRAP_STETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_STETH]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n  steth: string\n  wsteth: string\n}\n\nexport const NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    steth: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',\n    wsteth: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    steth: '0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F',\n    wsteth: '0x6320cD32aA674d2898A68ec82e869385Fc5f7E2f',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 46866777,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 108825869,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 125861718,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x88a3ED7F21A3fCF6adb86b6F878C5B7a02D20e9b',\n    weth: NOT_SUPPORTED_ON_CHAIN,\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21116361,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: NOT_SUPPORTED_ON_CHAIN,\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 31254967,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x82635AF6146972cD6601161c4472ffe97237D292',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 34491144,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 3229053,\n  },\n\n  [167007]: {\n    router: '0x38D80da17dC0c72fD8acc276fc917B69899415f4',\n    weth: '0x7be7937A395FD3B527F428124f6a33E10D1C0638',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 173491,\n  },\n\n  [167008]: {\n    router: '0xD2C3cbB943FEd0Cfc8389b14a3f6df518fD46346',\n    weth: '0x0011E559da84dde3f841e22dc33F3adbF184D84A',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 774,\n  },\n  [167009]: {\n    router: '0x380A5Ba81efe70fE98AB56613eBF9244a2f3D4c9',\n    weth: '0xae2C46ddb314B9Ba743C6dEE4878F151881333D9',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 14556,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const STETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].steth == NOT_SUPPORTED_ON_CHAIN)\n    throw new Error(`Chain ${chainId} does not have STETH support`)\n\n  return CHAIN_CONFIGS[chainId].steth\n}\n\nexport const WSTETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].wsteth == NOT_SUPPORTED_ON_CHAIN)\n    throw new Error(`Chain ${chainId} does not have WSTETH support`)\n\n  return CHAIN_CONFIGS[chainId].wsteth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n  payerIsRouter?: boolean\n  flatFee?: FlatFeeOptions\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = !this.options.payerIsRouter\n\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * is (Un)WrapSTETH\n         */\n      } else if (trade.tradeType == RouterTradeType.WrapSTETH || trade.tradeType == RouterTradeType.UnwrapSTETH) {\n        trade.encode(planner, { allowRevert: false })\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade, NFTTrade, UnwrapWETH, WrapSTETH'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { CONTRACT_BALANCE, ROUTER_AS_RECIPIENT, STETH_ADDRESS } from '../../utils/constants'\n\nexport class WrapSTETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.WrapSTETH\n  readonly permit2Data: Permit2Permit\n  readonly stethAddress: string\n  readonly amount: BigNumberish\n  readonly wrapAmount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit, wrapAmount?: BigNumberish) {\n    this.stethAddress = STETH_ADDRESS(chainId)\n    this.amount = amount\n    this.wrapAmount = wrapAmount ?? CONTRACT_BALANCE\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.stethAddress.toLowerCase(),\n        `must be permitting STETH address: ${this.stethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough STETH for unwrapSTETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.stethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.WRAP_STETH, [ROUTER_AS_RECIPIENT, this.wrapAmount])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { STETH_ADDRESS, NOT_SUPPORTED_ON_CHAIN } from '../../utils/constants'\n\nexport class UnwrapSTETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapSTETH\n  readonly recipient: string\n  readonly amountMinimum: BigNumberish\n\n  constructor(recipient: string, amountMinimum: BigNumberish, chainId: number) {\n    this.recipient = recipient\n    this.amountMinimum = amountMinimum\n    invariant(STETH_ADDRESS(chainId) != NOT_SUPPORTED_ON_CHAIN, `STETH not supported on chain ${chainId}`)\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    planner.addCommand(CommandType.UNWRAP_STETH, [this.recipient, this.amountMinimum])\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","WRAP_STETH","UNWRAP_STETH","RoutePlanner","commands","inputs","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","router","weth","steth","wsteth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","STETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","planner","_config","payerIsUser","payerIsRouter","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","recipient","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","inputIsNative","routerMustCustody","hasFeeOption","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputTokenPermit","UnwrapWETH","WrapSTETH","UnwrapSTETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","wrapAmount","stethAddress","amountMinimum"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js
index 00f5ced..71a0073 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var t,n=e(require("tiny-invariant")),a=require("@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json"),i=require("@ethersproject/abi"),r=require("ethers"),p=e(require("jsbi")),s=require("ethers/lib/utils"),y=require("@uniswap/v2-sdk"),u=require("@uniswap/v3-sdk"),o=require("@uniswap/router-sdk"),d=require("@uniswap/sdk-core");function l(){return(l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function m(e,t){var n,a;e.prototype=Object.create(t.prototype),e.prototype.constructor=e,n=e,a=t,(Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(n,a)}function T(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function c(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return T(e,void 0);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?T(e,void 0):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0;return function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(t=exports.RouterTradeType||(exports.RouterTradeType={})).UniswapTrade="UniswapTrade",t.NFTTrade="NFTTrade",t.UnwrapWETH="UnwrapWETH";var f,b,v,A,C=function(e,t){this.tradeType=exports.RouterTradeType.NFTTrade,t.length>0||n(!1),this.market=e,this.orders=t};(f=exports.Market||(exports.Market={})).Foundation="foundation",f.LooksRareV2="looksrareV2",f.NFT20="nft20",f.NFTX="nftx",f.Seaport="seaport",f.Sudoswap="Sudoswap",f.Cryptopunks="cryptopunks",f.X2Y2="x2y2",f.Element="element",(b=exports.TokenType||(exports.TokenType={})).ERC721="ERC721",b.ERC1155="ERC1155",b.Cryptopunk="Cryptopunk",function(e){e[e.V3_SWAP_EXACT_IN=0]="V3_SWAP_EXACT_IN",e[e.V3_SWAP_EXACT_OUT=1]="V3_SWAP_EXACT_OUT",e[e.PERMIT2_TRANSFER_FROM=2]="PERMIT2_TRANSFER_FROM",e[e.PERMIT2_PERMIT_BATCH=3]="PERMIT2_PERMIT_BATCH",e[e.SWEEP=4]="SWEEP",e[e.TRANSFER=5]="TRANSFER",e[e.PAY_PORTION=6]="PAY_PORTION",e[e.V2_SWAP_EXACT_IN=8]="V2_SWAP_EXACT_IN",e[e.V2_SWAP_EXACT_OUT=9]="V2_SWAP_EXACT_OUT",e[e.PERMIT2_PERMIT=10]="PERMIT2_PERMIT",e[e.WRAP_ETH=11]="WRAP_ETH",e[e.UNWRAP_WETH=12]="UNWRAP_WETH",e[e.PERMIT2_TRANSFER_FROM_BATCH=13]="PERMIT2_TRANSFER_FROM_BATCH",e[e.BALANCE_CHECK_ERC20=14]="BALANCE_CHECK_ERC20",e[e.SEAPORT_V1_5=16]="SEAPORT_V1_5",e[e.LOOKS_RARE_V2=17]="LOOKS_RARE_V2",e[e.NFTX=18]="NFTX",e[e.CRYPTOPUNKS=19]="CRYPTOPUNKS",e[e.OWNER_CHECK_721=21]="OWNER_CHECK_721",e[e.OWNER_CHECK_1155=22]="OWNER_CHECK_1155",e[e.SWEEP_ERC721=23]="SWEEP_ERC721",e[e.X2Y2_721=24]="X2Y2_721",e[e.SUDOSWAP=25]="SUDOSWAP",e[e.NFT20=26]="NFT20",e[e.X2Y2_1155=27]="X2Y2_1155",e[e.FOUNDATION=28]="FOUNDATION",e[e.SWEEP_ERC1155=29]="SWEEP_ERC1155",e[e.ELEMENT_MARKET=30]="ELEMENT_MARKET",e[e.SEAPORT_V1_4=32]="SEAPORT_V1_4",e[e.EXECUTE_SUB_PLAN=33]="EXECUTE_SUB_PLAN",e[e.APPROVE_ERC20=34]="APPROVE_ERC20"}(A||(A={}));var S,I=new Set([A.SEAPORT_V1_5,A.SEAPORT_V1_4,A.NFTX,A.LOOKS_RARE_V2,A.X2Y2_721,A.X2Y2_1155,A.FOUNDATION,A.SUDOSWAP,A.NFT20,A.EXECUTE_SUB_PLAN,A.CRYPTOPUNKS,A.ELEMENT_MARKET]),R=((v={})[A.EXECUTE_SUB_PLAN]=["bytes","bytes[]"],v[A.PERMIT2_PERMIT]=["((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)","bytes"],v[A.PERMIT2_PERMIT_BATCH]=["((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)","bytes"],v[A.PERMIT2_TRANSFER_FROM]=["address","address","uint160"],v[A.PERMIT2_TRANSFER_FROM_BATCH]=["(address from,address to,uint160 amount,address token)[]"],v[A.V3_SWAP_EXACT_IN]=["address","uint256","uint256","bytes","bool"],v[A.V3_SWAP_EXACT_OUT]=["address","uint256","uint256","bytes","bool"],v[A.V2_SWAP_EXACT_IN]=["address","uint256","uint256","address[]","bool"],v[A.V2_SWAP_EXACT_OUT]=["address","uint256","uint256","address[]","bool"],v[A.WRAP_ETH]=["address","uint256"],v[A.UNWRAP_WETH]=["address","uint256"],v[A.SWEEP]=["address","address","uint256"],v[A.SWEEP_ERC721]=["address","address","uint256"],v[A.SWEEP_ERC1155]=["address","address","uint256","uint256"],v[A.TRANSFER]=["address","address","uint256"],v[A.PAY_PORTION]=["address","address","uint256"],v[A.BALANCE_CHECK_ERC20]=["address","address","uint256"],v[A.OWNER_CHECK_721]=["address","address","uint256"],v[A.OWNER_CHECK_1155]=["address","address","uint256","uint256"],v[A.APPROVE_ERC20]=["address","uint256"],v[A.SEAPORT_V1_5]=["uint256","bytes"],v[A.SEAPORT_V1_4]=["uint256","bytes"],v[A.NFTX]=["uint256","bytes"],v[A.LOOKS_RARE_V2]=["uint256","bytes"],v[A.X2Y2_721]=["uint256","bytes","address","address","uint256"],v[A.X2Y2_1155]=["uint256","bytes","address","address","uint256","uint256"],v[A.FOUNDATION]=["uint256","bytes","address","address","uint256"],v[A.SUDOSWAP]=["uint256","bytes"],v[A.NFT20]=["uint256","bytes"],v[A.CRYPTOPUNKS]=["uint256","address","uint256"],v[A.ELEMENT_MARKET]=["uint256","bytes"],v),M=function(){function e(){this.commands="0x",this.inputs=[]}var t=e.prototype;return t.addSubPlan=function(e){this.addCommand(A.EXECUTE_SUB_PLAN,[e.commands,e.inputs],!0)},t.addCommand=function(e,t,n){void 0===n&&(n=!1);var a=function(e,t){return{type:e,encodedInput:s.defaultAbiCoder.encode(R[e],t)}}(e,t);if(this.inputs.push(a.encodedInput),n){if(!I.has(a.type))throw new Error("command type: "+a.type+" cannot be allowed to revert");a.type=128|a.type}this.commands=this.commands.concat(a.type.toString(16).padStart(2,"0"))},e}(),_=((S={})[1]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",creationBlock:17143817},S[5]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6",creationBlock:8940568},S[11155111]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14",creationBlock:3543575},S[137]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",creationBlock:42294741},S[80001]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",creationBlock:35176052},S[10]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x4200000000000000000000000000000000000006",creationBlock:96333990},S[420]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x4200000000000000000000000000000000000006",creationBlock:8887728},S[42161]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",creationBlock:87206402},S[421613]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3",creationBlock:18815277},S[42220]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x0000000000000000000000000000000000000000",creationBlock:19106929},S[44787]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x0000000000000000000000000000000000000000",creationBlock:17566658},S[56]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",creationBlock:27915533},S[43114]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",creationBlock:31583684},S[84531]={router:"0xd0872d928672ae2ff74bdb2f5130ac12229cafaf",weth:"0x4200000000000000000000000000000000000006",creationBlock:6915289},S[8453]={router:"0x198EF79F1F515F02dFE9e3115eD9fC07183f02fC",weth:"0x4200000000000000000000000000000000000006",creationBlock:1452376},S),x=function(e){if(!(e in _))throw new Error("Universal Router not deployed on chain "+e);if("0x0000000000000000000000000000000000000000"==_[e].weth)throw new Error("Chain "+e+" does not have WETH");return _[e].weth},k=r.BigNumber.from(2).pow(255),E="0x0000000000000000000000000000000000000000",P="0x0000000000000000000000000000000000000000",O="0x0000000000000000000000000000000000000001",w="0x0000000000000000000000000000000000000002",F=new d.Percent(p.BigInt(50),p.BigInt(100)),h=function(){function e(e,t){this.trade=e,this.options=t,this.tradeType=exports.RouterTradeType.UniswapTrade}return e.prototype.encode=function(e,t){var n,a=!0;this.trade.inputAmount.currency.isNative&&(e.addCommand(A.WRAP_ETH,[w,this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]),a=!1),this.options.recipient=null!=(n=this.options.recipient)?n:O;for(var i,r=this.trade.outputAmount.currency.isNative,p=this.trade.inputAmount.currency.isNative,s=this.trade.tradeType===d.TradeType.EXACT_INPUT&&this.trade.routes.length>2||r,y=c(this.trade.swaps);!(i=y()).done;){var u=i.value;switch(u.route.protocol){case o.Protocol.V2:N(e,u,this.trade.tradeType,this.options,a,s);break;case o.Protocol.V3:g(e,u,this.trade.tradeType,this.options,a,s);break;case o.Protocol.MIXED:B(e,u,this.trade.tradeType,this.options,a,s);break;default:throw new Error("UNSUPPORTED_TRADE_PROTOCOL")}}s&&(r?e.addCommand(A.UNWRAP_WETH,[this.options.recipient,this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()]):e.addCommand(A.SWEEP,[this.trade.outputAmount.currency.wrapped.address,this.options.recipient,this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()])),p&&(this.trade.tradeType===d.TradeType.EXACT_OUTPUT||this.trade.priceImpact.greaterThan(F))&&e.addCommand(A.UNWRAP_WETH,[this.options.recipient,0])},e}();function N(e,t,n,a,i,r){var p=t.route,s=new y.Trade(p,n==d.TradeType.EXACT_INPUT?t.inputAmount:t.outputAmount,n);n==d.TradeType.EXACT_INPUT?e.addCommand(A.V2_SWAP_EXACT_IN,[r?w:a.recipient,s.maximumAmountIn(a.slippageTolerance).quotient.toString(),s.minimumAmountOut(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.address})),i]):n==d.TradeType.EXACT_OUTPUT&&e.addCommand(A.V2_SWAP_EXACT_OUT,[r?w:a.recipient,s.minimumAmountOut(a.slippageTolerance).quotient.toString(),s.maximumAmountIn(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.address})),i])}function g(e,t,n,a,i,r){var p=t.route,s=u.Trade.createUncheckedTrade({route:p,inputAmount:t.inputAmount,outputAmount:t.outputAmount,tradeType:n}),y=u.encodeRouteToPath(p,s.tradeType===d.TradeType.EXACT_OUTPUT);n==d.TradeType.EXACT_INPUT?e.addCommand(A.V3_SWAP_EXACT_IN,[r?w:a.recipient,s.maximumAmountIn(a.slippageTolerance).quotient.toString(),s.minimumAmountOut(a.slippageTolerance).quotient.toString(),y,i]):n==d.TradeType.EXACT_OUTPUT&&e.addCommand(A.V3_SWAP_EXACT_OUT,[r?w:a.recipient,s.minimumAmountOut(a.slippageTolerance).quotient.toString(),s.maximumAmountIn(a.slippageTolerance).quotient.toString(),y,i])}function B(e,t,n,a,i,r){var p=t.route,s=t.inputAmount,d=t.outputAmount,l=r?w:a.recipient;if(1===p.pools.length){if(p.pools[0]instanceof u.Pool)return g(e,t,n,a,i,r);if(p.pools[0]instanceof y.Pair)return N(e,t,n,a,i,r);throw new Error("Invalid route type")}for(var m,T=o.MixedRouteTrade.createUncheckedTrade({route:p,inputAmount:s,outputAmount:d,tradeType:n}),c=T.maximumAmountIn(a.slippageTolerance,s).quotient.toString(),f=T.minimumAmountOut(a.slippageTolerance,d).quotient.toString(),b=o.partitionMixedRouteByProtocol(p),v=function(e){return e===b.length-1},C=p.input.wrapped,S=0;S<b.length;S++){var I=b[S];m=o.getOutputOfPools(I,C);var R=new o.MixedRouteSDK([].concat(I),I[0].token0.equals(C)?I[0].token0:I[0].token1,m),M=new o.MixedRoute(R);if(C=m,function(e){return e.pools.every((function(e){return e instanceof u.Pool}))}(M)){var _=o.encodeMixedRouteToPath(M);e.addCommand(A.V3_SWAP_EXACT_IN,[v(S)?l:b[S+1][0].liquidityToken.address,0==S?c:k,v(S)?f:0,_,i&&0===S])}else e.addCommand(A.V2_SWAP_EXACT_IN,[v(S)?l:w,0===S?c:k,v(S)?f:0,M.path.map((function(e){return e.address})),i&&0===S])}}function V(e,t){var n=t.signature,a=r.ethers.utils.arrayify(t.signature).length;65!==a&&64!==a||(n=r.ethers.utils.joinSignature(r.ethers.utils.splitSignature(t.signature))),e.addCommand(A.PERMIT2_PERMIT,[t,n])}function L(e,t){t.approval&&t.permit2Permit&&t.approval.token!==t.permit2Permit.details.token&&n(!1),t.approval&&t.permit2TransferFrom&&t.approval.token!==t.permit2TransferFrom.token&&n(!1),t.permit2TransferFrom&&t.permit2Permit&&t.permit2TransferFrom.token!==t.permit2Permit.details.token&&n(!1),t.approval&&e.addCommand(A.APPROVE_ERC20,[t.approval.token,D(t.approval.protocol)]),t.permit2Permit&&V(e,t.permit2Permit),t.permit2TransferFrom&&e.addCommand(A.PERMIT2_TRANSFER_FROM,[t.permit2TransferFrom.token,t.permit2TransferFrom.recipient?t.permit2TransferFrom.recipient:w,t.permit2TransferFrom.amount])}function D(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return 0;case"0x2b2e8cda09bba9660dca5cb6233787738ad68329":return 1;default:throw new Error("unsupported protocol address")}}var U=function(){function e(){}return e.swapCallParameters=function(t,a){void 0===a&&(a={}),Array.isArray(t)||(t=[t]);for(var i,p=t.filter((function(e,t,n){return e.hasOwnProperty("market")})),s=1!=p.length||1!=p[0].orders.length,y=new M,u=r.BigNumber.from(0),o=r.BigNumber.from(0),d=new Set,l=c(t);!(i=l()).done;){var m=i.value;if(m.tradeType==exports.RouterTradeType.NFTTrade){var T=m;T.encode(y,{allowRevert:s});var f=T.getTotalPrice();T.market==exports.Market.Seaport?T.getInputTokens().forEach((function(e){d.add(e)})):d.add(E),u.lt(f)?(o=o.add(f.sub(u)),u=r.BigNumber.from(0)):u=u.sub(f)}else if(m.tradeType==exports.RouterTradeType.UniswapTrade){var b=m,v=b.trade.inputAmount.currency.isNative,C=b.trade.outputAmount.currency.isNative,S=b.options;v&&S.inputTokenPermit&&n(!1),S.inputTokenPermit&&V(y,S.inputTokenPermit),v&&(o=o.add(r.BigNumber.from(b.trade.maximumAmountIn(S.slippageTolerance).quotient.toString()))),C&&S.recipient==w&&(u=u.add(r.BigNumber.from(b.trade.minimumAmountOut(S.slippageTolerance).quotient.toString()))),b.encode(y,{allowRevert:!1})}else{if(m.tradeType!=exports.RouterTradeType.UnwrapWETH)throw"trade must be of instance: UniswapTrade or NFTTrade";var I=m;m.encode(y,{allowRevert:!1}),u=u.add(I.amount)}}return d.forEach((function(e){y.addCommand(A.SWEEP,[e,O,0])})),e.encodePlan(y,o,a)},e.swapNFTCallParameters=function(t,n){void 0===n&&(n={});for(var a,i=new M,p=r.BigNumber.from(0),s=1!=t.length||1!=t[0].orders.length,y=c(t);!(a=y()).done;){var u=a.value;u.encode(i,{allowRevert:s}),p=p.add(u.getTotalPrice())}return i.addCommand(A.SWEEP,[E,O,0]),e.encodePlan(i,p,n)},e.swapERC20CallParameters=function(t,a){var i=new M,p=new h(t,a),s=p.trade.inputAmount.currency;s.isNative&&a.inputTokenPermit&&n(!1),a.inputTokenPermit&&V(i,a.inputTokenPermit);var y=r.BigNumber.from(s.isNative?p.trade.maximumAmountIn(a.slippageTolerance).quotient.toString():0);return p.encode(i,{allowRevert:!1}),e.encodePlan(i,y,{deadline:a.deadlineOrPreviousBlockhash?r.BigNumber.from(a.deadlineOrPreviousBlockhash):void 0})},e.encodePlan=function(t,n,a){void 0===a&&(a={});var i=t.commands,r=t.inputs;return{calldata:e.INTERFACE.encodeFunctionData(a.deadline?"execute(bytes,bytes[],uint256)":"execute(bytes,bytes[])",a.deadline?[i,r,a.deadline]:[i,r]),value:n.toHexString()}},e}();U.INTERFACE=new i.Interface(a.abi);var H=function(e){function t(t){return e.call(this,exports.Market.Cryptopunks,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,t){for(var n,a=c(this.orders);!(n=a()).done;){var i=n.value;e.addCommand(A.CRYPTOPUNKS,[i.tokenId,i.recipient,i.value],t.allowRevert)}},n.getBuyItems=function(){for(var e,n=[],a=c(this.orders);!(e=a()).done;)n.push({tokenAddress:t.CRYPTOPUNK_ADDRESS,tokenId:e.value.tokenId,tokenType:exports.TokenType.Cryptopunk});return n},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(C);H.CRYPTOPUNK_ADDRESS="0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb";var W=[{inputs:[{internalType:"address payable",name:"treasury",type:"address"},{internalType:"address",name:"feth",type:"address"},{internalType:"address",name:"royaltyRegistry",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"FoundationTreasuryNode_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"FoundationTreasuryNode_Caller_Not_Admin",type:"error"},{inputs:[{internalType:"uint256",name:"buyPrice",type:"uint256"}],name:"NFTMarketBuyPrice_Cannot_Buy_At_Lower_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Buy_Unset_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Cancel_Unset_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Cancel_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Set_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Too_High",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketBuyPrice_Seller_Mismatch",type:"error"},{inputs:[],name:"NFTMarketCore_FETH_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"NFTMarketCore_Only_FETH_Can_Transfer_ETH",type:"error"},{inputs:[],name:"NFTMarketCore_Seller_Not_Found",type:"error"},{inputs:[],name:"NFTMarketFees_Address_Does_Not_Support_IRoyaltyRegistry",type:"error"},{inputs:[],name:"NFTMarketOffer_Cannot_Be_Made_While_In_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"currentOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Below_Min_Amount",type:"error"},{inputs:[{internalType:"uint256",name:"expiry",type:"uint256"}],name:"NFTMarketOffer_Offer_Expired",type:"error"},{inputs:[{internalType:"address",name:"currentOfferFrom",type:"address"}],name:"NFTMarketOffer_Offer_From_Does_Not_Match",type:"error"},{inputs:[{internalType:"uint256",name:"minOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketOffer_Provided_Contract_And_TokenId_Count_Must_Match",type:"error"},{inputs:[],name:"NFTMarketOffer_Reason_Required",type:"error"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"NFTMarketReserveAuction_Already_Listed",type:"error"},{inputs:[{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"NFTMarketReserveAuction_Bid_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Admin_Cancel_Without_Reason",type:"error"},{inputs:[{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_Lower_Than_Reserve_Price",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_On_Ended_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Bid_On_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Cancel_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Finalize_Already_Settled_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Finalize_Auction_In_Progress",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Rebid_Over_Outstanding_Bid",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Update_Auction_In_Progress",type:"error"},{inputs:[{internalType:"uint256",name:"maxDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Exceeds_Max_Duration",type:"error"},{inputs:[{internalType:"uint256",name:"extensionDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Less_Than_Extension_Duration",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Must_Set_Non_Zero_Reserve_Price",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketReserveAuction_Not_Matching_Seller",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketReserveAuction_Only_Owner_Can_Update_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Too_Much_Value_Provided",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"BuyPriceAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"price",type:"uint256"}],name:"BuyPriceSet",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"address",name:"buyReferrer",type:"address"},{indexed:!1,internalType:"uint256",name:"buyReferrerProtocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"buyReferrerSellerFee",type:"uint256"}],name:"BuyReferralPaid",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"OfferAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"OfferCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"OfferInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"expiration",type:"uint256"}],name:"OfferMade",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"endTime",type:"uint256"}],name:"ReserveAuctionBidPlaced",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"ReserveAuctionCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"duration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"extensionDuration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"},{indexed:!1,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCreated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"ReserveAuctionFinalized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"ReserveAuctionUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawalToFETH",type:"event"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address",name:"offerFrom",type:"address"},{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"acceptOffer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"nftContracts",type:"address[]"},{internalType:"uint256[]",name:"tokenIds",type:"uint256[]"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelOffers",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"buy",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"buyV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"cancelBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"cancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"createReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"finalizeReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getBuyPrice",outputs:[{internalType:"address",name:"seller",type:"address"},{internalType:"uint256",name:"price",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"getFeesAndRecipients",outputs:[{internalType:"uint256",name:"protocolFee",type:"uint256"},{internalType:"uint256",name:"creatorRev",type:"uint256"},{internalType:"address payable[]",name:"creatorRecipients",type:"address[]"},{internalType:"uint256[]",name:"creatorShares",type:"uint256[]"},{internalType:"uint256",name:"sellerRev",type:"uint256"},{internalType:"address payable",name:"owner",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFethAddress",outputs:[{internalType:"address",name:"fethAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFoundationTreasury",outputs:[{internalType:"address payable",name:"treasuryAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getImmutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getMinBidAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getMinOfferAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"creator",type:"address"}],name:"getMutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOffer",outputs:[{internalType:"address",name:"buyer",type:"address"},{internalType:"uint256",name:"expiration",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOfferReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuction",outputs:[{components:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"seller",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"},{internalType:"uint256",name:"extensionDuration",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"address payable",name:"bidder",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct NFTMarketReserveAuction.ReserveAuction",name:"auction",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuctionBidReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getReserveAuctionIdFor",outputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getRoyaltyRegistry",outputs:[{internalType:"address",name:"registry",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getTokenCreator",outputs:[{internalType:"address payable",name:"creator",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"makeOffer",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"makeOfferV2",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"placeBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"placeBidV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"setBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"updateReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],X=function(e){function t(t){return e.call(this,exports.Market.Foundation,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,i=c(this.orders);!(a=i()).done;){var r=a.value,p=t.INTERFACE.encodeFunctionData("buyV2",[r.tokenAddress,r.tokenId,r.price,r.referrer]);e.addCommand(A.FOUNDATION,[r.price,p,r.recipient,r.tokenAddress,r.tokenId],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:exports.TokenType.ERC721})}return t},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(C);X.INTERFACE=new i.Interface(W);var K=[{inputs:[{internalType:"address",name:"_owner",type:"address"},{internalType:"address",name:"_protocolFeeRecipient",type:"address"},{internalType:"address",name:"_transferManager",type:"address"},{internalType:"address",name:"_weth",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"CallerInvalid",type:"error"},{inputs:[],name:"ChainIdInvalid",type:"error"},{inputs:[],name:"CreatorFeeBpTooHigh",type:"error"},{inputs:[],name:"CurrencyInvalid",type:"error"},{inputs:[],name:"ERC20TransferFromFail",type:"error"},{inputs:[],name:"LengthsInvalid",type:"error"},{inputs:[],name:"MerkleProofInvalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"MerkleProofTooLarge",type:"error"},{inputs:[],name:"NewGasLimitETHTransferTooLow",type:"error"},{inputs:[],name:"NewProtocolFeeRecipientCannotBeNullAddress",type:"error"},{inputs:[],name:"NoOngoingTransferInProgress",type:"error"},{inputs:[],name:"NoSelectorForStrategy",type:"error"},{inputs:[],name:"NoncesInvalid",type:"error"},{inputs:[],name:"NotAContract",type:"error"},{inputs:[],name:"NotAffiliateController",type:"error"},{inputs:[],name:"NotOwner",type:"error"},{inputs:[],name:"NotV2Strategy",type:"error"},{inputs:[],name:"NullSignerAddress",type:"error"},{inputs:[],name:"OutsideOfTimeRange",type:"error"},{inputs:[],name:"PercentageTooHigh",type:"error"},{inputs:[],name:"QuoteTypeInvalid",type:"error"},{inputs:[],name:"ReentrancyFail",type:"error"},{inputs:[],name:"RenouncementNotInProgress",type:"error"},{inputs:[],name:"SameDomainSeparator",type:"error"},{inputs:[],name:"SignatureEOAInvalid",type:"error"},{inputs:[],name:"SignatureERC1271Invalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"SignatureLengthInvalid",type:"error"},{inputs:[],name:"SignatureParameterSInvalid",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"SignatureParameterVInvalid",type:"error"},{inputs:[],name:"StrategyHasNoSelector",type:"error"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"}],name:"StrategyNotAvailable",type:"error"},{inputs:[],name:"StrategyNotUsed",type:"error"},{inputs:[],name:"StrategyProtocolFeeTooHigh",type:"error"},{inputs:[],name:"TransferAlreadyInProgress",type:"error"},{inputs:[],name:"TransferNotInProgress",type:"error"},{inputs:[],name:"WrongPotentialOwner",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"uint256",name:"affiliateFee",type:"uint256"}],name:"AffiliatePayment",type:"event"},{anonymous:!1,inputs:[],name:"CancelOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"bool",name:"isAllowed",type:"bool"}],name:"CurrencyStatusUpdated",type:"event"},{anonymous:!1,inputs:[],name:"InitiateOwnershipRenouncement",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"previousOwner",type:"address"},{indexed:!1,internalType:"address",name:"potentialOwner",type:"address"}],name:"InitiateOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliateController",type:"address"}],name:"NewAffiliateController",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"isActive",type:"bool"}],name:"NewAffiliateProgramStatus",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"uint256",name:"rate",type:"uint256"}],name:"NewAffiliateRate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"bidNonce",type:"uint256"},{indexed:!1,internalType:"uint256",name:"askNonce",type:"uint256"}],name:"NewBidAskNonces",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"creatorFeeManager",type:"address"}],name:"NewCreatorFeeManager",type:"event"},{anonymous:!1,inputs:[],name:"NewDomainSeparator",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"gasLimitETHTransfer",type:"uint256"}],name:"NewGasLimitETHTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"maxCreatorFeeBp",type:"uint256"}],name:"NewMaxCreatorFeeBp",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newOwner",type:"address"}],name:"NewOwner",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"protocolFeeRecipient",type:"address"}],name:"NewProtocolFeeRecipient",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"bytes4",name:"selector",type:"bytes4"},{indexed:!1,internalType:"bool",name:"isMakerBid",type:"bool"},{indexed:!1,internalType:"address",name:"implementation",type:"address"}],name:"NewStrategy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"OrderNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"bool",name:"isActive",type:"bool"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"}],name:"StrategyUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"SubsetNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"askUser",type:"address"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerAsk",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"address",name:"bidRecipient",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerBid",type:"event"},{inputs:[],name:"MAGIC_VALUE_ORDER_NONCE_EXECUTED",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],name:"addStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"affiliateController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"affiliateRates",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"cancelOrderNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"cancelOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"cancelSubsetNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"chainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"confirmOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"confirmOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"creatorFeeManager",outputs:[{internalType:"contract ICreatorFeeManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"domainSeparator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker[]",name:"takerBids",type:"tuple[]"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker[]",name:"makerAsks",type:"tuple[]"},{internalType:"bytes[]",name:"makerSignatures",type:"bytes[]"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree[]",name:"merkleTrees",type:"tuple[]"},{internalType:"address",name:"affiliate",type:"address"},{internalType:"bool",name:"isAtomic",type:"bool"}],name:"executeMultipleTakerBids",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerAsk",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerBid",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerAsk",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes32",name:"root",type:"bytes32"},{internalType:"uint256",name:"proofLength",type:"uint256"}],name:"hashBatchOrder",outputs:[{internalType:"bytes32",name:"batchOrderHash",type:"bytes32"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"bool",name:"bid",type:"bool"},{internalType:"bool",name:"ask",type:"bool"}],name:"incrementBidAskNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initiateOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newPotentialOwner",type:"address"}],name:"initiateOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"isAffiliateProgramActive",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"isCurrencyAllowed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"maxCreatorFeeBp",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"ownershipStatus",outputs:[{internalType:"enum IOwnableTwoSteps.Status",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"potentialOwner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"protocolFeeRecipient",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"address",name:"sender",type:"address"},{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"restrictedExecuteTakerBid",outputs:[{internalType:"uint256",name:"protocolFeeAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"strategyInfo",outputs:[{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"transferManager",outputs:[{internalType:"contract TransferManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newAffiliateController",type:"address"}],name:"updateAffiliateController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bool",name:"isActive",type:"bool"}],name:"updateAffiliateProgramStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"affiliate",type:"address"},{internalType:"uint256",name:"bp",type:"uint256"}],name:"updateAffiliateRate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newCreatorFeeManager",type:"address"}],name:"updateCreatorFeeManager",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"currency",type:"address"},{internalType:"bool",name:"isAllowed",type:"bool"}],name:"updateCurrencyStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"updateDomainSeparator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"newGasLimitETHTransfer",type:"uint256"}],name:"updateETHGasLimitForTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint16",name:"newMaxCreatorFeeBp",type:"uint16"}],name:"updateMaxCreatorFeeBp",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newProtocolFeeRecipient",type:"address"}],name:"updateProtocolFeeRecipient",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"newStandardProtocolFee",type:"uint16"},{internalType:"uint16",name:"newMinTotalFee",type:"uint16"}],name:"updateStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"userBidAskNonces",outputs:[{internalType:"uint256",name:"bidNonce",type:"uint256"},{internalType:"uint256",name:"askNonce",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userOrderNonce",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userSubsetNonce",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}],q=function(e){function t(t){return e.call(this,exports.Market.LooksRareV2,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){var a,i=this.refactorAPIData(this.orders),r=i.takerBids,p=i.makerOrders,s=i.makerSignatures,y=i.totalValue,u=i.merkleTrees;a=1==this.orders.length?t.INTERFACE.encodeFunctionData("executeTakerBid",[r[0],p[0],s[0],u[0],P]):t.INTERFACE.encodeFunctionData("executeMultipleTakerBids",[r,p,s,u,P,!1]),e.addCommand(A.LOOKS_RARE_V2,[y,a],n.allowRevert)},n.getBuyItems=function(){for(var e,n=[],a=c(this.orders);!(e=a()).done;)for(var i,r=e.value,p=r.apiOrder.collection,s=r.apiOrder.collectionType==t.ERC721_ORDER?exports.TokenType.ERC721:exports.TokenType.ERC1155,y=c(r.apiOrder.itemIds);!(i=y()).done;)n.push({tokenAddress:p,tokenId:i.value,tokenType:s});return n},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.apiOrder.price);return t},n.refactorAPIData=function(e){var t=[],n=[],a=[],i=r.BigNumber.from(0),p=[];return e.forEach((function(e){var s,y;n.push(l({},e.apiOrder)),a.push(e.apiOrder.signature),t.push({recipient:e.taker,additionalParameters:"0x"}),i=i.add(r.BigNumber.from(e.apiOrder.price)),p.push({root:null!=(s=e.apiOrder.merkleRoot)?s:"0x0000000000000000000000000000000000000000000000000000000000000000",proof:null!=(y=e.apiOrder.merkleProof)?y:[]})})),{takerBids:t,makerOrders:n,makerSignatures:a,totalValue:i,merkleTrees:p}},t}(C);q.INTERFACE=new i.Interface(K),q.ERC721_ORDER=0;var z=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{inputs:[],name:"ETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"NFT20",outputs:[{internalType:"contract INFT20Factory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV2",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV3",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_toIds",type:"uint256[]"},{internalType:"uint256[]",name:"_toAmounts",type:"uint256[]"},{internalType:"address",name:"_receipient",type:"address"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"ethForNft",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_ids",type:"uint256[]"},{internalType:"uint256[]",name:"_amounts",type:"uint256[]"},{internalType:"bool",name:"isErc721",type:"bool"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"nftForEth",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"tokenAmount",type:"uint256"},{internalType:"address",name:"sendTo",type:"address"}],name:"recoverERC20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_registry",type:"address"}],name:"setNFT20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"withdrawEth",outputs:[],stateMutability:"payable",type:"function"},{stateMutability:"payable",type:"receive"}],Y=function(e){function t(t){return e.call(this,exports.Market.NFT20,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,i=c(this.orders);!(a=i()).done;){var r=a.value,p=t.INTERFACE.encodeFunctionData("ethForNft",[r.tokenAddress,r.tokenIds,r.tokenAmounts,r.recipient,r.fee,r.isV3]);e.addCommand(A.NFT20,[r.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,i=e.value,r=c(i.tokenIds);!(a=r()).done;)t.push({tokenAddress:i.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(C);Y.INTERFACE=new i.Interface(z);var j=[{inputs:[{internalType:"address",name:"_nftxFactory",type:"address"},{internalType:"address",name:"_WETH",type:"address"},{internalType:"address payable",name:"_swapTarget",type:"address"},{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Buy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"ethAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vTokenAmount",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"DustReturned",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethReceived",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Sell",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Swap",type:"event"},{inputs:[],name:"WETH",outputs:[{internalType:"contract IWETH",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndRedeem",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap1155",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap721",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"dustThreshold",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeDistributor",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell1155",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell721",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"nftxFactory",outputs:[{internalType:"contract INFTXVaultFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"nftxVaultAddresses",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155BatchReceived",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC721Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"_paused",type:"bool"}],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"rescue",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],name:"setDustThreshold",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],G=function(e){function t(t){return e.call(this,exports.Market.NFTX,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,i=c(this.orders);!(a=i()).done;){var r=a.value,p=t.INTERFACE.encodeFunctionData("buyAndRedeem",[r.vaultId,r.tokenIds.length,r.tokenIds,r.swapCalldata,r.recipient]);e.addCommand(A.NFTX,[r.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,i=e.value,r=c(i.tokenIds);!(a=r()).done;)t.push({tokenAddress:i.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(C);G.INTERFACE=new i.Interface(j);var Q=[{inputs:[{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"BadContractSignature",type:"error"},{inputs:[],name:"BadFraction",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"BadReturnValueFromERC20OnTransfer",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"BadSignatureV",type:"error"},{inputs:[],name:"ConsiderationCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"considerationIndex",type:"uint256"},{internalType:"uint256",name:"shortfallAmount",type:"uint256"}],name:"ConsiderationNotMet",type:"error"},{inputs:[],name:"CriteriaNotEnabledForItem",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256[]",name:"identifiers",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],name:"ERC1155BatchTransferGenericFailure",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"EtherTransferGenericFailure",type:"error"},{inputs:[],name:"InexactFraction",type:"error"},{inputs:[],name:"InsufficientEtherSupplied",type:"error"},{inputs:[],name:"Invalid1155BatchTransferEncoding",type:"error"},{inputs:[],name:"InvalidBasicOrderParameterEncoding",type:"error"},{inputs:[{internalType:"address",name:"conduit",type:"address"}],name:"InvalidCallToConduit",type:"error"},{inputs:[],name:"InvalidCanceller",type:"error"},{inputs:[{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"address",name:"conduit",type:"address"}],name:"InvalidConduit",type:"error"},{inputs:[],name:"InvalidERC721TransferAmount",type:"error"},{inputs:[],name:"InvalidFulfillmentComponentData",type:"error"},{inputs:[{internalType:"uint256",name:"value",type:"uint256"}],name:"InvalidMsgValue",type:"error"},{inputs:[],name:"InvalidNativeOfferItem",type:"error"},{inputs:[],name:"InvalidProof",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"InvalidRestrictedOrder",type:"error"},{inputs:[],name:"InvalidSignature",type:"error"},{inputs:[],name:"InvalidSigner",type:"error"},{inputs:[],name:"InvalidTime",type:"error"},{inputs:[],name:"MismatchedFulfillmentOfferAndConsiderationComponents",type:"error"},{inputs:[{internalType:"enum Side",name:"side",type:"uint8"}],name:"MissingFulfillmentComponentOnAggregation",type:"error"},{inputs:[],name:"MissingItemAmount",type:"error"},{inputs:[],name:"MissingOriginalConsiderationItems",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"NoContract",type:"error"},{inputs:[],name:"NoReentrantCalls",type:"error"},{inputs:[],name:"NoSpecifiedOrdersAvailable",type:"error"},{inputs:[],name:"OfferAndConsiderationRequiredOnFulfillment",type:"error"},{inputs:[],name:"OfferCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderAlreadyFilled",type:"error"},{inputs:[],name:"OrderCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderIsCancelled",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderPartiallyFilled",type:"error"},{inputs:[],name:"PartialFillsNotEnabledForOrder",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenTransferGenericFailure",type:"error"},{inputs:[],name:"UnresolvedConsiderationCriteria",type:"error"},{inputs:[],name:"UnresolvedOfferCriteria",type:"error"},{inputs:[],name:"UnusedItemParameters",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newCounter",type:"uint256"},{indexed:!0,internalType:"address",name:"offerer",type:"address"}],name:"CounterIncremented",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"},{indexed:!1,internalType:"address",name:"recipient",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],indexed:!1,internalType:"struct SpentItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],indexed:!1,internalType:"struct ReceivedItem[]",name:"consideration",type:"tuple[]"}],name:"OrderFulfilled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderValidated",type:"event"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents[]",name:"orders",type:"tuple[]"}],name:"cancel",outputs:[{internalType:"bool",name:"cancelled",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder",name:"advancedOrder",type:"tuple"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"}],name:"fulfillAdvancedOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableAdvancedOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"considerationToken",type:"address"},{internalType:"uint256",name:"considerationIdentifier",type:"uint256"},{internalType:"uint256",name:"considerationAmount",type:"uint256"},{internalType:"address payable",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{internalType:"address",name:"offerToken",type:"address"},{internalType:"uint256",name:"offerIdentifier",type:"uint256"},{internalType:"uint256",name:"offerAmount",type:"uint256"},{internalType:"enum BasicOrderType",name:"basicOrderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"offererConduitKey",type:"bytes32"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalAdditionalRecipients",type:"uint256"},{components:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct AdditionalRecipient[]",name:"additionalRecipients",type:"tuple[]"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct BasicOrderParameters",name:"parameters",type:"tuple"}],name:"fulfillBasicOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order",name:"order",type:"tuple"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"}],name:"fulfillOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"offerer",type:"address"}],name:"getCounter",outputs:[{internalType:"uint256",name:"counter",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents",name:"order",type:"tuple"}],name:"getOrderHash",outputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"getOrderStatus",outputs:[{internalType:"bool",name:"isValidated",type:"bool"},{internalType:"bool",name:"isCancelled",type:"bool"},{internalType:"uint256",name:"totalFilled",type:"uint256"},{internalType:"uint256",name:"totalSize",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"incrementCounter",outputs:[{internalType:"uint256",name:"newCounter",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"information",outputs:[{internalType:"string",name:"version",type:"string"},{internalType:"bytes32",name:"domainSeparator",type:"bytes32"},{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchAdvancedOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"contractName",type:"string"}],stateMutability:"pure",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"}],name:"validate",outputs:[{internalType:"bool",name:"validated",type:"bool"}],stateMutability:"nonpayable",type:"function"}],Z=function(e){function t(t){return e.call(this,exports.Market.Seaport,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,i=c(this.orders);!(a=i()).done;){for(var r,p=a.value,s=[],y=p.items.map((function(e,t){return[{orderIndex:t,itemIndex:0}]})),u=this.getConsiderationFulfillments(p.items),o=c(p.items);!(r=o()).done;){var d=this.getAdvancedOrderParams(r.value);s.push(d.advancedOrder)}var l;if(l=1==s.length?t.INTERFACE.encodeFunctionData("fulfillAdvancedOrder",[s[0],[],t.OPENSEA_CONDUIT_KEY,p.recipient]):t.INTERFACE.encodeFunctionData("fulfillAvailableAdvancedOrders",[s,[],y,u,t.OPENSEA_CONDUIT_KEY,p.recipient,100]),p.inputTokenProcessing)for(var m,T=c(p.inputTokenProcessing);!(m=T()).done;){var f=m.value;L(e,{approval:f.protocolApproval?{token:f.token,protocol:p.protocolAddress}:void 0,permit2Permit:f.permit2Permit,permit2TransferFrom:f.permit2TransferFrom?{token:f.token,amount:this.getTotalOrderPrice(p,f.token).toString()}:void 0})}e.addCommand(this.commandMap(p.protocolAddress),[this.getTotalOrderPrice(p,E).toString(),l],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,i=c(e.value.items);!(a=i()).done;)for(var r,p=c(a.value.parameters.offer);!(r=p()).done;){var s=r.value;t.push({tokenAddress:s.token,tokenId:s.identifierOrCriteria,tokenType:exports.TokenType.ERC721})}return t},n.getInputTokens=function(){for(var e,t=new Set,n=c(this.orders);!(e=n()).done;)for(var a,i=c(e.value.items);!(a=i()).done;)for(var r,p=c(a.value.parameters.consideration);!(r=p()).done;){var s=r.value.token.toLowerCase();t.add(s)}return t},n.getTotalOrderPrice=function(e,t){void 0===t&&(t=E);for(var n,a=r.BigNumber.from(0),i=c(e.items);!(n=i()).done;)a=a.add(this.calculateValue(n.value.parameters.consideration,t));return a},n.getTotalPrice=function(e){void 0===e&&(e=E);for(var t,n=r.BigNumber.from(0),a=c(this.orders);!(t=a()).done;)for(var i,p=c(t.value.items);!(i=p()).done;)n=n.add(this.calculateValue(i.value.parameters.consideration,e));return n},n.commandMap=function(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":return A.SEAPORT_V1_5;case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return A.SEAPORT_V1_4;default:throw new Error("unsupported Seaport address")}},n.getConsiderationFulfillments=function(e){var t=[],n=[];for(var a in e){var i=e[a],r=function(e){var r=i.parameters.consideration[e];-1===n.findIndex((function(e){return e===r.recipient}))&&n.push(r.recipient);var p=n.findIndex((function(e){return e===r.recipient}));t[p]?t[p].push({orderIndex:a,itemIndex:e}):t.push([{orderIndex:a,itemIndex:e}])};for(var p in i.parameters.consideration)r(p)}return t},n.getAdvancedOrderParams=function(e){return{advancedOrder:{parameters:e.parameters,numerator:r.BigNumber.from("1"),denominator:r.BigNumber.from("1"),signature:e.signature,extraData:"0x00"}}},n.calculateValue=function(e,t){return e.reduce((function(e,n){return n.token.toLowerCase()==t.toLowerCase()?e.add(n.startAmount):e}),r.BigNumber.from(0))},t}(C);Z.INTERFACE=new i.Interface(Q),Z.OPENSEA_CONDUIT_KEY="0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000";var $=[{inputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"_factory",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"factory",outputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract ERC20",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferERC20From",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IERC721",name:"nft",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"id",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferNFTFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapERC20ForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapETHForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],J=function(e){function t(t){return e.call(this,exports.Market.Sudoswap,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,i=c(this.orders);!(a=i()).done;){var p=a.value,s=t.INTERFACE.encodeFunctionData("robustSwapETHForSpecificNFTs",[p.swaps.map((function(e){return{swapInfo:e.swapInfo,maxCost:e.maxCost}})),p.ethRecipient,p.nftRecipient,p.deadline]),y=p.swaps.reduce((function(e,t){return e.add(t.maxCost)}),r.BigNumber.from(0));e.addCommand(A.SUDOSWAP,[y,s],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;)for(var a,i=c(e.value.swaps);!(a=i()).done;)for(var r,p=a.value,s=c(p.swapInfo.nftIds);!(r=s()).done;)t.push({tokenAddress:p.tokenAddress,tokenId:r.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)for(var a,i=c(e.value.swaps);!(a=i()).done;)t=t.add(a.value.maxCost);return t},t}(C);J.INTERFACE=new i.Interface($);var ee=[{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"incentive",type:"uint256"}],name:"EvAuctionRefund",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"}],name:"EvCancel",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"delegate",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvDelegate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"index",type:"uint256"},{indexed:!1,internalType:"bytes",name:"error",type:"bytes"}],name:"EvFailure",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"EvFeeCapUpdate",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"maker",type:"address"},{indexed:!1,internalType:"address",name:"taker",type:"address"},{indexed:!1,internalType:"uint256",name:"orderSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"settleSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"intent",type:"uint256"},{indexed:!1,internalType:"uint256",name:"delegateType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"},{indexed:!1,internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{indexed:!1,internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],indexed:!1,internalType:"struct Market.OrderItem",name:"item",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],indexed:!1,internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"EvInventory",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EvProfit",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"signer",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvSigner",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"RATE_BASE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32[]",name:"itemHashes",type:"bytes32[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"cancel",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"delegates",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeCapPct",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"feeCapPct_",type:"uint256"},{internalType:"address",name:"weth_",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"inventoryStatus",outputs:[{internalType:"enum Market.InvStatus",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"ongoingAuctions",outputs:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256",name:"netPrice",type:"uint256"},{internalType:"uint256",name:"endAt",type:"uint256"},{internalType:"address",name:"bidder",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail[]",name:"details",type:"tuple[]"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"}],internalType:"struct Market.RunInput",name:"input",type:"tuple"}],name:"run",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order",name:"order",type:"tuple"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"run1",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"signers",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateDelegates",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"val",type:"uint256"}],name:"updateFeeCap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateSigners",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"weth",outputs:[{internalType:"contract IWETHUpgradable",name:"",type:"address"}],stateMutability:"view",type:"function"},{stateMutability:"payable",type:"receive"}],te=function(e){function t(t){return e.call(this,exports.Market.X2Y2,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,i=c(this.orders);!(a=i()).done;){var r=a.value,p=t.INTERFACE.getSighash(t.INTERFACE.getFunction("run"))+r.signedInput.slice(2);r.tokenType==exports.TokenType.ERC721?e.addCommand(A.X2Y2_721,[r.price,p,r.recipient,r.tokenAddress,r.tokenId],n.allowRevert):r.tokenType==exports.TokenType.ERC1155&&e.addCommand(A.X2Y2_1155,[r.price,p,r.recipient,r.tokenAddress,r.tokenId,r.tokenAmount],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=c(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:a.tokenType})}return t},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=c(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(C);te.INTERFACE=new i.Interface(ee);var ne=function(){function e(e,t,a){this.tradeType=exports.RouterTradeType.UnwrapWETH,this.wethAddress=x(t),this.amount=e,a&&(a.details.token.toLowerCase()!==this.wethAddress.toLowerCase()&&n(!1),a.details.amount>=e||n(!1),this.permit2Data=a)}return e.prototype.encode=function(e,t){L(e,{permit2Permit:this.permit2Data,permit2TransferFrom:{token:this.wethAddress,amount:this.amount.toString()}}),e.addCommand(A.UNWRAP_WETH,[w,this.amount])},e}();exports.CryptopunkTrade=H,exports.FoundationTrade=X,exports.LooksRareV2Trade=q,exports.NFT20Trade=Y,exports.NFTTrade=C,exports.NFTXTrade=G,exports.PERMIT2_ADDRESS="0x000000000022D473030F116dDEE9F6B43aC78BA3",exports.ROUTER_AS_RECIPIENT=w,exports.SeaportTrade=Z,exports.SudoswapTrade=J,exports.SwapRouter=U,exports.UNIVERSAL_ROUTER_ADDRESS=function(e){if(!(e in _))throw new Error("Universal Router not deployed on chain "+e);return _[e].router},exports.UNIVERSAL_ROUTER_CREATION_BLOCK=function(e){if(!(e in _))throw new Error("Universal Router not deployed on chain "+e);return _[e].creationBlock},exports.UniswapTrade=h,exports.UnwrapWETH=ne,exports.WETH_ADDRESS=x,exports.X2Y2Trade=te;
+"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t,n=(e=require("tiny-invariant"))&&"object"==typeof e&&"default"in e?e.default:e,a=require("@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json"),i=require("@ethersproject/abi"),r=require("ethers"),p=require("ethers/lib/utils"),s=require("@uniswap/v2-sdk"),y=require("@uniswap/v3-sdk"),u=require("@uniswap/router-sdk"),o=require("@uniswap/sdk-core");function d(){return(d=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function m(e,t){var n,a;e.prototype=Object.create(t.prototype),e.prototype.constructor=e,n=e,a=t,(Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(n,a)}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function T(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return l(e,void 0);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(e,void 0):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0;return function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}require("jsbi"),require("bignumber.js"),(t=exports.RouterTradeType||(exports.RouterTradeType={})).UniswapTrade="UniswapTrade",t.NFTTrade="NFTTrade",t.UnwrapWETH="UnwrapWETH",t.WrapSTETH="WrapSTETH",t.UnwrapSTETH="UnwrapSTETH";var c,f,b,C,v=function(e,t){this.tradeType=exports.RouterTradeType.NFTTrade,t.length>0||n(!1),this.market=e,this.orders=t};(c=exports.Market||(exports.Market={})).Foundation="foundation",c.LooksRareV2="looksrareV2",c.NFT20="nft20",c.NFTX="nftx",c.Seaport="seaport",c.Sudoswap="Sudoswap",c.Cryptopunks="cryptopunks",c.X2Y2="x2y2",c.Element="element",(f=exports.TokenType||(exports.TokenType={})).ERC721="ERC721",f.ERC1155="ERC1155",f.Cryptopunk="Cryptopunk",(C=exports.CommandType||(exports.CommandType={}))[C.V3_SWAP_EXACT_IN=0]="V3_SWAP_EXACT_IN",C[C.V3_SWAP_EXACT_OUT=1]="V3_SWAP_EXACT_OUT",C[C.PERMIT2_TRANSFER_FROM=2]="PERMIT2_TRANSFER_FROM",C[C.PERMIT2_PERMIT_BATCH=3]="PERMIT2_PERMIT_BATCH",C[C.SWEEP=4]="SWEEP",C[C.TRANSFER=5]="TRANSFER",C[C.PAY_PORTION=6]="PAY_PORTION",C[C.V2_SWAP_EXACT_IN=8]="V2_SWAP_EXACT_IN",C[C.V2_SWAP_EXACT_OUT=9]="V2_SWAP_EXACT_OUT",C[C.PERMIT2_PERMIT=10]="PERMIT2_PERMIT",C[C.WRAP_ETH=11]="WRAP_ETH",C[C.UNWRAP_WETH=12]="UNWRAP_WETH",C[C.PERMIT2_TRANSFER_FROM_BATCH=13]="PERMIT2_TRANSFER_FROM_BATCH",C[C.BALANCE_CHECK_ERC20=14]="BALANCE_CHECK_ERC20",C[C.SEAPORT_V1_5=16]="SEAPORT_V1_5",C[C.LOOKS_RARE_V2=17]="LOOKS_RARE_V2",C[C.NFTX=18]="NFTX",C[C.CRYPTOPUNKS=19]="CRYPTOPUNKS",C[C.OWNER_CHECK_721=21]="OWNER_CHECK_721",C[C.OWNER_CHECK_1155=22]="OWNER_CHECK_1155",C[C.SWEEP_ERC721=23]="SWEEP_ERC721",C[C.X2Y2_721=24]="X2Y2_721",C[C.SUDOSWAP=25]="SUDOSWAP",C[C.NFT20=26]="NFT20",C[C.X2Y2_1155=27]="X2Y2_1155",C[C.FOUNDATION=28]="FOUNDATION",C[C.SWEEP_ERC1155=29]="SWEEP_ERC1155",C[C.ELEMENT_MARKET=30]="ELEMENT_MARKET",C[C.SEAPORT_V1_4=32]="SEAPORT_V1_4",C[C.EXECUTE_SUB_PLAN=33]="EXECUTE_SUB_PLAN",C[C.APPROVE_ERC20=34]="APPROVE_ERC20",C[C.WRAP_STETH=35]="WRAP_STETH",C[C.UNWRAP_STETH=36]="UNWRAP_STETH";var A,x=new Set([exports.CommandType.SEAPORT_V1_5,exports.CommandType.SEAPORT_V1_4,exports.CommandType.NFTX,exports.CommandType.LOOKS_RARE_V2,exports.CommandType.X2Y2_721,exports.CommandType.X2Y2_1155,exports.CommandType.FOUNDATION,exports.CommandType.SUDOSWAP,exports.CommandType.NFT20,exports.CommandType.EXECUTE_SUB_PLAN,exports.CommandType.CRYPTOPUNKS,exports.CommandType.ELEMENT_MARKET]),S=((b={})[exports.CommandType.EXECUTE_SUB_PLAN]=["bytes","bytes[]"],b[exports.CommandType.PERMIT2_PERMIT]=["((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)","bytes"],b[exports.CommandType.PERMIT2_PERMIT_BATCH]=["((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)","bytes"],b[exports.CommandType.PERMIT2_TRANSFER_FROM]=["address","address","uint160"],b[exports.CommandType.PERMIT2_TRANSFER_FROM_BATCH]=["(address from,address to,uint160 amount,address token)[]"],b[exports.CommandType.V3_SWAP_EXACT_IN]=["address","uint256","uint256","bytes","bool"],b[exports.CommandType.V3_SWAP_EXACT_OUT]=["address","uint256","uint256","bytes","bool"],b[exports.CommandType.V2_SWAP_EXACT_IN]=["address","uint256","uint256","address[]","bool"],b[exports.CommandType.V2_SWAP_EXACT_OUT]=["address","uint256","uint256","address[]","bool"],b[exports.CommandType.WRAP_ETH]=["address","uint256"],b[exports.CommandType.UNWRAP_WETH]=["address","uint256"],b[exports.CommandType.SWEEP]=["address","address","uint256"],b[exports.CommandType.SWEEP_ERC721]=["address","address","uint256"],b[exports.CommandType.SWEEP_ERC1155]=["address","address","uint256","uint256"],b[exports.CommandType.TRANSFER]=["address","address","uint256"],b[exports.CommandType.PAY_PORTION]=["address","address","uint256"],b[exports.CommandType.BALANCE_CHECK_ERC20]=["address","address","uint256"],b[exports.CommandType.OWNER_CHECK_721]=["address","address","uint256"],b[exports.CommandType.OWNER_CHECK_1155]=["address","address","uint256","uint256"],b[exports.CommandType.APPROVE_ERC20]=["address","uint256"],b[exports.CommandType.WRAP_STETH]=["address","uint256"],b[exports.CommandType.UNWRAP_STETH]=["address","uint256"],b[exports.CommandType.SEAPORT_V1_5]=["uint256","bytes"],b[exports.CommandType.SEAPORT_V1_4]=["uint256","bytes"],b[exports.CommandType.NFTX]=["uint256","bytes"],b[exports.CommandType.LOOKS_RARE_V2]=["uint256","bytes"],b[exports.CommandType.X2Y2_721]=["uint256","bytes","address","address","uint256"],b[exports.CommandType.X2Y2_1155]=["uint256","bytes","address","address","uint256","uint256"],b[exports.CommandType.FOUNDATION]=["uint256","bytes","address","address","uint256"],b[exports.CommandType.SUDOSWAP]=["uint256","bytes"],b[exports.CommandType.NFT20]=["uint256","bytes"],b[exports.CommandType.CRYPTOPUNKS]=["uint256","address","uint256"],b[exports.CommandType.ELEMENT_MARKET]=["uint256","bytes"],b),R=function(){function e(){this.commands="0x",this.inputs=[]}var t=e.prototype;return t.addSubPlan=function(e){this.addCommand(exports.CommandType.EXECUTE_SUB_PLAN,[e.commands,e.inputs],!0)},t.addCommand=function(e,t,n){void 0===n&&(n=!1);var a=function(e,t){return{type:e,encodedInput:p.defaultAbiCoder.encode(S[e],t)}}(e,t);if(this.inputs.push(a.encodedInput),n){if(!x.has(a.type))throw new Error("command type: "+a.type+" cannot be allowed to revert");a.type=128|a.type}this.commands=this.commands.concat(a.type.toString(16).padStart(2,"0"))},e}(),I="0x0000000000000000000000000000000000000000",_=((A={})[1]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",steth:"0xae7ab96520de3a18e5e111b5eaab095312d7fe84",wsteth:"0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0",creationBlock:17143817},A[5]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6",steth:"0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F",wsteth:"0x6320cD32aA674d2898A68ec82e869385Fc5f7E2f",creationBlock:8940568},A[11155111]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14",steth:I,wsteth:I,creationBlock:3543575},A[137]={router:"0x643770E279d5D0733F21d6DC03A8efbABf3255B4",weth:"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",steth:I,wsteth:I,creationBlock:46866777},A[80001]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889",steth:I,wsteth:I,creationBlock:35176052},A[10]={router:"0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4",weth:"0x4200000000000000000000000000000000000006",steth:I,wsteth:I,creationBlock:108825869},A[420]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0x4200000000000000000000000000000000000006",steth:I,wsteth:I,creationBlock:8887728},A[42161]={router:"0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4",weth:"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",steth:I,wsteth:I,creationBlock:125861718},A[421613]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:"0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3",steth:I,wsteth:I,creationBlock:18815277},A[42220]={router:"0x88a3ED7F21A3fCF6adb86b6F878C5B7a02D20e9b",weth:I,steth:I,wsteth:I,creationBlock:21116361},A[44787]={router:"0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD",weth:I,steth:I,wsteth:I,creationBlock:17566658},A[56]={router:"0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4",weth:"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",steth:I,wsteth:I,creationBlock:31254967},A[43114]={router:"0x82635AF6146972cD6601161c4472ffe97237D292",weth:"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",steth:I,wsteth:I,creationBlock:34491144},A[84531]={router:"0xd0872d928672ae2ff74bdb2f5130ac12229cafaf",weth:"0x4200000000000000000000000000000000000006",steth:I,wsteth:I,creationBlock:6915289},A[8453]={router:"0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4",weth:"0x4200000000000000000000000000000000000006",steth:I,wsteth:I,creationBlock:3229053},A[167007]={router:"0x38D80da17dC0c72fD8acc276fc917B69899415f4",weth:"0x7be7937A395FD3B527F428124f6a33E10D1C0638",steth:I,wsteth:I,creationBlock:173491},A[167008]={router:"0xD2C3cbB943FEd0Cfc8389b14a3f6df518fD46346",weth:"0x0011E559da84dde3f841e22dc33F3adbF184D84A",steth:I,wsteth:I,creationBlock:774},A[167009]={router:"0x380A5Ba81efe70fE98AB56613eBF9244a2f3D4c9",weth:"0xae2C46ddb314B9Ba743C6dEE4878F151881333D9",steth:I,wsteth:I,creationBlock:14556},A),M=function(e){if(!(e in _))throw new Error("Universal Router not deployed on chain "+e);if(_[e].weth==I)throw new Error("Chain "+e+" does not have WETH");return _[e].weth},h=function(e){if(!(e in _))throw new Error("Universal Router not deployed on chain "+e);if(_[e].steth==I)throw new Error("Chain "+e+" does not have STETH support");return _[e].steth},E=r.BigNumber.from(2).pow(255),w="0x0000000000000000000000000000000000000000",k="0x0000000000000000000000000000000000000000",P="0x0000000000000000000000000000000000000001",F="0x0000000000000000000000000000000000000002",O=new o.Percent(50,100),N=function(){function e(e,t){if(this.trade=e,this.options=t,this.tradeType=exports.RouterTradeType.UniswapTrade,t.fee&&t.flatFee)throw new Error("Only one fee option permitted")}return e.prototype.encode=function(e,t){var n,a=!this.options.payerIsRouter;this.trade.inputAmount.currency.isNative&&(e.addCommand(exports.CommandType.WRAP_ETH,[F,this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]),a=!1),this.options.recipient=null!=(n=this.options.recipient)?n:P;for(var i,p,s=this.trade.outputAmount.currency.isNative,d=this.trade.inputAmount.currency.isNative,m=this.trade.tradeType===o.TradeType.EXACT_INPUT&&this.trade.routes.length>2||s||!!(i=this.options).fee||!!i.flatFee,l=T(this.trade.swaps);!(p=l()).done;){var c=p.value;switch(c.route.protocol){case u.Protocol.V2:g(e,c,this.trade.tradeType,this.options,a,m);break;case u.Protocol.V3:B(e,c,this.trade.tradeType,this.options,a,m);break;case u.Protocol.MIXED:V(e,c,this.trade.tradeType,this.options,a,m);break;default:throw new Error("UNSUPPORTED_TRADE_PROTOCOL")}}var f=r.BigNumber.from(this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString());if(m){if(this.options.fee){var b=y.toHex(this.options.fee.fee.multiply(1e4).quotient);e.addCommand(exports.CommandType.PAY_PORTION,[this.trade.outputAmount.currency.wrapped.address,this.options.fee.recipient,b]),this.trade.tradeType===o.TradeType.EXACT_OUTPUT&&(f=f.sub(f.mul(b).div(1e4)))}if(this.options.flatFee){var C=this.options.flatFee.amount;if(f.lt(C))throw new Error("Flat fee amount greater than minimumAmountOut");e.addCommand(exports.CommandType.TRANSFER,[this.trade.outputAmount.currency.wrapped.address,this.options.flatFee.recipient,C]),this.trade.tradeType===o.TradeType.EXACT_OUTPUT&&(f=f.sub(C))}s?e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,f]):e.addCommand(exports.CommandType.SWEEP,[this.trade.outputAmount.currency.wrapped.address,this.options.recipient,f])}d&&(this.trade.tradeType===o.TradeType.EXACT_OUTPUT||this.trade.priceImpact.greaterThan(O))&&e.addCommand(exports.CommandType.UNWRAP_WETH,[this.options.recipient,0])},e}();function g(e,t,n,a,i,r){var p=t.route,y=new s.Trade(p,n==o.TradeType.EXACT_INPUT?t.inputAmount:t.outputAmount,n);n==o.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[r?F:a.recipient,y.maximumAmountIn(a.slippageTolerance).quotient.toString(),y.minimumAmountOut(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.address})),i]):n==o.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V2_SWAP_EXACT_OUT,[r?F:a.recipient,y.minimumAmountOut(a.slippageTolerance).quotient.toString(),y.maximumAmountIn(a.slippageTolerance).quotient.toString(),p.path.map((function(e){return e.address})),i])}function B(e,t,n,a,i,r){var p=t.route,s=y.Trade.createUncheckedTrade({route:p,inputAmount:t.inputAmount,outputAmount:t.outputAmount,tradeType:n}),u=y.encodeRouteToPath(p,s.tradeType===o.TradeType.EXACT_OUTPUT);n==o.TradeType.EXACT_INPUT?e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[r?F:a.recipient,s.maximumAmountIn(a.slippageTolerance).quotient.toString(),s.minimumAmountOut(a.slippageTolerance).quotient.toString(),u,i]):n==o.TradeType.EXACT_OUTPUT&&e.addCommand(exports.CommandType.V3_SWAP_EXACT_OUT,[r?F:a.recipient,s.minimumAmountOut(a.slippageTolerance).quotient.toString(),s.maximumAmountIn(a.slippageTolerance).quotient.toString(),u,i])}function V(e,t,n,a,i,r){var p=t.route,o=t.inputAmount,d=t.outputAmount,m=r?F:a.recipient;if(1===p.pools.length){if(p.pools[0]instanceof y.Pool)return B(e,t,n,a,i,r);if(p.pools[0]instanceof s.Pair)return g(e,t,n,a,i,r);throw new Error("Invalid route type")}for(var l,T=u.MixedRouteTrade.createUncheckedTrade({route:p,inputAmount:o,outputAmount:d,tradeType:n}),c=T.maximumAmountIn(a.slippageTolerance,o).quotient.toString(),f=T.minimumAmountOut(a.slippageTolerance,d).quotient.toString(),b=u.partitionMixedRouteByProtocol(p),C=function(e){return e===b.length-1},v=p.input.wrapped,A=0;A<b.length;A++){var x=b[A];l=u.getOutputOfPools(x,v);var S=new u.MixedRouteSDK([].concat(x),x[0].token0.equals(v)?x[0].token0:x[0].token1,l),R=new u.MixedRoute(S);if(v=l,function(e){return e.pools.every((function(e){return e instanceof y.Pool}))}(R)){var I=u.encodeMixedRouteToPath(R);e.addCommand(exports.CommandType.V3_SWAP_EXACT_IN,[C(A)?m:b[A+1][0].liquidityToken.address,0==A?c:E,C(A)?f:0,I,i&&0===A])}else e.addCommand(exports.CommandType.V2_SWAP_EXACT_IN,[C(A)?m:F,0===A?c:E,C(A)?f:0,R.path.map((function(e){return e.address})),i&&0===A])}}function D(e,t){var n=t.signature,a=r.ethers.utils.arrayify(t.signature).length;65!==a&&64!==a||(n=r.ethers.utils.joinSignature(r.ethers.utils.splitSignature(t.signature))),e.addCommand(exports.CommandType.PERMIT2_PERMIT,[t,n])}function L(e,t){t.approval&&t.permit2Permit&&t.approval.token!==t.permit2Permit.details.token&&n(!1),t.approval&&t.permit2TransferFrom&&t.approval.token!==t.permit2TransferFrom.token&&n(!1),t.permit2TransferFrom&&t.permit2Permit&&t.permit2TransferFrom.token!==t.permit2Permit.details.token&&n(!1),t.approval&&e.addCommand(exports.CommandType.APPROVE_ERC20,[t.approval.token,U(t.approval.protocol)]),t.permit2Permit&&D(e,t.permit2Permit),t.permit2TransferFrom&&e.addCommand(exports.CommandType.PERMIT2_TRANSFER_FROM,[t.permit2TransferFrom.token,t.permit2TransferFrom.recipient?t.permit2TransferFrom.recipient:F,t.permit2TransferFrom.amount])}function U(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return 0;case"0x2b2e8cda09bba9660dca5cb6233787738ad68329":return 1;default:throw new Error("unsupported protocol address")}}var H=function(){function e(){}return e.swapCallParameters=function(t,a){void 0===a&&(a={}),Array.isArray(t)||(t=[t]);for(var i,p=t.filter((function(e,t,n){return e.hasOwnProperty("market")})),s=1!=p.length||1!=p[0].orders.length,y=new R,u=r.BigNumber.from(0),o=r.BigNumber.from(0),d=new Set,m=T(t);!(i=m()).done;){var l=i.value;if(l.tradeType==exports.RouterTradeType.NFTTrade){var c=l;c.encode(y,{allowRevert:s});var f=c.getTotalPrice();c.market==exports.Market.Seaport?c.getInputTokens().forEach((function(e){d.add(e)})):d.add(w),u.lt(f)?(o=o.add(f.sub(u)),u=r.BigNumber.from(0)):u=u.sub(f)}else if(l.tradeType==exports.RouterTradeType.UniswapTrade){var b=l,C=b.trade.inputAmount.currency.isNative,v=b.trade.outputAmount.currency.isNative,A=b.options;C&&A.inputTokenPermit&&n(!1),A.inputTokenPermit&&D(y,A.inputTokenPermit),C&&(o=o.add(r.BigNumber.from(b.trade.maximumAmountIn(A.slippageTolerance).quotient.toString()))),v&&A.recipient==F&&(u=u.add(r.BigNumber.from(b.trade.minimumAmountOut(A.slippageTolerance).quotient.toString()))),b.encode(y,{allowRevert:!1})}else if(l.tradeType==exports.RouterTradeType.UnwrapWETH){var x=l;l.encode(y,{allowRevert:!1}),u=u.add(x.amount)}else{if(l.tradeType!=exports.RouterTradeType.WrapSTETH&&l.tradeType!=exports.RouterTradeType.UnwrapSTETH)throw"trade must be of instance: UniswapTrade, NFTTrade, UnwrapWETH, WrapSTETH";l.encode(y,{allowRevert:!1})}}return d.forEach((function(e){y.addCommand(exports.CommandType.SWEEP,[e,P,0])})),e.encodePlan(y,o,a)},e.swapNFTCallParameters=function(t,n){void 0===n&&(n={});for(var a,i=new R,p=r.BigNumber.from(0),s=1!=t.length||1!=t[0].orders.length,y=T(t);!(a=y()).done;){var u=a.value;u.encode(i,{allowRevert:s}),p=p.add(u.getTotalPrice())}return i.addCommand(exports.CommandType.SWEEP,[w,P,0]),e.encodePlan(i,p,n)},e.swapERC20CallParameters=function(t,a){var i=new R,p=new N(t,a),s=p.trade.inputAmount.currency;s.isNative&&a.inputTokenPermit&&n(!1),a.inputTokenPermit&&D(i,a.inputTokenPermit);var y=r.BigNumber.from(s.isNative?p.trade.maximumAmountIn(a.slippageTolerance).quotient.toString():0);return p.encode(i,{allowRevert:!1}),e.encodePlan(i,y,{deadline:a.deadlineOrPreviousBlockhash?r.BigNumber.from(a.deadlineOrPreviousBlockhash):void 0})},e.encodePlan=function(t,n,a){void 0===a&&(a={});var i=t.commands,r=t.inputs;return{calldata:e.INTERFACE.encodeFunctionData(a.deadline?"execute(bytes,bytes[],uint256)":"execute(bytes,bytes[])",a.deadline?[i,r,a.deadline]:[i,r]),value:n.toHexString()}},e}();H.INTERFACE=new i.Interface(a.abi);var W=function(e){function t(t){return e.call(this,exports.Market.Cryptopunks,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,t){for(var n,a=T(this.orders);!(n=a()).done;){var i=n.value;e.addCommand(exports.CommandType.CRYPTOPUNKS,[i.tokenId,i.recipient,i.value],t.allowRevert)}},n.getBuyItems=function(){for(var e,n=[],a=T(this.orders);!(e=a()).done;)n.push({tokenAddress:t.CRYPTOPUNK_ADDRESS,tokenId:e.value.tokenId,tokenType:exports.TokenType.Cryptopunk});return n},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(v);W.CRYPTOPUNK_ADDRESS="0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb";var X=[{inputs:[{internalType:"address payable",name:"treasury",type:"address"},{internalType:"address",name:"feth",type:"address"},{internalType:"address",name:"royaltyRegistry",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"FoundationTreasuryNode_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"FoundationTreasuryNode_Caller_Not_Admin",type:"error"},{inputs:[{internalType:"uint256",name:"buyPrice",type:"uint256"}],name:"NFTMarketBuyPrice_Cannot_Buy_At_Lower_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Buy_Unset_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Cannot_Cancel_Unset_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Cancel_Price",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketBuyPrice_Only_Owner_Can_Set_Price",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketBuyPrice_Price_Too_High",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketBuyPrice_Seller_Mismatch",type:"error"},{inputs:[],name:"NFTMarketCore_FETH_Address_Is_Not_A_Contract",type:"error"},{inputs:[],name:"NFTMarketCore_Only_FETH_Can_Transfer_ETH",type:"error"},{inputs:[],name:"NFTMarketCore_Seller_Not_Found",type:"error"},{inputs:[],name:"NFTMarketFees_Address_Does_Not_Support_IRoyaltyRegistry",type:"error"},{inputs:[],name:"NFTMarketOffer_Cannot_Be_Made_While_In_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"currentOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Below_Min_Amount",type:"error"},{inputs:[{internalType:"uint256",name:"expiry",type:"uint256"}],name:"NFTMarketOffer_Offer_Expired",type:"error"},{inputs:[{internalType:"address",name:"currentOfferFrom",type:"address"}],name:"NFTMarketOffer_Offer_From_Does_Not_Match",type:"error"},{inputs:[{internalType:"uint256",name:"minOfferAmount",type:"uint256"}],name:"NFTMarketOffer_Offer_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketOffer_Provided_Contract_And_TokenId_Count_Must_Match",type:"error"},{inputs:[],name:"NFTMarketOffer_Reason_Required",type:"error"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"NFTMarketReserveAuction_Already_Listed",type:"error"},{inputs:[{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"NFTMarketReserveAuction_Bid_Must_Be_At_Least_Min_Amount",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Admin_Cancel_Without_Reason",type:"error"},{inputs:[{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_Lower_Than_Reserve_Price",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Bid_On_Ended_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Bid_On_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Cancel_Nonexistent_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Finalize_Already_Settled_Auction",type:"error"},{inputs:[{internalType:"uint256",name:"endTime",type:"uint256"}],name:"NFTMarketReserveAuction_Cannot_Finalize_Auction_In_Progress",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Rebid_Over_Outstanding_Bid",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Cannot_Update_Auction_In_Progress",type:"error"},{inputs:[{internalType:"uint256",name:"maxDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Exceeds_Max_Duration",type:"error"},{inputs:[{internalType:"uint256",name:"extensionDuration",type:"uint256"}],name:"NFTMarketReserveAuction_Less_Than_Extension_Duration",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Must_Set_Non_Zero_Reserve_Price",type:"error"},{inputs:[{internalType:"address",name:"seller",type:"address"}],name:"NFTMarketReserveAuction_Not_Matching_Seller",type:"error"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"NFTMarketReserveAuction_Only_Owner_Can_Update_Auction",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Price_Already_Set",type:"error"},{inputs:[],name:"NFTMarketReserveAuction_Too_Much_Value_Provided",type:"error"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"BuyPriceAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"BuyPriceInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"price",type:"uint256"}],name:"BuyPriceSet",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"address",name:"buyReferrer",type:"address"},{indexed:!1,internalType:"uint256",name:"buyReferrerProtocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"buyReferrerSellerFee",type:"uint256"}],name:"BuyReferralPaid",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"address",name:"seller",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"OfferAccepted",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"OfferCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"OfferInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!0,internalType:"address",name:"buyer",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"expiration",type:"uint256"}],name:"OfferMade",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"endTime",type:"uint256"}],name:"ReserveAuctionBidPlaced",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCanceled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"string",name:"reason",type:"string"}],name:"ReserveAuctionCanceledByAdmin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"nftContract",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"duration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"extensionDuration",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"},{indexed:!1,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionCreated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!0,internalType:"address",name:"seller",type:"address"},{indexed:!0,internalType:"address",name:"bidder",type:"address"},{indexed:!1,internalType:"uint256",name:"protocolFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"creatorFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"sellerRev",type:"uint256"}],name:"ReserveAuctionFinalized",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"}],name:"ReserveAuctionInvalidated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"auctionId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"ReserveAuctionUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"WithdrawalToFETH",type:"event"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address",name:"offerFrom",type:"address"},{internalType:"uint256",name:"minAmount",type:"uint256"}],name:"acceptOffer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"nftContracts",type:"address[]"},{internalType:"uint256[]",name:"tokenIds",type:"uint256[]"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelOffers",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"string",name:"reason",type:"string"}],name:"adminCancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"buy",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"buyV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"cancelBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"cancelReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"createReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"finalizeReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getBuyPrice",outputs:[{internalType:"address",name:"seller",type:"address"},{internalType:"uint256",name:"price",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"getFeesAndRecipients",outputs:[{internalType:"uint256",name:"protocolFee",type:"uint256"},{internalType:"uint256",name:"creatorRev",type:"uint256"},{internalType:"address payable[]",name:"creatorRecipients",type:"address[]"},{internalType:"uint256[]",name:"creatorShares",type:"uint256[]"},{internalType:"uint256",name:"sellerRev",type:"uint256"},{internalType:"address payable",name:"owner",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFethAddress",outputs:[{internalType:"address",name:"fethAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getFoundationTreasury",outputs:[{internalType:"address payable",name:"treasuryAddress",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getImmutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getMinBidAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getMinOfferAmount",outputs:[{internalType:"uint256",name:"minimum",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"creator",type:"address"}],name:"getMutableRoyalties",outputs:[{internalType:"address payable[]",name:"recipients",type:"address[]"},{internalType:"uint256[]",name:"splitPerRecipientInBasisPoints",type:"uint256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOffer",outputs:[{internalType:"address",name:"buyer",type:"address"},{internalType:"uint256",name:"expiration",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getOfferReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuction",outputs:[{components:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address payable",name:"seller",type:"address"},{internalType:"uint256",name:"duration",type:"uint256"},{internalType:"uint256",name:"extensionDuration",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"address payable",name:"bidder",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],internalType:"struct NFTMarketReserveAuction.ReserveAuction",name:"auction",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"getReserveAuctionBidReferrer",outputs:[{internalType:"address payable",name:"referrer",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getReserveAuctionIdFor",outputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getRoyaltyRegistry",outputs:[{internalType:"address",name:"registry",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getTokenCreator",outputs:[{internalType:"address payable",name:"creator",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"makeOffer",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"makeOfferV2",outputs:[{internalType:"uint256",name:"expiration",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"}],name:"placeBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"referrer",type:"address"}],name:"placeBidV2",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"nftContract",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"}],name:"setBuyPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"auctionId",type:"uint256"},{internalType:"uint256",name:"reservePrice",type:"uint256"}],name:"updateReserveAuction",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],K=function(e){function t(t){return e.call(this,exports.Market.Foundation,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,i=T(this.orders);!(a=i()).done;){var r=a.value,p=t.INTERFACE.encodeFunctionData("buyV2",[r.tokenAddress,r.tokenId,r.price,r.referrer]);e.addCommand(exports.CommandType.FOUNDATION,[r.price,p,r.recipient,r.tokenAddress,r.tokenId],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:exports.TokenType.ERC721})}return t},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(v);K.INTERFACE=new i.Interface(X);var q=[{inputs:[{internalType:"address",name:"_owner",type:"address"},{internalType:"address",name:"_protocolFeeRecipient",type:"address"},{internalType:"address",name:"_transferManager",type:"address"},{internalType:"address",name:"_weth",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"CallerInvalid",type:"error"},{inputs:[],name:"ChainIdInvalid",type:"error"},{inputs:[],name:"CreatorFeeBpTooHigh",type:"error"},{inputs:[],name:"CurrencyInvalid",type:"error"},{inputs:[],name:"ERC20TransferFromFail",type:"error"},{inputs:[],name:"LengthsInvalid",type:"error"},{inputs:[],name:"MerkleProofInvalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"MerkleProofTooLarge",type:"error"},{inputs:[],name:"NewGasLimitETHTransferTooLow",type:"error"},{inputs:[],name:"NewProtocolFeeRecipientCannotBeNullAddress",type:"error"},{inputs:[],name:"NoOngoingTransferInProgress",type:"error"},{inputs:[],name:"NoSelectorForStrategy",type:"error"},{inputs:[],name:"NoncesInvalid",type:"error"},{inputs:[],name:"NotAContract",type:"error"},{inputs:[],name:"NotAffiliateController",type:"error"},{inputs:[],name:"NotOwner",type:"error"},{inputs:[],name:"NotV2Strategy",type:"error"},{inputs:[],name:"NullSignerAddress",type:"error"},{inputs:[],name:"OutsideOfTimeRange",type:"error"},{inputs:[],name:"PercentageTooHigh",type:"error"},{inputs:[],name:"QuoteTypeInvalid",type:"error"},{inputs:[],name:"ReentrancyFail",type:"error"},{inputs:[],name:"RenouncementNotInProgress",type:"error"},{inputs:[],name:"SameDomainSeparator",type:"error"},{inputs:[],name:"SignatureEOAInvalid",type:"error"},{inputs:[],name:"SignatureERC1271Invalid",type:"error"},{inputs:[{internalType:"uint256",name:"length",type:"uint256"}],name:"SignatureLengthInvalid",type:"error"},{inputs:[],name:"SignatureParameterSInvalid",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"SignatureParameterVInvalid",type:"error"},{inputs:[],name:"StrategyHasNoSelector",type:"error"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"}],name:"StrategyNotAvailable",type:"error"},{inputs:[],name:"StrategyNotUsed",type:"error"},{inputs:[],name:"StrategyProtocolFeeTooHigh",type:"error"},{inputs:[],name:"TransferAlreadyInProgress",type:"error"},{inputs:[],name:"TransferNotInProgress",type:"error"},{inputs:[],name:"WrongPotentialOwner",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"uint256",name:"affiliateFee",type:"uint256"}],name:"AffiliatePayment",type:"event"},{anonymous:!1,inputs:[],name:"CancelOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"bool",name:"isAllowed",type:"bool"}],name:"CurrencyStatusUpdated",type:"event"},{anonymous:!1,inputs:[],name:"InitiateOwnershipRenouncement",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"previousOwner",type:"address"},{indexed:!1,internalType:"address",name:"potentialOwner",type:"address"}],name:"InitiateOwnershipTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliateController",type:"address"}],name:"NewAffiliateController",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bool",name:"isActive",type:"bool"}],name:"NewAffiliateProgramStatus",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"affiliate",type:"address"},{indexed:!1,internalType:"uint256",name:"rate",type:"uint256"}],name:"NewAffiliateRate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"bidNonce",type:"uint256"},{indexed:!1,internalType:"uint256",name:"askNonce",type:"uint256"}],name:"NewBidAskNonces",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"creatorFeeManager",type:"address"}],name:"NewCreatorFeeManager",type:"event"},{anonymous:!1,inputs:[],name:"NewDomainSeparator",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"gasLimitETHTransfer",type:"uint256"}],name:"NewGasLimitETHTransfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"maxCreatorFeeBp",type:"uint256"}],name:"NewMaxCreatorFeeBp",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"newOwner",type:"address"}],name:"NewOwner",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"protocolFeeRecipient",type:"address"}],name:"NewProtocolFeeRecipient",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"bytes4",name:"selector",type:"bytes4"},{indexed:!1,internalType:"bool",name:"isMakerBid",type:"bool"},{indexed:!1,internalType:"address",name:"implementation",type:"address"}],name:"NewStrategy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"OrderNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"bool",name:"isActive",type:"bool"},{indexed:!1,internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{indexed:!1,internalType:"uint16",name:"minTotalFeeBp",type:"uint16"}],name:"StrategyUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"SubsetNoncesCancelled",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"askUser",type:"address"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerAsk",type:"event"},{anonymous:!1,inputs:[{components:[{internalType:"bytes32",name:"orderHash",type:"bytes32"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"bool",name:"isNonceInvalidated",type:"bool"}],indexed:!1,internalType:"struct ILooksRareProtocol.NonceInvalidationParameters",name:"nonceInvalidationParameters",type:"tuple"},{indexed:!1,internalType:"address",name:"bidUser",type:"address"},{indexed:!1,internalType:"address",name:"bidRecipient",type:"address"},{indexed:!1,internalType:"uint256",name:"strategyId",type:"uint256"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"collection",type:"address"},{indexed:!1,internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{indexed:!1,internalType:"uint256[]",name:"amounts",type:"uint256[]"},{indexed:!1,internalType:"address[2]",name:"feeRecipients",type:"address[2]"},{indexed:!1,internalType:"uint256[3]",name:"feeAmounts",type:"uint256[3]"}],name:"TakerBid",type:"event"},{inputs:[],name:"MAGIC_VALUE_ORDER_NONCE_EXECUTED",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],name:"addStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"affiliateController",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"affiliateRates",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256[]",name:"orderNonces",type:"uint256[]"}],name:"cancelOrderNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"cancelOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256[]",name:"subsetNonces",type:"uint256[]"}],name:"cancelSubsetNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"chainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"confirmOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"confirmOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"creatorFeeManager",outputs:[{internalType:"contract ICreatorFeeManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"domainSeparator",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker[]",name:"takerBids",type:"tuple[]"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker[]",name:"makerAsks",type:"tuple[]"},{internalType:"bytes[]",name:"makerSignatures",type:"bytes[]"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree[]",name:"merkleTrees",type:"tuple[]"},{internalType:"address",name:"affiliate",type:"address"},{internalType:"bool",name:"isAtomic",type:"bool"}],name:"executeMultipleTakerBids",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerAsk",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerBid",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerAsk",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"bytes",name:"makerSignature",type:"bytes"},{components:[{internalType:"bytes32",name:"root",type:"bytes32"},{components:[{internalType:"bytes32",name:"value",type:"bytes32"},{internalType:"enum OrderStructs.MerkleTreeNodePosition",name:"position",type:"uint8"}],internalType:"struct OrderStructs.MerkleTreeNode[]",name:"proof",type:"tuple[]"}],internalType:"struct OrderStructs.MerkleTree",name:"merkleTree",type:"tuple"},{internalType:"address",name:"affiliate",type:"address"}],name:"executeTakerBid",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bytes32",name:"root",type:"bytes32"},{internalType:"uint256",name:"proofLength",type:"uint256"}],name:"hashBatchOrder",outputs:[{internalType:"bytes32",name:"batchOrderHash",type:"bytes32"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"bool",name:"bid",type:"bool"},{internalType:"bool",name:"ask",type:"bool"}],name:"incrementBidAskNonces",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"initiateOwnershipRenouncement",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newPotentialOwner",type:"address"}],name:"initiateOwnershipTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"isAffiliateProgramActive",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"isCurrencyAllowed",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"maxCreatorFeeBp",outputs:[{internalType:"uint16",name:"",type:"uint16"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"ownershipStatus",outputs:[{internalType:"enum IOwnableTwoSteps.Status",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[],name:"potentialOwner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"protocolFeeRecipient",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"recipient",type:"address"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Taker",name:"takerBid",type:"tuple"},{components:[{internalType:"enum QuoteType",name:"quoteType",type:"uint8"},{internalType:"uint256",name:"globalNonce",type:"uint256"},{internalType:"uint256",name:"subsetNonce",type:"uint256"},{internalType:"uint256",name:"orderNonce",type:"uint256"},{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"enum CollectionType",name:"collectionType",type:"uint8"},{internalType:"address",name:"collection",type:"address"},{internalType:"address",name:"currency",type:"address"},{internalType:"address",name:"signer",type:"address"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256[]",name:"itemIds",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"additionalParameters",type:"bytes"}],internalType:"struct OrderStructs.Maker",name:"makerAsk",type:"tuple"},{internalType:"address",name:"sender",type:"address"},{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"restrictedExecuteTakerBid",outputs:[{internalType:"uint256",name:"protocolFeeAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"strategyInfo",outputs:[{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"standardProtocolFeeBp",type:"uint16"},{internalType:"uint16",name:"minTotalFeeBp",type:"uint16"},{internalType:"uint16",name:"maxProtocolFeeBp",type:"uint16"},{internalType:"bytes4",name:"selector",type:"bytes4"},{internalType:"bool",name:"isMakerBid",type:"bool"},{internalType:"address",name:"implementation",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"transferManager",outputs:[{internalType:"contract TransferManager",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newAffiliateController",type:"address"}],name:"updateAffiliateController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bool",name:"isActive",type:"bool"}],name:"updateAffiliateProgramStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"affiliate",type:"address"},{internalType:"uint256",name:"bp",type:"uint256"}],name:"updateAffiliateRate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newCreatorFeeManager",type:"address"}],name:"updateCreatorFeeManager",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"currency",type:"address"},{internalType:"bool",name:"isAllowed",type:"bool"}],name:"updateCurrencyStatus",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"updateDomainSeparator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"newGasLimitETHTransfer",type:"uint256"}],name:"updateETHGasLimitForTransfer",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint16",name:"newMaxCreatorFeeBp",type:"uint16"}],name:"updateMaxCreatorFeeBp",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newProtocolFeeRecipient",type:"address"}],name:"updateProtocolFeeRecipient",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"strategyId",type:"uint256"},{internalType:"bool",name:"isActive",type:"bool"},{internalType:"uint16",name:"newStandardProtocolFee",type:"uint16"},{internalType:"uint16",name:"newMinTotalFee",type:"uint16"}],name:"updateStrategy",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"userBidAskNonces",outputs:[{internalType:"uint256",name:"bidNonce",type:"uint256"},{internalType:"uint256",name:"askNonce",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userOrderNonce",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"}],name:"userSubsetNonce",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}],z=function(e){function t(t){return e.call(this,exports.Market.LooksRareV2,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){var a,i=this.refactorAPIData(this.orders),r=i.takerBids,p=i.makerOrders,s=i.makerSignatures,y=i.totalValue,u=i.merkleTrees;a=1==this.orders.length?t.INTERFACE.encodeFunctionData("executeTakerBid",[r[0],p[0],s[0],u[0],k]):t.INTERFACE.encodeFunctionData("executeMultipleTakerBids",[r,p,s,u,k,!1]),e.addCommand(exports.CommandType.LOOKS_RARE_V2,[y,a],n.allowRevert)},n.getBuyItems=function(){for(var e,n=[],a=T(this.orders);!(e=a()).done;)for(var i,r=e.value,p=r.apiOrder.collection,s=r.apiOrder.collectionType==t.ERC721_ORDER?exports.TokenType.ERC721:exports.TokenType.ERC1155,y=T(r.apiOrder.itemIds);!(i=y()).done;)n.push({tokenAddress:p,tokenId:i.value,tokenType:s});return n},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.apiOrder.price);return t},n.refactorAPIData=function(e){var t=[],n=[],a=[],i=r.BigNumber.from(0),p=[];return e.forEach((function(e){var s,y;n.push(d({},e.apiOrder)),a.push(e.apiOrder.signature),t.push({recipient:e.taker,additionalParameters:"0x"}),i=i.add(r.BigNumber.from(e.apiOrder.price)),p.push({root:null!=(s=e.apiOrder.merkleRoot)?s:"0x0000000000000000000000000000000000000000000000000000000000000000",proof:null!=(y=e.apiOrder.merkleProof)?y:[]})})),{takerBids:t,makerOrders:n,makerSignatures:a,totalValue:i,merkleTrees:p}},t}(v);z.INTERFACE=new i.Interface(q),z.ERC721_ORDER=0;var Y=[{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{inputs:[],name:"ETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"NFT20",outputs:[{internalType:"contract INFT20Factory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV2",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"UNIV3",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_toIds",type:"uint256[]"},{internalType:"uint256[]",name:"_toAmounts",type:"uint256[]"},{internalType:"address",name:"_receipient",type:"address"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"ethForNft",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"_nft",type:"address"},{internalType:"uint256[]",name:"_ids",type:"uint256[]"},{internalType:"uint256[]",name:"_amounts",type:"uint256[]"},{internalType:"bool",name:"isErc721",type:"bool"},{internalType:"uint24",name:"_fee",type:"uint24"},{internalType:"bool",name:"isV3",type:"bool"}],name:"nftForEth",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"tokenAddress",type:"address"},{internalType:"uint256",name:"tokenAmount",type:"uint256"},{internalType:"address",name:"sendTo",type:"address"}],name:"recoverERC20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_registry",type:"address"}],name:"setNFT20",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"withdrawEth",outputs:[],stateMutability:"payable",type:"function"},{stateMutability:"payable",type:"receive"}],j=function(e){function t(t){return e.call(this,exports.Market.NFT20,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,i=T(this.orders);!(a=i()).done;){var r=a.value,p=t.INTERFACE.encodeFunctionData("ethForNft",[r.tokenAddress,r.tokenIds,r.tokenAmounts,r.recipient,r.fee,r.isV3]);e.addCommand(exports.CommandType.NFT20,[r.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;)for(var a,i=e.value,r=T(i.tokenIds);!(a=r()).done;)t.push({tokenAddress:i.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(v);j.INTERFACE=new i.Interface(Y);var G=[{inputs:[{internalType:"address",name:"_nftxFactory",type:"address"},{internalType:"address",name:"_WETH",type:"address"},{internalType:"address payable",name:"_swapTarget",type:"address"},{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Buy",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"ethAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vTokenAmount",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"DustReturned",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethReceived",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Sell",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"count",type:"uint256"},{indexed:!1,internalType:"uint256",name:"ethSpent",type:"uint256"},{indexed:!1,internalType:"address",name:"to",type:"address"}],name:"Swap",type:"event"},{inputs:[],name:"WETH",outputs:[{internalType:"contract IWETH",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndRedeem",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap1155",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"idsIn",type:"uint256[]"},{internalType:"uint256[]",name:"specificIds",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"buyAndSwap721",outputs:[],stateMutability:"payable",type:"function"},{inputs:[],name:"dustThreshold",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeDistributor",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell1155",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"vaultId",type:"uint256"},{internalType:"uint256[]",name:"ids",type:"uint256[]"},{internalType:"bytes",name:"swapCallData",type:"bytes"},{internalType:"address payable",name:"to",type:"address"}],name:"mintAndSell721",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"nftxFactory",outputs:[{internalType:"contract INFTXVaultFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"nftxVaultAddresses",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"uint256[]",name:"",type:"uint256[]"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155BatchReceived",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC1155Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"bytes",name:"",type:"bytes"}],name:"onERC721Received",outputs:[{internalType:"bytes4",name:"",type:"bytes4"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"_paused",type:"bool"}],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"token",type:"address"}],name:"rescue",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_dustThreshold",type:"uint256"}],name:"setDustThreshold",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],Q=function(e){function t(t){return e.call(this,exports.Market.NFTX,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,i=T(this.orders);!(a=i()).done;){var r=a.value,p=t.INTERFACE.encodeFunctionData("buyAndRedeem",[r.vaultId,r.tokenIds.length,r.tokenIds,r.swapCalldata,r.recipient]);e.addCommand(exports.CommandType.NFTX,[r.value,p],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;)for(var a,i=e.value,r=T(i.tokenIds);!(a=r()).done;)t.push({tokenAddress:i.tokenAddress,tokenId:a.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.value);return t},t}(v);Q.INTERFACE=new i.Interface(G);var Z=[{inputs:[{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"BadContractSignature",type:"error"},{inputs:[],name:"BadFraction",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"BadReturnValueFromERC20OnTransfer",type:"error"},{inputs:[{internalType:"uint8",name:"v",type:"uint8"}],name:"BadSignatureV",type:"error"},{inputs:[],name:"ConsiderationCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"considerationIndex",type:"uint256"},{internalType:"uint256",name:"shortfallAmount",type:"uint256"}],name:"ConsiderationNotMet",type:"error"},{inputs:[],name:"CriteriaNotEnabledForItem",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256[]",name:"identifiers",type:"uint256[]"},{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],name:"ERC1155BatchTransferGenericFailure",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"EtherTransferGenericFailure",type:"error"},{inputs:[],name:"InexactFraction",type:"error"},{inputs:[],name:"InsufficientEtherSupplied",type:"error"},{inputs:[],name:"Invalid1155BatchTransferEncoding",type:"error"},{inputs:[],name:"InvalidBasicOrderParameterEncoding",type:"error"},{inputs:[{internalType:"address",name:"conduit",type:"address"}],name:"InvalidCallToConduit",type:"error"},{inputs:[],name:"InvalidCanceller",type:"error"},{inputs:[{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"address",name:"conduit",type:"address"}],name:"InvalidConduit",type:"error"},{inputs:[],name:"InvalidERC721TransferAmount",type:"error"},{inputs:[],name:"InvalidFulfillmentComponentData",type:"error"},{inputs:[{internalType:"uint256",name:"value",type:"uint256"}],name:"InvalidMsgValue",type:"error"},{inputs:[],name:"InvalidNativeOfferItem",type:"error"},{inputs:[],name:"InvalidProof",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"InvalidRestrictedOrder",type:"error"},{inputs:[],name:"InvalidSignature",type:"error"},{inputs:[],name:"InvalidSigner",type:"error"},{inputs:[],name:"InvalidTime",type:"error"},{inputs:[],name:"MismatchedFulfillmentOfferAndConsiderationComponents",type:"error"},{inputs:[{internalType:"enum Side",name:"side",type:"uint8"}],name:"MissingFulfillmentComponentOnAggregation",type:"error"},{inputs:[],name:"MissingItemAmount",type:"error"},{inputs:[],name:"MissingOriginalConsiderationItems",type:"error"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"NoContract",type:"error"},{inputs:[],name:"NoReentrantCalls",type:"error"},{inputs:[],name:"NoSpecifiedOrdersAvailable",type:"error"},{inputs:[],name:"OfferAndConsiderationRequiredOnFulfillment",type:"error"},{inputs:[],name:"OfferCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderAlreadyFilled",type:"error"},{inputs:[],name:"OrderCriteriaResolverOutOfRange",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderIsCancelled",type:"error"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"OrderPartiallyFilled",type:"error"},{inputs:[],name:"PartialFillsNotEnabledForOrder",type:"error"},{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"TokenTransferGenericFailure",type:"error"},{inputs:[],name:"UnresolvedConsiderationCriteria",type:"error"},{inputs:[],name:"UnresolvedOfferCriteria",type:"error"},{inputs:[],name:"UnusedItemParameters",type:"error"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newCounter",type:"uint256"},{indexed:!0,internalType:"address",name:"offerer",type:"address"}],name:"CounterIncremented",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"},{indexed:!1,internalType:"address",name:"recipient",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"}],indexed:!1,internalType:"struct SpentItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],indexed:!1,internalType:"struct ReceivedItem[]",name:"consideration",type:"tuple[]"}],name:"OrderFulfilled",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"orderHash",type:"bytes32"},{indexed:!0,internalType:"address",name:"offerer",type:"address"},{indexed:!0,internalType:"address",name:"zone",type:"address"}],name:"OrderValidated",type:"event"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents[]",name:"orders",type:"tuple[]"}],name:"cancel",outputs:[{internalType:"bool",name:"cancelled",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder",name:"advancedOrder",type:"tuple"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"}],name:"fulfillAdvancedOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableAdvancedOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"offerFulfillments",type:"tuple[][]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[][]",name:"considerationFulfillments",type:"tuple[][]"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"maximumFulfilled",type:"uint256"}],name:"fulfillAvailableOrders",outputs:[{internalType:"bool[]",name:"availableOrders",type:"bool[]"},{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"considerationToken",type:"address"},{internalType:"uint256",name:"considerationIdentifier",type:"uint256"},{internalType:"uint256",name:"considerationAmount",type:"uint256"},{internalType:"address payable",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{internalType:"address",name:"offerToken",type:"address"},{internalType:"uint256",name:"offerIdentifier",type:"uint256"},{internalType:"uint256",name:"offerAmount",type:"uint256"},{internalType:"enum BasicOrderType",name:"basicOrderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"offererConduitKey",type:"bytes32"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalAdditionalRecipients",type:"uint256"},{components:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct AdditionalRecipient[]",name:"additionalRecipients",type:"tuple[]"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct BasicOrderParameters",name:"parameters",type:"tuple"}],name:"fulfillBasicOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order",name:"order",type:"tuple"},{internalType:"bytes32",name:"fulfillerConduitKey",type:"bytes32"}],name:"fulfillOrder",outputs:[{internalType:"bool",name:"fulfilled",type:"bool"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"address",name:"offerer",type:"address"}],name:"getCounter",outputs:[{internalType:"uint256",name:"counter",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"counter",type:"uint256"}],internalType:"struct OrderComponents",name:"order",type:"tuple"}],name:"getOrderHash",outputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"orderHash",type:"bytes32"}],name:"getOrderStatus",outputs:[{internalType:"bool",name:"isValidated",type:"bool"},{internalType:"bool",name:"isCancelled",type:"bool"},{internalType:"uint256",name:"totalFilled",type:"uint256"},{internalType:"uint256",name:"totalSize",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"incrementCounter",outputs:[{internalType:"uint256",name:"newCounter",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"information",outputs:[{internalType:"string",name:"version",type:"string"},{internalType:"bytes32",name:"domainSeparator",type:"bytes32"},{internalType:"address",name:"conduitController",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"uint120",name:"numerator",type:"uint120"},{internalType:"uint120",name:"denominator",type:"uint120"},{internalType:"bytes",name:"signature",type:"bytes"},{internalType:"bytes",name:"extraData",type:"bytes"}],internalType:"struct AdvancedOrder[]",name:"advancedOrders",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"enum Side",name:"side",type:"uint8"},{internalType:"uint256",name:"index",type:"uint256"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"bytes32[]",name:"criteriaProof",type:"bytes32[]"}],internalType:"struct CriteriaResolver[]",name:"criteriaResolvers",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchAdvancedOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"},{components:[{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"offerComponents",type:"tuple[]"},{components:[{internalType:"uint256",name:"orderIndex",type:"uint256"},{internalType:"uint256",name:"itemIndex",type:"uint256"}],internalType:"struct FulfillmentComponent[]",name:"considerationComponents",type:"tuple[]"}],internalType:"struct Fulfillment[]",name:"fulfillments",type:"tuple[]"}],name:"matchOrders",outputs:[{components:[{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifier",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ReceivedItem",name:"item",type:"tuple"},{internalType:"address",name:"offerer",type:"address"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"}],internalType:"struct Execution[]",name:"executions",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"contractName",type:"string"}],stateMutability:"pure",type:"function"},{inputs:[{components:[{components:[{internalType:"address",name:"offerer",type:"address"},{internalType:"address",name:"zone",type:"address"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"}],internalType:"struct OfferItem[]",name:"offer",type:"tuple[]"},{components:[{internalType:"enum ItemType",name:"itemType",type:"uint8"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"identifierOrCriteria",type:"uint256"},{internalType:"uint256",name:"startAmount",type:"uint256"},{internalType:"uint256",name:"endAmount",type:"uint256"},{internalType:"address payable",name:"recipient",type:"address"}],internalType:"struct ConsiderationItem[]",name:"consideration",type:"tuple[]"},{internalType:"enum OrderType",name:"orderType",type:"uint8"},{internalType:"uint256",name:"startTime",type:"uint256"},{internalType:"uint256",name:"endTime",type:"uint256"},{internalType:"bytes32",name:"zoneHash",type:"bytes32"},{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"bytes32",name:"conduitKey",type:"bytes32"},{internalType:"uint256",name:"totalOriginalConsiderationItems",type:"uint256"}],internalType:"struct OrderParameters",name:"parameters",type:"tuple"},{internalType:"bytes",name:"signature",type:"bytes"}],internalType:"struct Order[]",name:"orders",type:"tuple[]"}],name:"validate",outputs:[{internalType:"bool",name:"validated",type:"bool"}],stateMutability:"nonpayable",type:"function"}],$=function(e){function t(t){return e.call(this,exports.Market.Seaport,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,i=T(this.orders);!(a=i()).done;){for(var r,p=a.value,s=[],y=p.items.map((function(e,t){return[{orderIndex:t,itemIndex:0}]})),u=this.getConsiderationFulfillments(p.items),o=T(p.items);!(r=o()).done;){var d=this.getAdvancedOrderParams(r.value);s.push(d.advancedOrder)}var m;if(m=1==s.length?t.INTERFACE.encodeFunctionData("fulfillAdvancedOrder",[s[0],[],t.OPENSEA_CONDUIT_KEY,p.recipient]):t.INTERFACE.encodeFunctionData("fulfillAvailableAdvancedOrders",[s,[],y,u,t.OPENSEA_CONDUIT_KEY,p.recipient,100]),p.inputTokenProcessing)for(var l,c=T(p.inputTokenProcessing);!(l=c()).done;){var f=l.value;L(e,{approval:f.protocolApproval?{token:f.token,protocol:p.protocolAddress}:void 0,permit2Permit:f.permit2Permit,permit2TransferFrom:f.permit2TransferFrom?{token:f.token,amount:this.getTotalOrderPrice(p,f.token).toString()}:void 0})}e.addCommand(this.commandMap(p.protocolAddress),[this.getTotalOrderPrice(p,w).toString(),m],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;)for(var a,i=T(e.value.items);!(a=i()).done;)for(var r,p=T(a.value.parameters.offer);!(r=p()).done;){var s=r.value;t.push({tokenAddress:s.token,tokenId:s.identifierOrCriteria,tokenType:exports.TokenType.ERC721})}return t},n.getInputTokens=function(){for(var e,t=new Set,n=T(this.orders);!(e=n()).done;)for(var a,i=T(e.value.items);!(a=i()).done;)for(var r,p=T(a.value.parameters.consideration);!(r=p()).done;){var s=r.value.token.toLowerCase();t.add(s)}return t},n.getTotalOrderPrice=function(e,t){void 0===t&&(t=w);for(var n,a=r.BigNumber.from(0),i=T(e.items);!(n=i()).done;)a=a.add(this.calculateValue(n.value.parameters.consideration,t));return a},n.getTotalPrice=function(e){void 0===e&&(e=w);for(var t,n=r.BigNumber.from(0),a=T(this.orders);!(t=a()).done;)for(var i,p=T(t.value.items);!(i=p()).done;)n=n.add(this.calculateValue(i.value.parameters.consideration,e));return n},n.commandMap=function(e){switch(e.toLowerCase()){case"0x00000000000000adc04c56bf30ac9d3c0aaf14dc":return exports.CommandType.SEAPORT_V1_5;case"0x00000000000001ad428e4906ae43d8f9852d0dd6":return exports.CommandType.SEAPORT_V1_4;default:throw new Error("unsupported Seaport address")}},n.getConsiderationFulfillments=function(e){var t=[],n=[];for(var a in e){var i=e[a],r=function(e){var r=i.parameters.consideration[e];-1===n.findIndex((function(e){return e===r.recipient}))&&n.push(r.recipient);var p=n.findIndex((function(e){return e===r.recipient}));t[p]?t[p].push({orderIndex:a,itemIndex:e}):t.push([{orderIndex:a,itemIndex:e}])};for(var p in i.parameters.consideration)r(p)}return t},n.getAdvancedOrderParams=function(e){return{advancedOrder:{parameters:e.parameters,numerator:r.BigNumber.from("1"),denominator:r.BigNumber.from("1"),signature:e.signature,extraData:"0x00"}}},n.calculateValue=function(e,t){return e.reduce((function(e,n){return n.token.toLowerCase()==t.toLowerCase()?e.add(n.startAmount):e}),r.BigNumber.from(0))},t}(v);$.INTERFACE=new i.Interface(Z),$.OPENSEA_CONDUIT_KEY="0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000";var J=[{inputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"_factory",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"factory",outputs:[{internalType:"contract ILSSVMPairFactoryLike",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"contract ERC20",name:"token",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferERC20From",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IERC721",name:"nft",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"id",type:"uint256"},{internalType:"enum ILSSVMPairFactoryLike.PairVariant",name:"variant",type:"uint8"}],name:"pairTransferNFTFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapERC20ForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"maxCost",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"},{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"nftToTokenTrades",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"}],internalType:"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade",name:"params",type:"tuple"}],name:"robustSwapETHForSpecificNFTsAndNFTsToToken",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"},{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific",name:"swapInfo",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"}],internalType:"struct LSSVMRouter.RobustPairSwapSpecificForToken[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"robustSwapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapERC20ForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForAnyNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForSpecificNFTs",outputs:[{internalType:"uint256",name:"remainingValue",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256",name:"numItems",type:"uint256"}],internalType:"struct LSSVMRouter.PairSwapAny[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForAnyNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForAnyNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughERC20",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"nftToTokenTrades",type:"tuple[]"},{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"tokenToNFTTrades",type:"tuple[]"}],internalType:"struct LSSVMRouter.NFTsForSpecificNFTsTrade",name:"trade",type:"tuple"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address payable",name:"ethRecipient",type:"address"},{internalType:"address",name:"nftRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForSpecificNFTsThroughETH",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"contract LSSVMPair",name:"pair",type:"address"},{internalType:"uint256[]",name:"nftIds",type:"uint256[]"}],internalType:"struct LSSVMRouter.PairSwapSpecific[]",name:"swapList",type:"tuple[]"},{internalType:"uint256",name:"minOutput",type:"uint256"},{internalType:"address",name:"tokenRecipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapNFTsForToken",outputs:[{internalType:"uint256",name:"outputAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{stateMutability:"payable",type:"receive"}],ee=function(e){function t(t){return e.call(this,exports.Market.Sudoswap,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,i=T(this.orders);!(a=i()).done;){var p=a.value,s=t.INTERFACE.encodeFunctionData("robustSwapETHForSpecificNFTs",[p.swaps.map((function(e){return{swapInfo:e.swapInfo,maxCost:e.maxCost}})),p.ethRecipient,p.nftRecipient,p.deadline]),y=p.swaps.reduce((function(e,t){return e.add(t.maxCost)}),r.BigNumber.from(0));e.addCommand(exports.CommandType.SUDOSWAP,[y,s],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;)for(var a,i=T(e.value.swaps);!(a=i()).done;)for(var r,p=a.value,s=T(p.swapInfo.nftIds);!(r=s()).done;)t.push({tokenAddress:p.tokenAddress,tokenId:r.value,tokenType:exports.TokenType.ERC721});return t},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)for(var a,i=T(e.value.swaps);!(a=i()).done;)t=t.add(a.value.maxCost);return t},t}(v);ee.INTERFACE=new i.Interface(J);var te=[{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"incentive",type:"uint256"}],name:"EvAuctionRefund",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"}],name:"EvCancel",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"delegate",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvDelegate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"index",type:"uint256"},{indexed:!1,internalType:"bytes",name:"error",type:"bytes"}],name:"EvFailure",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"newValue",type:"uint256"}],name:"EvFeeCapUpdate",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"maker",type:"address"},{indexed:!1,internalType:"address",name:"taker",type:"address"},{indexed:!1,internalType:"uint256",name:"orderSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"settleSalt",type:"uint256"},{indexed:!1,internalType:"uint256",name:"intent",type:"uint256"},{indexed:!1,internalType:"uint256",name:"delegateType",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"},{indexed:!1,internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{indexed:!1,internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],indexed:!1,internalType:"struct Market.OrderItem",name:"item",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],indexed:!1,internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"EvInventory",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"bytes32",name:"itemHash",type:"bytes32"},{indexed:!1,internalType:"address",name:"currency",type:"address"},{indexed:!1,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EvProfit",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"signer",type:"address"},{indexed:!1,internalType:"bool",name:"isRemoval",type:"bool"}],name:"EvSigner",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Paused",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"account",type:"address"}],name:"Unpaused",type:"event"},{inputs:[],name:"RATE_BASE",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32[]",name:"itemHashes",type:"bytes32[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"cancel",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"delegates",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"feeCapPct",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"feeCapPct_",type:"uint256"},{internalType:"address",name:"weth_",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"inventoryStatus",outputs:[{internalType:"enum Market.InvStatus",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"ongoingAuctions",outputs:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint256",name:"netPrice",type:"uint256"},{internalType:"uint256",name:"endAt",type:"uint256"},{internalType:"address",name:"bidder",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"paused",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order[]",name:"orders",type:"tuple[]"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail[]",name:"details",type:"tuple[]"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"}],internalType:"struct Market.RunInput",name:"input",type:"tuple"}],name:"run",outputs:[],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"network",type:"uint256"},{internalType:"uint256",name:"intent",type:"uint256"},{internalType:"uint256",name:"delegateType",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IERC20Upgradeable",name:"currency",type:"address"},{internalType:"bytes",name:"dataMask",type:"bytes"},{components:[{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],internalType:"struct Market.OrderItem[]",name:"items",type:"tuple[]"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"uint8",name:"signVersion",type:"uint8"}],internalType:"struct Market.Order",name:"order",type:"tuple"},{components:[{internalType:"uint256",name:"salt",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"amountToEth",type:"uint256"},{internalType:"uint256",name:"amountToWeth",type:"uint256"},{internalType:"address",name:"user",type:"address"},{internalType:"bool",name:"canFail",type:"bool"}],internalType:"struct Market.SettleShared",name:"shared",type:"tuple"},{components:[{internalType:"enum Market.Op",name:"op",type:"uint8"},{internalType:"uint256",name:"orderIdx",type:"uint256"},{internalType:"uint256",name:"itemIdx",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"bytes32",name:"itemHash",type:"bytes32"},{internalType:"contract IDelegate",name:"executionDelegate",type:"address"},{internalType:"bytes",name:"dataReplacement",type:"bytes"},{internalType:"uint256",name:"bidIncentivePct",type:"uint256"},{internalType:"uint256",name:"aucMinIncrementPct",type:"uint256"},{internalType:"uint256",name:"aucIncDurationSecs",type:"uint256"},{components:[{internalType:"uint256",name:"percentage",type:"uint256"},{internalType:"address",name:"to",type:"address"}],internalType:"struct Market.Fee[]",name:"fees",type:"tuple[]"}],internalType:"struct Market.SettleDetail",name:"detail",type:"tuple"}],name:"run1",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"signers",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"unpause",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateDelegates",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"val",type:"uint256"}],name:"updateFeeCap",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address[]",name:"toAdd",type:"address[]"},{internalType:"address[]",name:"toRemove",type:"address[]"}],name:"updateSigners",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"weth",outputs:[{internalType:"contract IWETHUpgradable",name:"",type:"address"}],stateMutability:"view",type:"function"},{stateMutability:"payable",type:"receive"}],ne=function(e){function t(t){return e.call(this,exports.Market.X2Y2,t)||this}m(t,e);var n=t.prototype;return n.encode=function(e,n){for(var a,i=T(this.orders);!(a=i()).done;){var r=a.value,p=t.INTERFACE.getSighash(t.INTERFACE.getFunction("run"))+r.signedInput.slice(2);r.tokenType==exports.TokenType.ERC721?e.addCommand(exports.CommandType.X2Y2_721,[r.price,p,r.recipient,r.tokenAddress,r.tokenId],n.allowRevert):r.tokenType==exports.TokenType.ERC1155&&e.addCommand(exports.CommandType.X2Y2_1155,[r.price,p,r.recipient,r.tokenAddress,r.tokenId,r.tokenAmount],n.allowRevert)}},n.getBuyItems=function(){for(var e,t=[],n=T(this.orders);!(e=n()).done;){var a=e.value;t.push({tokenAddress:a.tokenAddress,tokenId:a.tokenId,tokenType:a.tokenType})}return t},n.getTotalPrice=function(){for(var e,t=r.BigNumber.from(0),n=T(this.orders);!(e=n()).done;)t=t.add(e.value.price);return t},t}(v);ne.INTERFACE=new i.Interface(te);var ae=function(){function e(e,t,a){this.tradeType=exports.RouterTradeType.UnwrapWETH,this.wethAddress=M(t),this.amount=e,a&&(a.details.token.toLowerCase()!==this.wethAddress.toLowerCase()&&n(!1),a.details.amount>=e||n(!1),this.permit2Data=a)}return e.prototype.encode=function(e,t){L(e,{permit2Permit:this.permit2Data,permit2TransferFrom:{token:this.wethAddress,amount:this.amount.toString()}}),e.addCommand(exports.CommandType.UNWRAP_WETH,[F,this.amount])},e}(),ie=function(){function e(e,t,a,i){this.tradeType=exports.RouterTradeType.WrapSTETH,this.stethAddress=h(t),this.amount=e,this.wrapAmount=null!=i?i:E,a&&(a.details.token.toLowerCase()!==this.stethAddress.toLowerCase()&&n(!1),a.details.amount>=e||n(!1),this.permit2Data=a)}return e.prototype.encode=function(e,t){L(e,{permit2Permit:this.permit2Data,permit2TransferFrom:{token:this.stethAddress,amount:this.amount.toString()}}),e.addCommand(exports.CommandType.WRAP_STETH,[F,this.wrapAmount])},e}(),re=function(){function e(e,t,a){this.tradeType=exports.RouterTradeType.UnwrapSTETH,this.recipient=e,this.amountMinimum=t,h(a)==I&&n(!1)}return e.prototype.encode=function(e,t){e.addCommand(exports.CommandType.UNWRAP_STETH,[this.recipient,this.amountMinimum])},e}();exports.CryptopunkTrade=W,exports.FoundationTrade=K,exports.LooksRareV2Trade=z,exports.NFT20Trade=j,exports.NFTTrade=v,exports.NFTXTrade=Q,exports.PERMIT2_ADDRESS="0x000000000022D473030F116dDEE9F6B43aC78BA3",exports.ROUTER_AS_RECIPIENT=F,exports.RoutePlanner=R,exports.SeaportTrade=$,exports.SudoswapTrade=ee,exports.SwapRouter=H,exports.UNIVERSAL_ROUTER_ADDRESS=function(e){if(!(e in _))throw new Error("Universal Router not deployed on chain "+e);return _[e].router},exports.UNIVERSAL_ROUTER_CREATION_BLOCK=function(e){if(!(e in _))throw new Error("Universal Router not deployed on chain "+e);return _[e].creationBlock},exports.UniswapTrade=N,exports.UnwrapSTETH=re,exports.UnwrapWETH=ae,exports.WETH_ADDRESS=M,exports.WrapSTETH=ie,exports.X2Y2Trade=ne;
 //# sourceMappingURL=universal-router-sdk.cjs.production.min.js.map
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map
index ada956e..55405ba 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 42294741,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 96333990,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 87206402,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 19106929,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 27915533,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 31583684,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x198EF79F1F515F02dFE9e3115eD9fC07183f02fC',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 1452376,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import JSBI from 'jsbi'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE } from '../../utils/constants'\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(100))\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {}\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = true\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    if (routerMustCustody) {\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n"],"names":["RouterTradeType","Market","TokenType","CommandType","NFTTrade","market","orders","this","length","invariant","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","PERMIT2_TRANSFER_FROM_STRUCT","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","encodedInput","defaultAbiCoder","encode","createCommand","push","has","Error","concat","toString","padStart","CHAIN_CONFIGS","router","weth","creationBlock","WETH_ADDRESS","chainId","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","JSBI","BigInt","UniswapTrade","trade","options","planner","_config","payerIsUser","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","quotient","recipient","outputIsNative","outputAmount","inputIsNative","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","wrapped","address","EXACT_OUTPUT","priceImpact","greaterThan","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","outputToken","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","every","mixedRouteIsAllV3","encodeMixedRouteToPath","liquidityToken","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","amount","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","getInputTokens","forEach","add","lt","sub","uniswapTrade","swapOptions","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","Cryptopunks","_inheritsLoose","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","fee","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","_loop","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"universal-router-sdk.cjs.production.min.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/numbers.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/entities/protocols/wrapSTETH.ts","../src/entities/protocols/unwrapSTETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n  WrapSTETH = 'WrapSTETH',\n  UnwrapSTETH = 'UnwrapSTETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n  WRAP_STETH = 0x23,\n  UNWRAP_STETH = 0x24,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n  [CommandType.WRAP_STETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_STETH]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n  steth: string\n  wsteth: string\n}\n\nexport const NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    steth: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',\n    wsteth: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    steth: '0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F',\n    wsteth: '0x6320cD32aA674d2898A68ec82e869385Fc5f7E2f',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 46866777,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 108825869,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 125861718,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x88a3ED7F21A3fCF6adb86b6F878C5B7a02D20e9b',\n    weth: NOT_SUPPORTED_ON_CHAIN,\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21116361,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: NOT_SUPPORTED_ON_CHAIN,\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 31254967,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x82635AF6146972cD6601161c4472ffe97237D292',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 34491144,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 3229053,\n  },\n\n  [167007]: {\n    router: '0x38D80da17dC0c72fD8acc276fc917B69899415f4',\n    weth: '0x7be7937A395FD3B527F428124f6a33E10D1C0638',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 173491,\n  },\n\n  [167008]: {\n    router: '0xD2C3cbB943FEd0Cfc8389b14a3f6df518fD46346',\n    weth: '0x0011E559da84dde3f841e22dc33F3adbF184D84A',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 774,\n  },\n  [167009]: {\n    router: '0x380A5Ba81efe70fE98AB56613eBF9244a2f3D4c9',\n    weth: '0xae2C46ddb314B9Ba743C6dEE4878F151881333D9',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 14556,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const STETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].steth == NOT_SUPPORTED_ON_CHAIN)\n    throw new Error(`Chain ${chainId} does not have STETH support`)\n\n  return CHAIN_CONFIGS[chainId].steth\n}\n\nexport const WSTETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].wsteth == NOT_SUPPORTED_ON_CHAIN)\n    throw new Error(`Chain ${chainId} does not have WSTETH support`)\n\n  return CHAIN_CONFIGS[chainId].wsteth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n  payerIsRouter?: boolean\n  flatFee?: FlatFeeOptions\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = !this.options.payerIsRouter\n\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * is (Un)WrapSTETH\n         */\n      } else if (trade.tradeType == RouterTradeType.WrapSTETH || trade.tradeType == RouterTradeType.UnwrapSTETH) {\n        trade.encode(planner, { allowRevert: false })\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade, NFTTrade, UnwrapWETH, WrapSTETH'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { CONTRACT_BALANCE, ROUTER_AS_RECIPIENT, STETH_ADDRESS } from '../../utils/constants'\n\nexport class WrapSTETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.WrapSTETH\n  readonly permit2Data: Permit2Permit\n  readonly stethAddress: string\n  readonly amount: BigNumberish\n  readonly wrapAmount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit, wrapAmount?: BigNumberish) {\n    this.stethAddress = STETH_ADDRESS(chainId)\n    this.amount = amount\n    this.wrapAmount = wrapAmount ?? CONTRACT_BALANCE\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.stethAddress.toLowerCase(),\n        `must be permitting STETH address: ${this.stethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough STETH for unwrapSTETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.stethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.WRAP_STETH, [ROUTER_AS_RECIPIENT, this.wrapAmount])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { STETH_ADDRESS, NOT_SUPPORTED_ON_CHAIN } from '../../utils/constants'\n\nexport class UnwrapSTETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapSTETH\n  readonly recipient: string\n  readonly amountMinimum: BigNumberish\n\n  constructor(recipient: string, amountMinimum: BigNumberish, chainId: number) {\n    this.recipient = recipient\n    this.amountMinimum = amountMinimum\n    invariant(STETH_ADDRESS(chainId) != NOT_SUPPORTED_ON_CHAIN, `STETH not supported on chain ${chainId}`)\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    planner.addCommand(CommandType.UNWRAP_STETH, [this.recipient, this.amountMinimum])\n  }\n}\n"],"names":["RouterTradeType","Market","TokenType","CommandType","NFTTrade","market","orders","this","length","invariant","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","PERMIT2_TRANSFER_FROM_STRUCT","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","WRAP_STETH","UNWRAP_STETH","RoutePlanner","commands","inputs","_proto","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","encodedInput","defaultAbiCoder","encode","createCommand","push","has","Error","concat","toString","padStart","NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","router","weth","steth","wsteth","creationBlock","WETH_ADDRESS","chainId","STETH_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","fee","flatFee","planner","_config","payerIsUser","payerIsRouter","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","quotient","recipient","swapOptions","outputIsNative","outputAmount","inputIsNative","routerMustCustody","tradeType","TradeType","EXACT_INPUT","routes","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","toHex","multiply","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","priceImpact","greaterThan","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","outputToken","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","every","mixedRouteIsAllV3","encodeMixedRouteToPath","liquidityToken","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","getInputTokens","forEach","add","uniswapTrade","inputTokenPermit","UnwrapWETH","WrapSTETH","UnwrapSTETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","_NFTTrade","Cryptopunks","_inheritsLoose","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","_loop","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","wrapAmount","stethAddress","amountMinimum"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js
index a85bcc6..4f887b3 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js
@@ -2,12 +2,13 @@ import invariant from 'tiny-invariant';
 import { abi as abi$7 } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json';
 import { Interface } from '@ethersproject/abi';
 import { BigNumber, ethers } from 'ethers';
-import JSBI from 'jsbi';
 import { defaultAbiCoder } from 'ethers/lib/utils';
 import { Trade, Pair } from '@uniswap/v2-sdk';
-import { Trade as Trade$1, encodeRouteToPath, Pool } from '@uniswap/v3-sdk';
+import { toHex, Trade as Trade$1, encodeRouteToPath, Pool } from '@uniswap/v3-sdk';
 import { Protocol, MixedRouteTrade, partitionMixedRouteByProtocol, getOutputOfPools, MixedRouteSDK, MixedRoute, encodeMixedRouteToPath } from '@uniswap/router-sdk';
 import { TradeType, Percent } from '@uniswap/sdk-core';
+import 'jsbi';
+import 'bignumber.js';
 
 function _extends() {
   _extends = Object.assign ? Object.assign.bind() : function (target) {
@@ -72,6 +73,8 @@ var RouterTradeType;
   RouterTradeType["UniswapTrade"] = "UniswapTrade";
   RouterTradeType["NFTTrade"] = "NFTTrade";
   RouterTradeType["UnwrapWETH"] = "UnwrapWETH";
+  RouterTradeType["WrapSTETH"] = "WrapSTETH";
+  RouterTradeType["UnwrapSTETH"] = "UnwrapSTETH";
 })(RouterTradeType || (RouterTradeType = {}));
 
 var NFTTrade = function NFTTrade(market, orders) {
@@ -140,6 +143,8 @@ var CommandType;
   CommandType[CommandType["SEAPORT_V1_4"] = 32] = "SEAPORT_V1_4";
   CommandType[CommandType["EXECUTE_SUB_PLAN"] = 33] = "EXECUTE_SUB_PLAN";
   CommandType[CommandType["APPROVE_ERC20"] = 34] = "APPROVE_ERC20";
+  CommandType[CommandType["WRAP_STETH"] = 35] = "WRAP_STETH";
+  CommandType[CommandType["UNWRAP_STETH"] = 36] = "UNWRAP_STETH";
 })(CommandType || (CommandType = {}));
 var ALLOW_REVERT_FLAG = 0x80;
 var REVERTIBLE_COMMANDS = /*#__PURE__*/new Set([CommandType.SEAPORT_V1_5, CommandType.SEAPORT_V1_4, CommandType.NFTX, CommandType.LOOKS_RARE_V2, CommandType.X2Y2_721, CommandType.X2Y2_1155, CommandType.FOUNDATION, CommandType.SUDOSWAP, CommandType.NFT20, CommandType.EXECUTE_SUB_PLAN, CommandType.CRYPTOPUNKS, CommandType.ELEMENT_MARKET]);
@@ -147,7 +152,7 @@ var PERMIT_STRUCT = '((address token,uint160 amount,uint48 expiration,uint48 non
 var PERMIT_BATCH_STRUCT = '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)';
 var PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)';
 var PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]';
-var ABI_DEFINITION = (_ABI_DEFINITION = {}, _ABI_DEFINITION[CommandType.EXECUTE_SUB_PLAN] = ['bytes', 'bytes[]'], _ABI_DEFINITION[CommandType.PERMIT2_PERMIT] = [PERMIT_STRUCT, 'bytes'], _ABI_DEFINITION[CommandType.PERMIT2_PERMIT_BATCH] = [PERMIT_BATCH_STRUCT, 'bytes'], _ABI_DEFINITION[CommandType.PERMIT2_TRANSFER_FROM] = ['address', 'address', 'uint160'], _ABI_DEFINITION[CommandType.PERMIT2_TRANSFER_FROM_BATCH] = [PERMIT2_TRANSFER_FROM_BATCH_STRUCT], _ABI_DEFINITION[CommandType.V3_SWAP_EXACT_IN] = ['address', 'uint256', 'uint256', 'bytes', 'bool'], _ABI_DEFINITION[CommandType.V3_SWAP_EXACT_OUT] = ['address', 'uint256', 'uint256', 'bytes', 'bool'], _ABI_DEFINITION[CommandType.V2_SWAP_EXACT_IN] = ['address', 'uint256', 'uint256', 'address[]', 'bool'], _ABI_DEFINITION[CommandType.V2_SWAP_EXACT_OUT] = ['address', 'uint256', 'uint256', 'address[]', 'bool'], _ABI_DEFINITION[CommandType.WRAP_ETH] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.UNWRAP_WETH] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.SWEEP] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.SWEEP_ERC721] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.SWEEP_ERC1155] = ['address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[CommandType.TRANSFER] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.PAY_PORTION] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.BALANCE_CHECK_ERC20] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.OWNER_CHECK_721] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.OWNER_CHECK_1155] = ['address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[CommandType.APPROVE_ERC20] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.SEAPORT_V1_5] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.SEAPORT_V1_4] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.NFTX] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.LOOKS_RARE_V2] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.X2Y2_721] = ['uint256', 'bytes', 'address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.X2Y2_1155] = ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[CommandType.FOUNDATION] = ['uint256', 'bytes', 'address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.SUDOSWAP] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.NFT20] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.CRYPTOPUNKS] = ['uint256', 'address', 'uint256'], _ABI_DEFINITION[CommandType.ELEMENT_MARKET] = ['uint256', 'bytes'], _ABI_DEFINITION);
+var ABI_DEFINITION = (_ABI_DEFINITION = {}, _ABI_DEFINITION[CommandType.EXECUTE_SUB_PLAN] = ['bytes', 'bytes[]'], _ABI_DEFINITION[CommandType.PERMIT2_PERMIT] = [PERMIT_STRUCT, 'bytes'], _ABI_DEFINITION[CommandType.PERMIT2_PERMIT_BATCH] = [PERMIT_BATCH_STRUCT, 'bytes'], _ABI_DEFINITION[CommandType.PERMIT2_TRANSFER_FROM] = ['address', 'address', 'uint160'], _ABI_DEFINITION[CommandType.PERMIT2_TRANSFER_FROM_BATCH] = [PERMIT2_TRANSFER_FROM_BATCH_STRUCT], _ABI_DEFINITION[CommandType.V3_SWAP_EXACT_IN] = ['address', 'uint256', 'uint256', 'bytes', 'bool'], _ABI_DEFINITION[CommandType.V3_SWAP_EXACT_OUT] = ['address', 'uint256', 'uint256', 'bytes', 'bool'], _ABI_DEFINITION[CommandType.V2_SWAP_EXACT_IN] = ['address', 'uint256', 'uint256', 'address[]', 'bool'], _ABI_DEFINITION[CommandType.V2_SWAP_EXACT_OUT] = ['address', 'uint256', 'uint256', 'address[]', 'bool'], _ABI_DEFINITION[CommandType.WRAP_ETH] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.UNWRAP_WETH] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.SWEEP] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.SWEEP_ERC721] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.SWEEP_ERC1155] = ['address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[CommandType.TRANSFER] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.PAY_PORTION] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.BALANCE_CHECK_ERC20] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.OWNER_CHECK_721] = ['address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.OWNER_CHECK_1155] = ['address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[CommandType.APPROVE_ERC20] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.WRAP_STETH] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.UNWRAP_STETH] = ['address', 'uint256'], _ABI_DEFINITION[CommandType.SEAPORT_V1_5] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.SEAPORT_V1_4] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.NFTX] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.LOOKS_RARE_V2] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.X2Y2_721] = ['uint256', 'bytes', 'address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.X2Y2_1155] = ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'], _ABI_DEFINITION[CommandType.FOUNDATION] = ['uint256', 'bytes', 'address', 'address', 'uint256'], _ABI_DEFINITION[CommandType.SUDOSWAP] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.NFT20] = ['uint256', 'bytes'], _ABI_DEFINITION[CommandType.CRYPTOPUNKS] = ['uint256', 'address', 'uint256'], _ABI_DEFINITION[CommandType.ELEMENT_MARKET] = ['uint256', 'bytes'], _ABI_DEFINITION);
 var RoutePlanner = /*#__PURE__*/function () {
   function RoutePlanner() {
     this.commands = '0x';
@@ -182,67 +187,115 @@ function createCommand(type, parameters) {
 }
 
 var _CHAIN_CONFIGS;
-var WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000';
+var NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000';
 var CHAIN_CONFIGS = (_CHAIN_CONFIGS = {}, _CHAIN_CONFIGS[1] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
+  steth: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',
+  wsteth: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',
   creationBlock: 17143817
 }, _CHAIN_CONFIGS[5] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',
+  steth: '0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F',
+  wsteth: '0x6320cD32aA674d2898A68ec82e869385Fc5f7E2f',
   creationBlock: 8940568
 }, _CHAIN_CONFIGS[11155111] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
   creationBlock: 3543575
 }, _CHAIN_CONFIGS[137] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+  router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',
   weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',
-  creationBlock: 42294741
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 46866777
 }, _CHAIN_CONFIGS[80001] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
   creationBlock: 35176052
 }, _CHAIN_CONFIGS[10] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+  router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 96333990
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 108825869
 }, _CHAIN_CONFIGS[420] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0x4200000000000000000000000000000000000006',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
   creationBlock: 8887728
 }, _CHAIN_CONFIGS[42161] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+  router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',
   weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',
-  creationBlock: 87206402
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 125861718
 }, _CHAIN_CONFIGS[421613] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
   weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
   creationBlock: 18815277
 }, _CHAIN_CONFIGS[42220] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: WETH_NOT_SUPPORTED_ON_CHAIN,
-  creationBlock: 19106929
+  router: '0x88a3ED7F21A3fCF6adb86b6F878C5B7a02D20e9b',
+  weth: NOT_SUPPORTED_ON_CHAIN,
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 21116361
 }, _CHAIN_CONFIGS[44787] = {
   router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
-  weth: WETH_NOT_SUPPORTED_ON_CHAIN,
+  weth: NOT_SUPPORTED_ON_CHAIN,
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
   creationBlock: 17566658
 }, _CHAIN_CONFIGS[56] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+  router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',
   weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
-  creationBlock: 27915533
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 31254967
 }, _CHAIN_CONFIGS[43114] = {
-  router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',
+  router: '0x82635AF6146972cD6601161c4472ffe97237D292',
   weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',
-  creationBlock: 31583684
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 34491144
 }, _CHAIN_CONFIGS[84531] = {
   router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',
   weth: '0x4200000000000000000000000000000000000006',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
   creationBlock: 6915289
 }, _CHAIN_CONFIGS[8453] = {
-  router: '0x198EF79F1F515F02dFE9e3115eD9fC07183f02fC',
+  router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',
   weth: '0x4200000000000000000000000000000000000006',
-  creationBlock: 1452376
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 3229053
+}, _CHAIN_CONFIGS[167007] = {
+  router: '0x38D80da17dC0c72fD8acc276fc917B69899415f4',
+  weth: '0x7be7937A395FD3B527F428124f6a33E10D1C0638',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 173491
+}, _CHAIN_CONFIGS[167008] = {
+  router: '0xD2C3cbB943FEd0Cfc8389b14a3f6df518fD46346',
+  weth: '0x0011E559da84dde3f841e22dc33F3adbF184D84A',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 774
+}, _CHAIN_CONFIGS[167009] = {
+  router: '0x380A5Ba81efe70fE98AB56613eBF9244a2f3D4c9',
+  weth: '0xae2C46ddb314B9Ba743C6dEE4878F151881333D9',
+  steth: NOT_SUPPORTED_ON_CHAIN,
+  wsteth: NOT_SUPPORTED_ON_CHAIN,
+  creationBlock: 14556
 }, _CHAIN_CONFIGS);
 var UNIVERSAL_ROUTER_ADDRESS = function UNIVERSAL_ROUTER_ADDRESS(chainId) {
   if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
@@ -254,9 +307,14 @@ var UNIVERSAL_ROUTER_CREATION_BLOCK = function UNIVERSAL_ROUTER_CREATION_BLOCK(c
 };
 var WETH_ADDRESS = function WETH_ADDRESS(chainId) {
   if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
-  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error("Chain " + chainId + " does not have WETH");
+  if (CHAIN_CONFIGS[chainId].weth == NOT_SUPPORTED_ON_CHAIN) throw new Error("Chain " + chainId + " does not have WETH");
   return CHAIN_CONFIGS[chainId].weth;
 };
+var STETH_ADDRESS = function STETH_ADDRESS(chainId) {
+  if (!(chainId in CHAIN_CONFIGS)) throw new Error("Universal Router not deployed on chain " + chainId);
+  if (CHAIN_CONFIGS[chainId].steth == NOT_SUPPORTED_ON_CHAIN) throw new Error("Chain " + chainId + " does not have STETH support");
+  return CHAIN_CONFIGS[chainId].steth;
+};
 var PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3';
 var CONTRACT_BALANCE = /*#__PURE__*/BigNumber.from(2).pow(255);
 var ETH_ADDRESS = '0x0000000000000000000000000000000000000000';
@@ -266,7 +324,11 @@ var ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002';
 var OPENSEA_CONDUIT_SPENDER_ID = 0;
 var SUDOSWAP_SPENDER_ID = 1;
 
-var REFUND_ETH_PRICE_IMPACT_THRESHOLD = /*#__PURE__*/new Percent( /*#__PURE__*/JSBI.BigInt(50), /*#__PURE__*/JSBI.BigInt(100));
+function encodeFeeBips(fee) {
+  return toHex(fee.multiply(10000).quotient);
+}
+
+var REFUND_ETH_PRICE_IMPACT_THRESHOLD = /*#__PURE__*/new Percent(50, 100);
 // Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router
 // also translates trade objects from previous (v2, v3) SDKs
 var UniswapTrade = /*#__PURE__*/function () {
@@ -274,17 +336,20 @@ var UniswapTrade = /*#__PURE__*/function () {
     this.trade = trade;
     this.options = options;
     this.tradeType = RouterTradeType.UniswapTrade;
+    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted');
   }
   var _proto = UniswapTrade.prototype;
   _proto.encode = function encode(planner, _config) {
     var _this$options$recipie;
-    var payerIsUser = true;
+    var payerIsUser = !this.options.payerIsRouter;
+    // If the input currency is the native currency, we need to wrap it with the router as the recipient
     if (this.trade.inputAmount.currency.isNative) {
       // TODO: optimize if only one v2 pool we can directly send this to the pool
       planner.addCommand(CommandType.WRAP_ETH, [ROUTER_AS_RECIPIENT, this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]);
       // since WETH is now owned by the router, the router pays for inputs
       payerIsUser = false;
     }
+    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender
     this.options.recipient = (_this$options$recipie = this.options.recipient) != null ? _this$options$recipie : SENDER_AS_RECIPIENT;
     // flag for whether we want to perform slippage check on aggregate output of multiple routes
     //   1. when there are >2 exact input trades. this is only a heuristic,
@@ -293,7 +358,7 @@ var UniswapTrade = /*#__PURE__*/function () {
     var performAggregatedSlippageCheck = this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2;
     var outputIsNative = this.trade.outputAmount.currency.isNative;
     var inputIsNative = this.trade.inputAmount.currency.isNative;
-    var routerMustCustody = performAggregatedSlippageCheck || outputIsNative;
+    var routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options);
     for (var _iterator = _createForOfIteratorHelperLoose(this.trade.swaps), _step; !(_step = _iterator()).done;) {
       var swap = _step.value;
       switch (swap.route.protocol) {
@@ -310,11 +375,38 @@ var UniswapTrade = /*#__PURE__*/function () {
           throw new Error('UNSUPPORTED_TRADE_PROTOCOL');
       }
     }
+    var minimumAmountOut = BigNumber.from(this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString());
+    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check
     if (routerMustCustody) {
+      // If there is a fee, that percentage is sent to the fee recipient
+      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)
+      if (!!this.options.fee) {
+        var feeBips = encodeFeeBips(this.options.fee.fee);
+        planner.addCommand(CommandType.PAY_PORTION, [this.trade.outputAmount.currency.wrapped.address, this.options.fee.recipient, feeBips]);
+        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee
+        // Otherwise we continue as expected with the trade's normal expected output
+        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {
+          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000));
+        }
+      }
+      // If there is a flat fee, that absolute amount is sent to the fee recipient
+      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)
+      if (!!this.options.flatFee) {
+        var feeAmount = this.options.flatFee.amount;
+        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut');
+        planner.addCommand(CommandType.TRANSFER, [this.trade.outputAmount.currency.wrapped.address, this.options.flatFee.recipient, feeAmount]);
+        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee
+        // Otherwise we continue as expected with the trade's normal expected output
+        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {
+          minimumAmountOut = minimumAmountOut.sub(feeAmount);
+        }
+      }
+      // The remaining tokens that need to be sent to the user after the fee is taken will be caught
+      // by this if-else clause.
       if (outputIsNative) {
-        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()]);
+        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut]);
       } else {
-        planner.addCommand(CommandType.SWEEP, [this.trade.outputAmount.currency.wrapped.address, this.options.recipient, this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()]);
+        planner.addCommand(CommandType.SWEEP, [this.trade.outputAmount.currency.wrapped.address, this.options.recipient, minimumAmountOut]);
       }
     }
     if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {
@@ -423,6 +515,9 @@ function addMixedSwap(planner, swap, tradeType, options, payerIsUser, routerMust
 function riskOfPartialFill(trade) {
   return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD);
 }
+function hasFeeOption(swapOptions) {
+  return !!swapOptions.fee || !!swapOptions.flatFee;
+}
 
 var SIGNATURE_LENGTH = 65;
 var EIP_2098_SIGNATURE_LENGTH = 64;
@@ -549,11 +644,18 @@ var SwapRouter = /*#__PURE__*/function () {
           allowRevert: false
         });
         currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount);
+        /**
+         * is (Un)WrapSTETH
+         */
+      } else if (trade.tradeType == RouterTradeType.WrapSTETH || trade.tradeType == RouterTradeType.UnwrapSTETH) {
+        trade.encode(planner, {
+          allowRevert: false
+        });
         /**
          * else
          */
       } else {
-        throw 'trade must be of instance: UniswapTrade or NFTTrade';
+        throw 'trade must be of instance: UniswapTrade, NFTTrade, UnwrapWETH, WrapSTETH';
       }
     }
     // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades
@@ -10506,5 +10608,45 @@ var UnwrapWETH = /*#__PURE__*/function () {
   return UnwrapWETH;
 }();
 
-export { CryptopunkTrade, FoundationTrade, LooksRareV2Trade, Market, NFT20Trade, NFTTrade, NFTXTrade, PERMIT2_ADDRESS, ROUTER_AS_RECIPIENT, RouterTradeType, SeaportTrade, SudoswapTrade, SwapRouter, TokenType, UNIVERSAL_ROUTER_ADDRESS, UNIVERSAL_ROUTER_CREATION_BLOCK, UniswapTrade, UnwrapWETH, WETH_ADDRESS, X2Y2Trade };
+var WrapSTETH = /*#__PURE__*/function () {
+  function WrapSTETH(amount, chainId, permit2, wrapAmount) {
+    this.tradeType = RouterTradeType.WrapSTETH;
+    this.stethAddress = STETH_ADDRESS(chainId);
+    this.amount = amount;
+    this.wrapAmount = wrapAmount != null ? wrapAmount : CONTRACT_BALANCE;
+    if (!!permit2) {
+      !(permit2.details.token.toLowerCase() === this.stethAddress.toLowerCase()) ? process.env.NODE_ENV !== "production" ? invariant(false, "must be permitting STETH address: " + this.stethAddress) : invariant(false) : void 0;
+      !(permit2.details.amount >= amount) ? process.env.NODE_ENV !== "production" ? invariant(false, "Did not permit enough STETH for unwrapSTETH transaction") : invariant(false) : void 0;
+      this.permit2Data = permit2;
+    }
+  }
+  var _proto = WrapSTETH.prototype;
+  _proto.encode = function encode(planner, _) {
+    encodeInputTokenOptions(planner, {
+      permit2Permit: this.permit2Data,
+      permit2TransferFrom: {
+        token: this.stethAddress,
+        amount: this.amount.toString()
+      }
+    });
+    planner.addCommand(CommandType.WRAP_STETH, [ROUTER_AS_RECIPIENT, this.wrapAmount]);
+  };
+  return WrapSTETH;
+}();
+
+var UnwrapSTETH = /*#__PURE__*/function () {
+  function UnwrapSTETH(recipient, amountMinimum, chainId) {
+    this.tradeType = RouterTradeType.UnwrapSTETH;
+    this.recipient = recipient;
+    this.amountMinimum = amountMinimum;
+    !(STETH_ADDRESS(chainId) != NOT_SUPPORTED_ON_CHAIN) ? process.env.NODE_ENV !== "production" ? invariant(false, "STETH not supported on chain " + chainId) : invariant(false) : void 0;
+  }
+  var _proto = UnwrapSTETH.prototype;
+  _proto.encode = function encode(planner, _) {
+    planner.addCommand(CommandType.UNWRAP_STETH, [this.recipient, this.amountMinimum]);
+  };
+  return UnwrapSTETH;
+}();
+
+export { CommandType, CryptopunkTrade, FoundationTrade, LooksRareV2Trade, Market, NFT20Trade, NFTTrade, NFTXTrade, PERMIT2_ADDRESS, ROUTER_AS_RECIPIENT, RoutePlanner, RouterTradeType, SeaportTrade, SudoswapTrade, SwapRouter, TokenType, UNIVERSAL_ROUTER_ADDRESS, UNIVERSAL_ROUTER_CREATION_BLOCK, UniswapTrade, UnwrapSTETH, UnwrapWETH, WETH_ADDRESS, WrapSTETH, X2Y2Trade };
 //# sourceMappingURL=universal-router-sdk.esm.js.map
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map
index 03f780a..9ea9182 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map
+++ b/node_modules/@uniswap/universal-router-sdk/dist/universal-router-sdk.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"universal-router-sdk.esm.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n}\n\nconst WETH_NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    creationBlock: 42294741,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 96333990,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    creationBlock: 87206402,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 19106929,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: WETH_NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    creationBlock: 27915533,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    creationBlock: 31583684,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0x198EF79F1F515F02dFE9e3115eD9fC07183f02fC',\n    weth: '0x4200000000000000000000000000000000000006',\n    creationBlock: 1452376,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == WETH_NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import JSBI from 'jsbi'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE } from '../../utils/constants'\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(100))\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {}\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = true\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    if (routerMustCustody) {\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","WETH_NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","router","weth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","JSBI","BigInt","UniswapTrade","trade","options","planner","_config","payerIsUser","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","quotient","recipient","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","inputIsNative","routerMustCustody","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","wrapped","address","EXACT_OUTPUT","riskOfPartialFill","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","amount","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","lt","sub","uniswapTrade","swapOptions","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","fee","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"universal-router-sdk.esm.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/entities/protocols/wrapSTETH.ts","../src/entities/protocols/unwrapSTETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n  WrapSTETH = 'WrapSTETH',\n  UnwrapSTETH = 'UnwrapSTETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n  WRAP_STETH = 0x23,\n  UNWRAP_STETH = 0x24,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n  [CommandType.WRAP_STETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_STETH]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n  steth: string\n  wsteth: string\n}\n\nexport const NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    steth: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',\n    wsteth: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    steth: '0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F',\n    wsteth: '0x6320cD32aA674d2898A68ec82e869385Fc5f7E2f',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 46866777,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 108825869,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 125861718,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x88a3ED7F21A3fCF6adb86b6F878C5B7a02D20e9b',\n    weth: NOT_SUPPORTED_ON_CHAIN,\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21116361,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: NOT_SUPPORTED_ON_CHAIN,\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 31254967,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x82635AF6146972cD6601161c4472ffe97237D292',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 34491144,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 3229053,\n  },\n\n  [167007]: {\n    router: '0x38D80da17dC0c72fD8acc276fc917B69899415f4',\n    weth: '0x7be7937A395FD3B527F428124f6a33E10D1C0638',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 173491,\n  },\n\n  [167008]: {\n    router: '0xD2C3cbB943FEd0Cfc8389b14a3f6df518fD46346',\n    weth: '0x0011E559da84dde3f841e22dc33F3adbF184D84A',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 774,\n  },\n  [167009]: {\n    router: '0x380A5Ba81efe70fE98AB56613eBF9244a2f3D4c9',\n    weth: '0xae2C46ddb314B9Ba743C6dEE4878F151881333D9',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 14556,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const STETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].steth == NOT_SUPPORTED_ON_CHAIN)\n    throw new Error(`Chain ${chainId} does not have STETH support`)\n\n  return CHAIN_CONFIGS[chainId].steth\n}\n\nexport const WSTETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].wsteth == NOT_SUPPORTED_ON_CHAIN)\n    throw new Error(`Chain ${chainId} does not have WSTETH support`)\n\n  return CHAIN_CONFIGS[chainId].wsteth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n  payerIsRouter?: boolean\n  flatFee?: FlatFeeOptions\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = !this.options.payerIsRouter\n\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * is (Un)WrapSTETH\n         */\n      } else if (trade.tradeType == RouterTradeType.WrapSTETH || trade.tradeType == RouterTradeType.UnwrapSTETH) {\n        trade.encode(planner, { allowRevert: false })\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade, NFTTrade, UnwrapWETH, WrapSTETH'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { CONTRACT_BALANCE, ROUTER_AS_RECIPIENT, STETH_ADDRESS } from '../../utils/constants'\n\nexport class WrapSTETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.WrapSTETH\n  readonly permit2Data: Permit2Permit\n  readonly stethAddress: string\n  readonly amount: BigNumberish\n  readonly wrapAmount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit, wrapAmount?: BigNumberish) {\n    this.stethAddress = STETH_ADDRESS(chainId)\n    this.amount = amount\n    this.wrapAmount = wrapAmount ?? CONTRACT_BALANCE\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.stethAddress.toLowerCase(),\n        `must be permitting STETH address: ${this.stethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough STETH for unwrapSTETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.stethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.WRAP_STETH, [ROUTER_AS_RECIPIENT, this.wrapAmount])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { STETH_ADDRESS, NOT_SUPPORTED_ON_CHAIN } from '../../utils/constants'\n\nexport class UnwrapSTETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapSTETH\n  readonly recipient: string\n  readonly amountMinimum: BigNumberish\n\n  constructor(recipient: string, amountMinimum: BigNumberish, chainId: number) {\n    this.recipient = recipient\n    this.amountMinimum = amountMinimum\n    invariant(STETH_ADDRESS(chainId) != NOT_SUPPORTED_ON_CHAIN, `STETH not supported on chain ${chainId}`)\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    planner.addCommand(CommandType.UNWRAP_STETH, [this.recipient, this.amountMinimum])\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","WRAP_STETH","UNWRAP_STETH","RoutePlanner","commands","inputs","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","router","weth","steth","wsteth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","STETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","planner","_config","payerIsUser","payerIsRouter","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","recipient","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","inputIsNative","routerMustCustody","hasFeeOption","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputTokenPermit","UnwrapWETH","WrapSTETH","UnwrapSTETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","wrapAmount","stethAddress","amountMinimum"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAMYA;AAAZ,WAAYA,eAAe;EACzBA,gDAA6B;EAC7BA,wCAAqB;EACrBA,4CAAyB;EACzBA,0CAAuB;EACvBA,8CAA2B;AAC7B,CAAC,EANWA,eAAe,KAAfA,eAAe;;ICmBLC,QAAQ,GAK5B,kBAAYC,MAAc,EAAEC,MAAW;EAJ9B,cAAS,GAAoBH,eAAe,CAACC,QAAQ;EAK5D,EAAUE,MAAM,CAACC,MAAM,GAAG,CAAC,4CAA3BC,SAAS,QAAoB,cAAc,IAA3CA,SAAS;EACT,IAAI,CAACH,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;AACtB,CAAC;AAiBH,IAAYG,MAUX;AAVD,WAAYA,MAAM;EAChBA,mCAAyB;EACzBA,qCAA2B;EAC3BA,yBAAe;EACfA,uBAAa;EACbA,6BAAmB;EACnBA,+BAAqB;EACrBA,qCAA2B;EAC3BA,uBAAa;EACbA,6BAAmB;AACrB,CAAC,EAVWA,MAAM,KAANA,MAAM;AAYlB,IAAYC,SAIX;AAJD,WAAYA,SAAS;EACnBA,8BAAiB;EACjBA,gCAAmB;EACnBA,sCAAyB;AAC3B,CAAC,EAJWA,SAAS,KAATA,SAAS;;;AC/DrB,AAEA;;;;;AAKA,IAAYC,WAwCX;AAxCD,WAAYA,WAAW;EACrBA,qEAAuB;EACvBA,uEAAwB;EACxBA,+EAA4B;EAC5BA,6EAA2B;EAC3BA,+CAAY;EACZA,qDAAe;EACfA,2DAAkB;EAElBA,qEAAuB;EACvBA,uEAAwB;EACxBA,kEAAqB;EACrBA,sDAAe;EACfA,4DAAkB;EAClBA,4FAAkC;EAClCA,4EAA0B;;EAG1BA,8DAAmB;EACnBA,gEAAoB;EACpBA,8CAAW;EACXA,4DAAkB;;EAElBA,oEAAsB;EACtBA,sEAAuB;EACvBA,8DAAmB;EAEnBA,sDAAe;EACfA,sDAAe;EACfA,gDAAY;EACZA,wDAAgB;EAChBA,0DAAiB;EACjBA,gEAAoB;EACpBA,kEAAqB;EAErBA,8DAAmB;EACnBA,sEAAuB;EACvBA,gEAAoB;EACpBA,0DAAiB;EACjBA,8DAAmB;AACrB,CAAC,EAxCWA,WAAW,KAAXA,WAAW;AA0CvB,IAAMC,iBAAiB,GAAG,IAAI;AAE9B,IAAMC,mBAAmB,gBAAG,IAAIC,GAAG,CAAc,CAC/CH,WAAW,CAACI,YAAY,EACxBJ,WAAW,CAACK,YAAY,EACxBL,WAAW,CAACM,IAAI,EAChBN,WAAW,CAACO,aAAa,EACzBP,WAAW,CAACQ,QAAQ,EACpBR,WAAW,CAACS,SAAS,EACrBT,WAAW,CAACU,UAAU,EACtBV,WAAW,CAACW,QAAQ,EACpBX,WAAW,CAACY,KAAK,EACjBZ,WAAW,CAACa,gBAAgB,EAC5Bb,WAAW,CAACc,WAAW,EACvBd,WAAW,CAACe,cAAc,CAC3B,CAAC;AAEF,IAAMC,aAAa,GACjB,6GAA6G;AAE/G,IAAMC,mBAAmB,GACvB,+GAA+G;AAEjH,IAAMC,4BAA4B,GAAG,wDAAwD;AAC7F,IAAMC,kCAAkC,GAAGD,4BAA4B,GAAG,IAAI;AAE9E,IAAME,cAAc,0CAEjBpB,WAAW,CAACa,gBAAgB,IAAG,CAAC,OAAO,EAAE,SAAS,CAAC,kBAGnDb,WAAW,CAACqB,cAAc,IAAG,CAACL,aAAa,EAAE,OAAO,CAAC,kBACrDhB,WAAW,CAACsB,oBAAoB,IAAG,CAACL,mBAAmB,EAAE,OAAO,CAAC,kBACjEjB,WAAW,CAACuB,qBAAqB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBACrEvB,WAAW,CAACwB,2BAA2B,IAAG,CAACL,kCAAkC,CAAC,kBAG9EnB,WAAW,CAACyB,gBAAgB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,kBACjFzB,WAAW,CAAC0B,iBAAiB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,kBAClF1B,WAAW,CAAC2B,gBAAgB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,CAAC,kBACrF3B,WAAW,CAAC4B,iBAAiB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,CAAC,kBAGtF5B,WAAW,CAAC6B,QAAQ,IAAG,CAAC,SAAS,EAAE,SAAS,CAAC,kBAC7C7B,WAAW,CAAC8B,WAAW,IAAG,CAAC,SAAS,EAAE,SAAS,CAAC,kBAChD9B,WAAW,CAAC+B,KAAK,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBACrD/B,WAAW,CAACgC,YAAY,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC5DhC,WAAW,CAACiC,aAAa,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBACxEjC,WAAW,CAACkC,QAAQ,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBACxDlC,WAAW,CAACmC,WAAW,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC3DnC,WAAW,CAACoC,mBAAmB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBACnEpC,WAAW,CAACqC,eAAe,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC/DrC,WAAW,CAACsC,gBAAgB,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC3EtC,WAAW,CAACuC,aAAa,IAAG,CAAC,SAAS,EAAE,SAAS,CAAC,kBAClDvC,WAAW,CAACwC,UAAU,IAAG,CAAC,SAAS,EAAE,SAAS,CAAC,kBAC/CxC,WAAW,CAACyC,YAAY,IAAG,CAAC,SAAS,EAAE,SAAS,CAAC,kBAGjDzC,WAAW,CAACI,YAAY,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBAC/CJ,WAAW,CAACK,YAAY,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBAC/CL,WAAW,CAACM,IAAI,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBACvCN,WAAW,CAACO,aAAa,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBAChDP,WAAW,CAACQ,QAAQ,IAAG,CAAC,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC5ER,WAAW,CAACS,SAAS,IAAG,CAAC,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBACxFT,WAAW,CAACU,UAAU,IAAG,CAAC,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC9EV,WAAW,CAACW,QAAQ,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBAC3CX,WAAW,CAACY,KAAK,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBACxCZ,WAAW,CAACc,WAAW,IAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,kBAC3Dd,WAAW,CAACe,cAAc,IAAG,CAAC,SAAS,EAAE,OAAO,CAAC,kBACnD;AAED,IAAa2B,YAAY;EAIvB;IACE,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,MAAM,GAAG,EAAE;;EACjB;EAAA,OAEDC,UAAU,GAAV,oBAAWC,OAAqB;IAC9B,IAAI,CAACC,UAAU,CAAC/C,WAAW,CAACa,gBAAgB,EAAE,CAACiC,OAAO,CAACH,QAAQ,EAAEG,OAAO,CAACF,MAAM,CAAC,EAAE,IAAI,CAAC;GACxF;EAAA,OAEDG,UAAU,GAAV,oBAAWC,IAAiB,EAAEC,UAAiB,EAAEC,WAAW;QAAXA,WAAW;MAAXA,WAAW,GAAG,KAAK;;IAClE,IAAIC,OAAO,GAAGC,aAAa,CAACJ,IAAI,EAAEC,UAAU,CAAC;IAC7C,IAAI,CAACL,MAAM,CAACS,IAAI,CAACF,OAAO,CAACG,YAAY,CAAC;IACtC,IAAIJ,WAAW,EAAE;MACf,IAAI,CAAChD,mBAAmB,CAACqD,GAAG,CAACJ,OAAO,CAACH,IAAI,CAAC,EAAE;QAC1C,MAAM,IAAIQ,KAAK,oBAAkBL,OAAO,CAACH,IAAI,kCAA+B;;MAE9EG,OAAO,CAACH,IAAI,GAAGG,OAAO,CAACH,IAAI,GAAG/C,iBAAiB;;IAGjD,IAAI,CAAC0C,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACc,MAAM,CAACN,OAAO,CAACH,IAAI,CAACU,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;GACjF;EAAA;AAAA;AAQH,SAAgBP,aAAa,CAACJ,IAAiB,EAAEC,UAAiB;EAChE,IAAMK,YAAY,GAAGM,eAAe,CAACC,MAAM,CAACzC,cAAc,CAAC4B,IAAI,CAAC,EAAEC,UAAU,CAAC;EAC7E,OAAO;IAAED,IAAI,EAAJA,IAAI;IAAEM,YAAY,EAAZA;GAAc;AAC/B;;;AC3JA,AAUO,IAAMQ,sBAAsB,GAAG,4CAA4C;AAElF,IAAMC,aAAa,wCAEhB,CAAC,IAAG;EACHC,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAE,4CAA4C;EACnDC,MAAM,EAAE,4CAA4C;EACpDC,aAAa,EAAE;CAChB,iBAEA,CAAC,IAAG;EACHJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAE,4CAA4C;EACnDC,MAAM,EAAE,4CAA4C;EACpDC,aAAa,EAAE;CAChB,iBAEA,QAAQ,IAAG;EACVJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,GAAG,IAAG;EACLJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,KAAK,IAAG;EACPJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,EAAE,IAAG;EACJJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,GAAG,IAAG;EACLJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,KAAK,IAAG;EACPJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,MAAM,IAAG;EACRJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,KAAK,IAAG;EACPJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAEH,sBAAsB;EAC5BI,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,KAAK,IAAG;EACPJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAEH,sBAAsB;EAC5BI,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,EAAE,IAAG;EACJJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,KAAK,IAAG;EACPJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,KAAK,IAAG;EACPJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,IAAI,IAAG;EACNJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,MAAM,IAAG;EACRJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBAEA,MAAM,IAAG;EACRJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBACA,MAAM,IAAG;EACRJ,MAAM,EAAE,4CAA4C;EACpDC,IAAI,EAAE,4CAA4C;EAClDC,KAAK,EAAEJ,sBAAsB;EAC7BK,MAAM,EAAEL,sBAAsB;EAC9BM,aAAa,EAAE;CAChB,iBACF;AAED,IAAaC,wBAAwB,GAAG,SAA3BA,wBAAwB,CAAIC,OAAe;EACtD,IAAI,EAAEA,OAAO,IAAIP,aAAa,CAAC,EAAE,MAAM,IAAIP,KAAK,6CAA2Cc,OAAO,CAAG;EACrG,OAAOP,aAAa,CAACO,OAAO,CAAC,CAACN,MAAM;AACtC,CAAC;AAED,IAAaO,+BAA+B,GAAG,SAAlCA,+BAA+B,CAAID,OAAe;EAC7D,IAAI,EAAEA,OAAO,IAAIP,aAAa,CAAC,EAAE,MAAM,IAAIP,KAAK,6CAA2Cc,OAAO,CAAG;EACrG,OAAOP,aAAa,CAACO,OAAO,CAAC,CAACF,aAAa;AAC7C,CAAC;AAED,IAAaI,YAAY,GAAG,SAAfA,YAAY,CAAIF,OAAe;EAC1C,IAAI,EAAEA,OAAO,IAAIP,aAAa,CAAC,EAAE,MAAM,IAAIP,KAAK,6CAA2Cc,OAAO,CAAG;EAErG,IAAIP,aAAa,CAACO,OAAO,CAAC,CAACL,IAAI,IAAIH,sBAAsB,EAAE,MAAM,IAAIN,KAAK,YAAUc,OAAO,yBAAsB;EAEjH,OAAOP,aAAa,CAACO,OAAO,CAAC,CAACL,IAAI;AACpC,CAAC;AAED,AAAO,IAAMQ,aAAa,GAAG,SAAhBA,aAAa,CAAIH,OAAe;EAC3C,IAAI,EAAEA,OAAO,IAAIP,aAAa,CAAC,EAAE,MAAM,IAAIP,KAAK,6CAA2Cc,OAAO,CAAG;EAErG,IAAIP,aAAa,CAACO,OAAO,CAAC,CAACJ,KAAK,IAAIJ,sBAAsB,EACxD,MAAM,IAAIN,KAAK,YAAUc,OAAO,kCAA+B;EAEjE,OAAOP,aAAa,CAACO,OAAO,CAAC,CAACJ,KAAK;AACrC,CAAC;AAED,IASaQ,eAAe,GAAG,4CAA4C;AAE3E,AAAO,IAAMC,gBAAgB,gBAAGC,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,GAAG,CAAC;AAC1D,AAAO,IAAMC,WAAW,GAAG,4CAA4C;AACvE,AAAO,IAAMC,YAAY,GAAG,4CAA4C;AACxE,AAGO,IAAMC,mBAAmB,GAAG,4CAA4C;AAC/E,IAAaC,mBAAmB,GAAG,4CAA4C;AAE/E,AAAO,IAAMC,0BAA0B,GAAG,CAAC;AAC3C,AAAO,IAAMC,mBAAmB,GAAG,CAAC;;SC/LpBC,aAAa,CAACC,GAAY;EACxC,OAAOC,KAAK,CAACD,GAAG,CAACE,QAAQ,CAAC,KAAM,CAAC,CAACC,QAAQ,CAAC;AAC7C;;ACoBA,IAAMC,iCAAiC,gBAAG,IAAIC,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC;AAQ9D;AACA;AACA,IAAaC,YAAY;EAEvB,sBAAmBC,KAAiD,EAASC,OAAoB;IAA9E,UAAK,GAALD,KAAK;IAAqD,YAAO,GAAPC,OAAO;IAD3E,cAAS,GAAoBtG,eAAe,CAACoG,YAAY;IAEhE,IAAI,CAAC,CAACE,OAAO,CAACR,GAAG,IAAI,CAAC,CAACQ,OAAO,CAACC,OAAO,EAAE,MAAM,IAAIvC,KAAK,CAAC,+BAA+B,CAAC;;EACzF;EAAA,OAEDK,MAAM,GAAN,gBAAOmC,OAAqB,EAAEC,OAAoB;;IAChD,IAAIC,WAAW,GAAG,CAAC,IAAI,CAACJ,OAAO,CAACK,aAAa;;IAG7C,IAAI,IAAI,CAACN,KAAK,CAACO,WAAW,CAACC,QAAQ,CAACC,QAAQ,EAAE;;MAE5CN,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAAC6B,QAAQ,EAAE,CACvCqD,mBAAmB,EACnB,IAAI,CAACW,KAAK,CAACU,eAAe,CAAC,IAAI,CAACT,OAAO,CAACU,iBAAiB,CAAC,CAACf,QAAQ,CAAC/B,QAAQ,EAAE,CAC/E,CAAC;;MAEFwC,WAAW,GAAG,KAAK;;;IAGrB,IAAI,CAACJ,OAAO,CAACW,SAAS,4BAAG,IAAI,CAACX,OAAO,CAACW,SAAS,oCAAIxB,mBAAmB;;;;;IAMtE,IAAMyB,8BAA8B,GAClC,IAAI,CAACb,KAAK,CAACc,SAAS,KAAKC,SAAS,CAACC,WAAW,IAAI,IAAI,CAAChB,KAAK,CAACiB,MAAM,CAAClH,MAAM,GAAG,CAAC;IAChF,IAAMmH,cAAc,GAAG,IAAI,CAAClB,KAAK,CAACmB,YAAY,CAACX,QAAQ,CAACC,QAAQ;IAChE,IAAMW,aAAa,GAAG,IAAI,CAACpB,KAAK,CAACO,WAAW,CAACC,QAAQ,CAACC,QAAQ;IAC9D,IAAMY,iBAAiB,GAAGR,8BAA8B,IAAIK,cAAc,IAAII,YAAY,CAAC,IAAI,CAACrB,OAAO,CAAC;IAExG,qDAAmB,IAAI,CAACD,KAAK,CAACuB,KAAK,wCAAE;MAAA,IAA1BC,IAAI;MACb,QAAQA,IAAI,CAACC,KAAK,CAACC,QAAQ;QACzB,KAAKC,QAAQ,CAACC,EAAE;UACdC,SAAS,CAAC1B,OAAO,EAAEqB,IAAI,EAAE,IAAI,CAACxB,KAAK,CAACc,SAAS,EAAE,IAAI,CAACb,OAAO,EAAEI,WAAW,EAAEgB,iBAAiB,CAAC;UAC5F;QACF,KAAKM,QAAQ,CAACG,EAAE;UACdC,SAAS,CAAC5B,OAAO,EAAEqB,IAAI,EAAE,IAAI,CAACxB,KAAK,CAACc,SAAS,EAAE,IAAI,CAACb,OAAO,EAAEI,WAAW,EAAEgB,iBAAiB,CAAC;UAC5F;QACF,KAAKM,QAAQ,CAACK,KAAK;UACjBC,YAAY,CAAC9B,OAAO,EAAEqB,IAAI,EAAE,IAAI,CAACxB,KAAK,CAACc,SAAS,EAAE,IAAI,CAACb,OAAO,EAAEI,WAAW,EAAEgB,iBAAiB,CAAC;UAC/F;QACF;UACE,MAAM,IAAI1D,KAAK,CAAC,4BAA4B,CAAC;;;IAInD,IAAIuE,gBAAgB,GAAcnD,SAAS,CAACC,IAAI,CAC9C,IAAI,CAACgB,KAAK,CAACkC,gBAAgB,CAAC,IAAI,CAACjC,OAAO,CAACU,iBAAiB,CAAC,CAACf,QAAQ,CAAC/B,QAAQ,EAAE,CAChF;;IAGD,IAAIwD,iBAAiB,EAAE;;;MAGrB,IAAI,CAAC,CAAC,IAAI,CAACpB,OAAO,CAACR,GAAG,EAAE;QACtB,IAAM0C,OAAO,GAAG3C,aAAa,CAAC,IAAI,CAACS,OAAO,CAACR,GAAG,CAACA,GAAG,CAAC;QACnDU,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACmC,WAAW,EAAE,CAC1C,IAAI,CAAC0D,KAAK,CAACmB,YAAY,CAACX,QAAQ,CAAC4B,OAAO,CAACC,OAAO,EAChD,IAAI,CAACpC,OAAO,CAACR,GAAG,CAACmB,SAAS,EAC1BuB,OAAO,CACR,CAAC;;;QAIF,IAAI,IAAI,CAACnC,KAAK,CAACc,SAAS,KAAKC,SAAS,CAACuB,YAAY,EAAE;UACnDJ,gBAAgB,GAAGA,gBAAgB,CAACK,GAAG,CAACL,gBAAgB,CAACM,GAAG,CAACL,OAAO,CAAC,CAACM,GAAG,CAAC,KAAK,CAAC,CAAC;;;;;MAMrF,IAAI,CAAC,CAAC,IAAI,CAACxC,OAAO,CAACC,OAAO,EAAE;QAC1B,IAAMwC,SAAS,GAAG,IAAI,CAACzC,OAAO,CAACC,OAAO,CAACyC,MAAM;QAC7C,IAAIT,gBAAgB,CAACU,EAAE,CAACF,SAAS,CAAC,EAAE,MAAM,IAAI/E,KAAK,CAAC,+CAA+C,CAAC;QAEpGwC,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACkC,QAAQ,EAAE,CACvC,IAAI,CAAC2D,KAAK,CAACmB,YAAY,CAACX,QAAQ,CAAC4B,OAAO,CAACC,OAAO,EAChD,IAAI,CAACpC,OAAO,CAACC,OAAO,CAACU,SAAS,EAC9B8B,SAAS,CACV,CAAC;;;QAIF,IAAI,IAAI,CAAC1C,KAAK,CAACc,SAAS,KAAKC,SAAS,CAACuB,YAAY,EAAE;UACnDJ,gBAAgB,GAAGA,gBAAgB,CAACK,GAAG,CAACG,SAAS,CAAC;;;;;MAMtD,IAAIxB,cAAc,EAAE;QAClBf,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAAC8B,WAAW,EAAE,CAAC,IAAI,CAACgE,OAAO,CAACW,SAAS,EAAEsB,gBAAgB,CAAC,CAAC;OACxF,MAAM;QACL/B,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAAC+B,KAAK,EAAE,CACpC,IAAI,CAAC8D,KAAK,CAACmB,YAAY,CAACX,QAAQ,CAAC4B,OAAO,CAACC,OAAO,EAChD,IAAI,CAACpC,OAAO,CAACW,SAAS,EACtBsB,gBAAgB,CACjB,CAAC;;;IAIN,IAAId,aAAa,KAAK,IAAI,CAACpB,KAAK,CAACc,SAAS,KAAKC,SAAS,CAACuB,YAAY,IAAIO,iBAAiB,CAAC,IAAI,CAAC7C,KAAK,CAAC,CAAC,EAAE;;;MAGvGG,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAAC8B,WAAW,EAAE,CAAC,IAAI,CAACgE,OAAO,CAACW,SAAS,EAAE,CAAC,CAAC,CAAC;;GAE3E;EAAA;AAAA;AAGH;AACA,SAASiB,SAAS,CAChB1B,OAAqB,QAErBW,SAAoB,EACpBb,OAAoB,EACpBI,WAAoB,EACpBgB,iBAA0B;MAJxBI,KAAK,QAALA,KAAK;IAAElB,WAAW,QAAXA,WAAW;IAAEY,YAAY,QAAZA,YAAY;EAMlC,IAAMnB,KAAK,GAAG,IAAI8C,KAAO,CACvBrB,KAAiC,EACjCX,SAAS,IAAIC,SAAS,CAACC,WAAW,GAAGT,WAAW,GAAGY,YAAY,EAC/DL,SAAS,CACV;EAED,IAAIA,SAAS,IAAIC,SAAS,CAACC,WAAW,EAAE;IACtCb,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAAC2B,gBAAgB,EAAE;;IAE/CuF,iBAAiB,GAAGhC,mBAAmB,GAAGY,OAAO,CAACW,SAAS,EAC3DZ,KAAK,CAACU,eAAe,CAACT,OAAO,CAACU,iBAAiB,CAAC,CAACf,QAAQ,CAAC/B,QAAQ,EAAE,EACpEmC,KAAK,CAACkC,gBAAgB,CAACjC,OAAO,CAACU,iBAAiB,CAAC,CAACf,QAAQ,CAAC/B,QAAQ,EAAE,EACrE4D,KAAK,CAACsB,IAAI,CAACC,GAAG,CAAC,UAACC,IAAI;MAAA,OAAKA,IAAI,CAACZ,OAAO;MAAC,EACtChC,WAAW,CACZ,CAAC;GACH,MAAM,IAAIS,SAAS,IAAIC,SAAS,CAACuB,YAAY,EAAE;IAC9CnC,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAAC4B,iBAAiB,EAAE,CAChDsF,iBAAiB,GAAGhC,mBAAmB,GAAGY,OAAO,CAACW,SAAS,EAC3DZ,KAAK,CAACkC,gBAAgB,CAACjC,OAAO,CAACU,iBAAiB,CAAC,CAACf,QAAQ,CAAC/B,QAAQ,EAAE,EACrEmC,KAAK,CAACU,eAAe,CAACT,OAAO,CAACU,iBAAiB,CAAC,CAACf,QAAQ,CAAC/B,QAAQ,EAAE,EACpE4D,KAAK,CAACsB,IAAI,CAACC,GAAG,CAAC,UAACC,IAAI;MAAA,OAAKA,IAAI,CAACZ,OAAO;MAAC,EACtChC,WAAW,CACZ,CAAC;;AAEN;AAEA;AACA,SAAS0B,SAAS,CAChB5B,OAAqB,SAErBW,SAAoB,EACpBb,OAAoB,EACpBI,WAAoB,EACpBgB,iBAA0B;MAJxBI,KAAK,SAALA,KAAK;IAAElB,WAAW,SAAXA,WAAW;IAAEY,YAAY,SAAZA,YAAY;EAMlC,IAAMnB,KAAK,GAAGkD,OAAO,CAACC,oBAAoB,CAAC;IACzC1B,KAAK,EAAEA,KAAiC;IACxClB,WAAW,EAAXA,WAAW;IACXY,YAAY,EAAZA,YAAY;IACZL,SAAS,EAATA;GACD,CAAC;EAEF,IAAMiC,IAAI,GAAGK,iBAAiB,CAAC3B,KAAiC,EAAEzB,KAAK,CAACc,SAAS,KAAKC,SAAS,CAACuB,YAAY,CAAC;EAC7G,IAAIxB,SAAS,IAAIC,SAAS,CAACC,WAAW,EAAE;IACtCb,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACyB,gBAAgB,EAAE,CAC/CyF,iBAAiB,GAAGhC,mBAAmB,GAAGY,OAAO,CAACW,SAAS,EAC3DZ,KAAK,CAACU,eAAe,CAACT,OAAO,CAACU,iBAAiB,CAAC,CAACf,QAAQ,CAAC/B,QAAQ,EAAE,EACpEmC,KAAK,CAACkC,gBAAgB,CAACjC,OAAO,CAACU,iBAAiB,CAAC,CAACf,QAAQ,CAAC/B,QAAQ,EAAE,EACrEkF,IAAI,EACJ1C,WAAW,CACZ,CAAC;GACH,MAAM,IAAIS,SAAS,IAAIC,SAAS,CAACuB,YAAY,EAAE;IAC9CnC,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAAC0B,iBAAiB,EAAE,CAChDwF,iBAAiB,GAAGhC,mBAAmB,GAAGY,OAAO,CAACW,SAAS,EAC3DZ,KAAK,CAACkC,gBAAgB,CAACjC,OAAO,CAACU,iBAAiB,CAAC,CAACf,QAAQ,CAAC/B,QAAQ,EAAE,EACrEmC,KAAK,CAACU,eAAe,CAACT,OAAO,CAACU,iBAAiB,CAAC,CAACf,QAAQ,CAAC/B,QAAQ,EAAE,EACpEkF,IAAI,EACJ1C,WAAW,CACZ,CAAC;;AAEN;AAEA;AACA,SAAS4B,YAAY,CACnB9B,OAAqB,EACrBqB,IAA2B,EAC3BV,SAAoB,EACpBb,OAAoB,EACpBI,WAAoB,EACpBgB,iBAA0B;EAE1B,IAAQI,KAAK,GAAgCD,IAAI,CAAzCC,KAAK;IAAElB,WAAW,GAAmBiB,IAAI,CAAlCjB,WAAW;IAAEY,YAAY,GAAKK,IAAI,CAArBL,YAAY;EACxC,IAAMkC,cAAc,GAAGhC,iBAAiB,GAAGhC,mBAAmB,GAAGY,OAAO,CAACW,SAAS;;EAGlF,IAAIa,KAAK,CAAC6B,KAAK,CAACvJ,MAAM,KAAK,CAAC,EAAE;IAC5B,IAAI0H,KAAK,CAAC6B,KAAK,CAAC,CAAC,CAAC,YAAYC,IAAI,EAAE;MAClC,OAAOxB,SAAS,CAAC5B,OAAO,EAAEqB,IAAI,EAAEV,SAAS,EAAEb,OAAO,EAAEI,WAAW,EAAEgB,iBAAiB,CAAC;KACpF,MAAM,IAAII,KAAK,CAAC6B,KAAK,CAAC,CAAC,CAAC,YAAYE,IAAI,EAAE;MACzC,OAAO3B,SAAS,CAAC1B,OAAO,EAAEqB,IAAI,EAAEV,SAAS,EAAEb,OAAO,EAAEI,WAAW,EAAEgB,iBAAiB,CAAC;KACpF,MAAM;MACL,MAAM,IAAI1D,KAAK,CAAC,oBAAoB,CAAC;;;EAIzC,IAAMqC,KAAK,GAAGyD,eAAe,CAACN,oBAAoB,CAAC;IACjD1B,KAAK,EAAEA,KAAoC;IAC3ClB,WAAW,EAAXA,WAAW;IACXY,YAAY,EAAZA,YAAY;IACZL,SAAS,EAATA;GACD,CAAC;EAEF,IAAM4C,QAAQ,GAAG1D,KAAK,CAACU,eAAe,CAACT,OAAO,CAACU,iBAAiB,EAAEJ,WAAW,CAAC,CAACX,QAAQ,CAAC/B,QAAQ,EAAE;EAClG,IAAM8F,SAAS,GAAG3D,KAAK,CAACkC,gBAAgB,CAACjC,OAAO,CAACU,iBAAiB,EAAEQ,YAAY,CAAC,CAACvB,QAAQ,CAAC/B,QAAQ,EAAE;;;EAIrG,IAAM+F,QAAQ,GAAGC,6BAA6B,CAACpC,KAAoC,CAAC;EACpF,IAAMqC,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAIC,CAAS;IACrC,OAAOA,CAAC,KAAKH,QAAQ,CAAC7J,MAAM,GAAG,CAAC;GACjC;EAED,IAAIiK,WAAW;EACf,IAAIC,UAAU,GAAGxC,KAAK,CAACyC,KAAK,CAAC9B,OAAO;EAEpC,KAAK,IAAI2B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAAC7J,MAAM,EAAEgK,CAAC,EAAE,EAAE;IACxC,IAAMI,OAAO,GAAGP,QAAQ,CAACG,CAAC,CAAC;;IAE3BC,WAAW,GAAGI,gBAAgB,CAACD,OAAO,EAAEF,UAAU,CAAC;IAEnD,IAAMI,gBAAgB,GAAG,IAAIC,aAAa,WACpCH,OAAO,GACXA,OAAO,CAAC,CAAC,CAAC,CAACI,MAAM,CAACC,MAAM,CAACP,UAAU,CAAC,GAAGE,OAAO,CAAC,CAAC,CAAC,CAACI,MAAM,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAACM,MAAM,EAC5ET,WAAW,CACZ;IACD,IAAMU,QAAQ,GAAG,IAAIC,UAAU,CAACN,gBAAgB,CAAC;;IAGjDJ,UAAU,GAAGD,WAAW;IAExB,IAAMY,iBAAiB,GAAG,SAApBA,iBAAiB,CAAInD,KAAwC;MACjE,OAAOA,KAAK,CAAC6B,KAAK,CAACuB,KAAK,CAAC,UAAC5B,IAAI;QAAA,OAAKA,IAAI,YAAYM,IAAI;QAAC;KACzD;IAED,IAAIqB,iBAAiB,CAACF,QAAQ,CAAC,EAAE;MAC/B,IAAM3B,IAAI,GAAW+B,sBAAsB,CAACJ,QAAQ,CAAC;MAErDvE,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACyB,gBAAgB,EAAE;;;MAG/CkI,oBAAoB,CAACC,CAAC,CAAC,GAAGV,cAAc,GAAIO,QAAQ,CAACG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAU,CAACgB,cAAc,CAAC1C,OAAO,EAC9F0B,CAAC,IAAI,CAAC,GAAGL,QAAQ,GAAG5E,gBAAgB,EACpC,CAACgF,oBAAoB,CAACC,CAAC,CAAC,GAAG,CAAC,GAAGJ,SAAS,EACxCZ,IAAI,EACJ1C,WAAW,IAAI0D,CAAC,KAAK,CAAC,CACvB,CAAC;KACH,MAAM;MACL5D,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAAC2B,gBAAgB,EAAE,CAC/CgI,oBAAoB,CAACC,CAAC,CAAC,GAAGV,cAAc,GAAGhE,mBAAmB,EAC9D0E,CAAC,KAAK,CAAC,GAAGL,QAAQ,GAAG5E,gBAAgB,EACrC,CAACgF,oBAAoB,CAACC,CAAC,CAAC,GAAG,CAAC,GAAGJ,SAAS,EACxCe,QAAQ,CAAC3B,IAAI,CAACC,GAAG,CAAC,UAACC,IAAI;QAAA,OAAKA,IAAI,CAACZ,OAAO;QAAC,EACzChC,WAAW,IAAI0D,CAAC,KAAK,CAAC,CACvB,CAAC;;;AAGR;AAEA;AACA,SAASlB,iBAAiB,CAAC7C,KAAiD;EAC1E,OAAOA,KAAK,CAACgF,WAAW,CAACC,WAAW,CAACpF,iCAAiC,CAAC;AACzE;AAEA,SAASyB,YAAY,CAAC4D,WAAwB;EAC5C,OAAO,CAAC,CAACA,WAAW,CAACzF,GAAG,IAAI,CAAC,CAACyF,WAAW,CAAChF,OAAO;AACnD;;ACvSA,IAAMiF,gBAAgB,GAAG,EAAE;AAC3B,IAAMC,yBAAyB,GAAG,EAAE;AAEpC,SAAgBC,YAAY,CAAClF,OAAqB,EAAEmF,OAAsB;EACxE,IAAIC,SAAS,GAAGD,OAAO,CAACC,SAAS;EAEjC,IAAMxL,MAAM,GAAGyL,MAAM,CAACC,KAAK,CAACC,QAAQ,CAACJ,OAAO,CAACC,SAAS,CAAC,CAACxL,MAAM;;EAE9D,IAAIA,MAAM,KAAKoL,gBAAgB,IAAIpL,MAAM,KAAKqL,yBAAyB,EAAE;;IAEvEG,SAAS,GAAGC,MAAM,CAACC,KAAK,CAACE,aAAa,CAACH,MAAM,CAACC,KAAK,CAACG,cAAc,CAACN,OAAO,CAACC,SAAS,CAAC,CAAC;;EAGxFpF,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACqB,cAAc,EAAE,CAAC8J,OAAO,EAAEC,SAAS,CAAC,CAAC;AACtE;AAEA;AACA;AACA;AACA;AACA;AACA,SAAgBM,uBAAuB,CAAC1F,OAAqB,EAAEF,OAA0B;;EAEvF,IAAI,CAAC,CAACA,OAAO,CAAC6F,QAAQ,IAAI,CAAC,CAAC7F,OAAO,CAAC8F,aAAa,EAC/C,EAAU9F,OAAO,CAAC6F,QAAQ,CAACE,KAAK,KAAK/F,OAAO,CAAC8F,aAAa,CAACE,OAAO,CAACD,KAAK,4CAAxEhM,SAAS,gCAATA,SAAS;EACX,IAAI,CAAC,CAACiG,OAAO,CAAC6F,QAAQ,IAAI,CAAC,CAAC7F,OAAO,CAACiG,mBAAmB,EACrD,EAAUjG,OAAO,CAAC6F,QAAQ,CAACE,KAAK,KAAK/F,OAAO,CAACiG,mBAAmB,CAACF,KAAK,4CAAtEhM,SAAS,gCAATA,SAAS;EACX,IAAI,CAAC,CAACiG,OAAO,CAACiG,mBAAmB,IAAI,CAAC,CAACjG,OAAO,CAAC8F,aAAa,EAC1D,EAAU9F,OAAO,CAACiG,mBAAmB,CAACF,KAAK,KAAK/F,OAAO,CAAC8F,aAAa,CAACE,OAAO,CAACD,KAAK,4CAAnFhM,SAAS,gCAATA,SAAS;;EAGX,IAAI,CAAC,CAACiG,OAAO,CAAC6F,QAAQ,EAAE;IACtB3F,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACuC,aAAa,EAAE,CAC5CuD,OAAO,CAAC6F,QAAQ,CAACE,KAAK,EACtBG,mBAAmB,CAAClG,OAAO,CAAC6F,QAAQ,CAACpE,QAAQ,CAAC,CAC/C,CAAC;;;EAIJ,IAAI,CAAC,CAACzB,OAAO,CAAC8F,aAAa,EAAE;IAC3BV,YAAY,CAAClF,OAAO,EAAEF,OAAO,CAAC8F,aAAa,CAAC;;EAG9C,IAAI,CAAC,CAAC9F,OAAO,CAACiG,mBAAmB,EAAE;IACjC/F,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACuB,qBAAqB,EAAE,CACpDuE,OAAO,CAACiG,mBAAmB,CAACF,KAAK,EACjC/F,OAAO,CAACiG,mBAAmB,CAACtF,SAAS,GAAGX,OAAO,CAACiG,mBAAmB,CAACtF,SAAS,GAAGvB,mBAAmB,EACnGY,OAAO,CAACiG,mBAAmB,CAACvD,MAAM,CACnC,CAAC;;AAEN;AAEA,SAASwD,mBAAmB,CAACC,eAAuB;EAClD,QAAQA,eAAe,CAACC,WAAW,EAAE;IACnC,KAAK,4CAA4C;;MAC/C,OAAO/G,0BAA0B;IACnC,KAAK,4CAA4C;;MAC/C,OAAOA,0BAA0B;IACnC,KAAK,4CAA4C;;MAC/C,OAAOC,mBAAmB;IAC5B;MACE,MAAM,IAAI5B,KAAK,CAAC,8BAA8B,CAAC;;AAErD;;ICnEsB2I,UAAU;EAAA;EAAA,WAGhBC,kBAAkB,GAAzB,4BAA0BC,MAA2B,EAAEC;QAAAA;MAAAA,SAA2B,EAAE;;IACzF,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,EAAEA,MAAM,GAAG,CAACA,MAAM,CAAC;IAE7C,IAAMI,SAAS,GAAGJ,MAAM,CAACK,MAAM,CAAC,UAAC7G,KAAK,EAAE8G,CAAC;MAAA,OAAS9G,KAAK,CAAC+G,cAAc,CAAC,QAAQ,CAAC;MAAwB;IACxG,IAAM1J,WAAW,GAAGuJ,SAAS,CAAC7M,MAAM,IAAI,CAAC,IAAI6M,SAAS,CAAC,CAAC,CAAC,CAAC9M,MAAM,CAACC,MAAM,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI;IAC3F,IAAMoG,OAAO,GAAG,IAAItD,YAAY,EAAE;;IAGlC,IAAImK,0BAA0B,GAAGjI,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAClD,IAAIiI,gBAAgB,GAAGlI,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;;IAGxC,IAAIkI,cAAc,GAAG,IAAI5M,GAAG,EAAU;IAEtC,qDAAoBkM,MAAM,wCAAE;MAAA,IAAjBxG,KAAK;;;;MAId,IAAIA,KAAK,CAACc,SAAS,IAAInH,eAAe,CAACC,QAAQ,EAAE;QAC/C,IAAMuN,QAAQ,GAAGnH,KAA0B;QAC3CmH,QAAQ,CAACnJ,MAAM,CAACmC,OAAO,EAAE;UAAE9C,WAAW,EAAXA;SAAa,CAAC;QACzC,IAAM+J,UAAU,GAAGD,QAAQ,CAACE,aAAa,EAAE;QAE3C,IAAIF,QAAQ,CAACtN,MAAM,IAAII,MAAM,CAACqN,OAAO,EAAE;UACrC,IAAMC,YAAY,GAAGJ,QAAwB;UAC7C,IAAMK,kBAAkB,GAAGD,YAAY,CAACE,cAAc,EAAE;UACxDD,kBAAkB,CAACE,OAAO,CAAC,UAACzD,UAAU;YACpCiD,cAAc,CAACS,GAAG,CAAC1D,UAAU,CAAC;WAC/B,CAAC;SACH,MAAM;UACLiD,cAAc,CAACS,GAAG,CAACzI,WAAW,CAAC;;;QAIjC,IAAI8H,0BAA0B,CAACpE,EAAE,CAACwE,UAAU,CAAC,EAAE;UAC7CH,gBAAgB,GAAGA,gBAAgB,CAACU,GAAG,CAACP,UAAU,CAAC7E,GAAG,CAACyE,0BAA0B,CAAC,CAAC;UACnFA,0BAA0B,GAAGjI,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;SAC/C,MAAM;UACLgI,0BAA0B,GAAGA,0BAA0B,CAACzE,GAAG,CAAC6E,UAAU,CAAC;;;;;OAK1E,MAAM,IAAIpH,KAAK,CAACc,SAAS,IAAInH,eAAe,CAACoG,YAAY,EAAE;QAC1D,IAAM6H,YAAY,GAAG5H,KAAqB;QAC1C,IAAMoB,aAAa,GAAGwG,YAAY,CAAC5H,KAAK,CAACO,WAAW,CAACC,QAAQ,CAACC,QAAQ;QACtE,IAAMS,cAAc,GAAG0G,YAAY,CAAC5H,KAAK,CAACmB,YAAY,CAACX,QAAQ,CAACC,QAAQ;QACxE,IAAMyE,WAAW,GAAG0C,YAAY,CAAC3H,OAAO;QAExC,CAAU,EAAEmB,aAAa,IAAI,CAAC,CAAC8D,WAAW,CAAC2C,gBAAgB,CAAC,2CAA5D7N,SAAS,QAAqD,qBAAqB,IAAnFA,SAAS;QAET,IAAI,CAAC,CAACkL,WAAW,CAAC2C,gBAAgB,EAAE;UAClCxC,YAAY,CAAClF,OAAO,EAAE+E,WAAW,CAAC2C,gBAAgB,CAAC;;QAGrD,IAAIzG,aAAa,EAAE;UACjB6F,gBAAgB,GAAGA,gBAAgB,CAACU,GAAG,CACrC5I,SAAS,CAACC,IAAI,CAAC4I,YAAY,CAAC5H,KAAK,CAACU,eAAe,CAACwE,WAAW,CAACvE,iBAAiB,CAAC,CAACf,QAAQ,CAAC/B,QAAQ,EAAE,CAAC,CACtG;;;QAGH,IAAIqD,cAAc,IAAIgE,WAAW,CAACtE,SAAS,IAAIvB,mBAAmB,EAAE;UAClE2H,0BAA0B,GAAGA,0BAA0B,CAACW,GAAG,CACzD5I,SAAS,CAACC,IAAI,CAAC4I,YAAY,CAAC5H,KAAK,CAACkC,gBAAgB,CAACgD,WAAW,CAACvE,iBAAiB,CAAC,CAACf,QAAQ,CAAC/B,QAAQ,EAAE,CAAC,CACvG;;QAEH+J,YAAY,CAAC5J,MAAM,CAACmC,OAAO,EAAE;UAAE9C,WAAW,EAAE;SAAO,CAAC;;;;OAIrD,MAAM,IAAI2C,KAAK,CAACc,SAAS,IAAInH,eAAe,CAACmO,UAAU,EAAE;QACxD,IAAMA,UAAU,GAAG9H,KAAmB;QACtCA,KAAK,CAAChC,MAAM,CAACmC,OAAO,EAAE;UAAE9C,WAAW,EAAE;SAAO,CAAC;QAC7C2J,0BAA0B,GAAGA,0BAA0B,CAACW,GAAG,CAACG,UAAU,CAACnF,MAAM,CAAC;;;;OAI/E,MAAM,IAAI3C,KAAK,CAACc,SAAS,IAAInH,eAAe,CAACoO,SAAS,IAAI/H,KAAK,CAACc,SAAS,IAAInH,eAAe,CAACqO,WAAW,EAAE;QACzGhI,KAAK,CAAChC,MAAM,CAACmC,OAAO,EAAE;UAAE9C,WAAW,EAAE;SAAO,CAAC;;;;OAI9C,MAAM;QACL,MAAM,0EAA0E;;;;;;IAOpF6J,cAAc,CAACQ,OAAO,CAAC,UAACzD,UAAU;MAChC9D,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAAC+B,KAAK,EAAE,CAAC+H,UAAU,EAAE7E,mBAAmB,EAAE,CAAC,CAAC,CAAC;KAC5E,CAAC;IACF,OAAOkH,UAAU,CAAC2B,UAAU,CAAC9H,OAAO,EAAE8G,gBAAgB,EAAER,MAAM,CAAC;;;;;;;;EAGjE,WAMcyB,qBAAqB,GAA5B,+BAA6B1B,MAA2B,EAAEC;QAAAA;MAAAA,SAA2B,EAAE;;IAC5F,IAAItG,OAAO,GAAG,IAAItD,YAAY,EAAE;IAChC,IAAIsL,UAAU,GAAGpJ,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAElC,IAAM3B,WAAW,GAAGmJ,MAAM,CAACzM,MAAM,IAAI,CAAC,IAAIyM,MAAM,CAAC,CAAC,CAAC,CAAC1M,MAAM,CAACC,MAAM,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI;IAErF,sDAAoByM,MAAM,2CAAE;MAAA,IAAjBxG,KAAK;MACdA,KAAK,CAAChC,MAAM,CAACmC,OAAO,EAAE;QAAE9C,WAAW,EAAXA;OAAa,CAAC;MACtC8K,UAAU,GAAGA,UAAU,CAACR,GAAG,CAAC3H,KAAK,CAACqH,aAAa,EAAE,CAAC;;IAGpDlH,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAAC+B,KAAK,EAAE,CAACgD,WAAW,EAAEE,mBAAmB,EAAE,CAAC,CAAC,CAAC;IAC5E,OAAOkH,UAAU,CAAC2B,UAAU,CAAC9H,OAAO,EAAEgI,UAAU,EAAE1B,MAAM,CAAC;;;;;;;;EAG3D,WAMc2B,uBAAuB,GAA9B,iCACL5B,MAAkD,EAClDvG,OAAoB;;IAGpB,IAAME,OAAO,GAAG,IAAItD,YAAY,EAAE;IAElC,IAAMmD,KAAK,GAAiB,IAAID,YAAY,CAACyG,MAAM,EAAEvG,OAAO,CAAC;IAE7D,IAAMoI,aAAa,GAAGrI,KAAK,CAACA,KAAK,CAACO,WAAW,CAACC,QAAQ;IACtD,CAAU,EAAE6H,aAAa,CAAC5H,QAAQ,IAAI,CAAC,CAACR,OAAO,CAAC4H,gBAAgB,CAAC,2CAAjE7N,SAAS,QAA0D,qBAAqB,IAAxFA,SAAS;IAET,IAAIiG,OAAO,CAAC4H,gBAAgB,EAAE;MAC5BxC,YAAY,CAAClF,OAAO,EAAEF,OAAO,CAAC4H,gBAAgB,CAAC;;IAGjD,IAAMS,mBAAmB,GAAGD,aAAa,CAAC5H,QAAQ,GAC9C1B,SAAS,CAACC,IAAI,CAACgB,KAAK,CAACA,KAAK,CAACU,eAAe,CAACT,OAAO,CAACU,iBAAiB,CAAC,CAACf,QAAQ,CAAC/B,QAAQ,EAAE,CAAC,GAC1FkB,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAErBgB,KAAK,CAAChC,MAAM,CAACmC,OAAO,EAAE;MAAE9C,WAAW,EAAE;KAAO,CAAC;IAC7C,OAAOiJ,UAAU,CAAC2B,UAAU,CAAC9H,OAAO,EAAEmI,mBAAmB,EAAE;MACzDC,QAAQ,EAAEtI,OAAO,CAACuI,2BAA2B,GAAGzJ,SAAS,CAACC,IAAI,CAACiB,OAAO,CAACuI,2BAA2B,CAAC,GAAGC;KACvG,CAAC;;;;;;;;EAGJ,WAMeR,UAAU,GAAjB,oBACN9H,OAAqB,EACrBmI,mBAA8B,EAC9B7B;QAAAA;MAAAA,SAA2B,EAAE;;IAE7B,IAAQ3J,QAAQ,GAAaqD,OAAO,CAA5BrD,QAAQ;MAAEC,MAAM,GAAKoD,OAAO,CAAlBpD,MAAM;IACxB,IAAM2L,iBAAiB,GAAG,CAAC,CAACjC,MAAM,CAAC8B,QAAQ,GAAG,gCAAgC,GAAG,wBAAwB;IACzG,IAAMnL,UAAU,GAAG,CAAC,CAACqJ,MAAM,CAAC8B,QAAQ,GAAG,CAACzL,QAAQ,EAAEC,MAAM,EAAE0J,MAAM,CAAC8B,QAAQ,CAAC,GAAG,CAACzL,QAAQ,EAAEC,MAAM,CAAC;IAC/F,IAAM4L,QAAQ,GAAGrC,UAAU,CAACsC,SAAS,CAACC,kBAAkB,CAACH,iBAAiB,EAAEtL,UAAU,CAAC;IACvF,OAAO;MAAEuL,QAAQ,EAARA,QAAQ;MAAEG,KAAK,EAAER,mBAAmB,CAACS,WAAW;KAAI;GAC9D;EAAA;AAAA;AAvKazC,oBAAS,gBAAc,IAAI0C,SAAS,CAACC,KAAG,CAAC;;ICb5CC,eAAgB;EAAA;EAG3B,yBAAYpP,MAAwB;WAClC,qBAAMG,MAAM,CAACkP,WAAW,EAAErP,MAAM,CAAC;;EAClC;EAAA,OAEDkE,MAAM,GAAN,gBAAOmC,OAAqB,EAAEsG,MAAmB;IAC/C,qDAAmB,IAAI,CAAC3M,MAAM,wCAAE;MAAA,IAArBsP,IAAI;MACbjJ,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACc,WAAW,EAAE,CAACmO,IAAI,CAACC,OAAO,EAAED,IAAI,CAACxI,SAAS,EAAEwI,IAAI,CAACN,KAAK,CAAC,EAAErC,MAAM,CAACpJ,WAAW,CAAC;;GAE9G;EAAA,OAEDiM,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAmB,IAAI,CAACzP,MAAM,2CAAE;MAAA,IAArBsP,IAAI;MACbG,QAAQ,CAAC/L,IAAI,CAAC;QACZgM,YAAY,EAAEN,eAAe,CAACO,kBAAkB;QAChDJ,OAAO,EAAED,IAAI,CAACC,OAAO;QACrBK,SAAS,EAAExP,SAAS,CAACyP;OACtB,CAAC;;IAEJ,OAAOJ,QAAQ;GAChB;EAAA,OAEDlC,aAAa,GAAb;IACE,IAAIuC,KAAK,GAAG7K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAmB,IAAI,CAAClF,MAAM,2CAAE;MAAA,IAArBsP,IAAI;MACbQ,KAAK,GAAGA,KAAK,CAACjC,GAAG,CAACyB,IAAI,CAACN,KAAK,CAAC;;IAE/B,OAAOc,KAAK;GACb;EAAA;AAAA,EA/BkChQ,QAAwB;AAC7CsP,kCAAkeAAgB;EAAA;EAG3B,yBAAY/P,MAAwB;WAClC,qBAAMG,MAAM,CAAC6P,UAAU,EAAEhQ,MAAM,CAAC;;EACjC;EAAA,OAEDkE,MAAM,GAAN,gBAAOmC,OAAqB,EAAEsG,MAAmB;IAC/C,qDAAmB,IAAI,CAAC3M,MAAM,wCAAE;MAAA,IAArBsP,IAAI;MACb,IAAMT,QAAQ,GAAGkB,eAAe,CAACjB,SAAS,CAACC,kBAAkB,CAAC,OAAO,EAAE,CACrEO,IAAI,CAACI,YAAY,EACjBJ,IAAI,CAACC,OAAO,EACZD,IAAI,CAACW,KAAK,EACVX,IAAI,CAACY,QAAQ,CACd,CAAC;MACF7J,OAAO,CAACjD,UAAU,CAChB/C,WAAW,CAACU,UAAU,EACtB,CAACuO,IAAI,CAACW,KAAK,EAAEpB,QAAQ,EAAES,IAAI,CAACxI,SAAS,EAAEwI,IAAI,CAACI,YAAY,EAAEJ,IAAI,CAACC,OAAO,CAAC,EACvE5C,MAAM,CAACpJ,WAAW,CACnB;;GAEJ;EAAA,OAEDiM,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAmB,IAAI,CAACzP,MAAM,2CAAE;MAAA,IAArBsP,IAAI;MACbG,QAAQ,CAAC/L,IAAI,CAAC;QACZgM,YAAY,EAAEJ,IAAI,CAACI,YAAY;QAC/BH,OAAO,EAAED,IAAI,CAACC,OAAO;QACrBK,SAAS,EAAExP,SAAS,CAAC+P;OACtB,CAAC;;IAEJ,OAAOV,QAAQ;GAChB;EAAA,OAEDlC,aAAa,GAAb;IACE,IAAIuC,KAAK,GAAG7K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAmB,IAAI,CAAClF,MAAM,2CAAE;MAAA,IAArBsP,IAAI;MACbQ,KAAK,GAAGA,KAAK,CAACjC,GAAG,CAACyB,IAAI,CAACW,KAAK,CAAC;;IAE/B,OAAOH,KAAK;GACb;EAAA;AAAA,EAzCkChQ,QAAwB;AAC7CiQ,yBAAS,gBAAc,IAAIbwC5CiB,gBAAiB;EAAA;EAI5B,0BAAYpQ,MAAyB;WACnC,qBAAMG,MAAM,CAACkQ,WAAW,EAAErQ,MAAM,CAAC;;EAClC;EAAA,OAEDkE,MAAM,GAAN,gBAAOmC,OAAqB,EAAEsG,MAAmB;IAC/C,4BAA6E,IAAI,CAAC2D,eAAe,CAAC,IAAI,CAACtQ,MAAM,CAAC;MAAtGuQ,SAAS,yBAATA,SAAS;MAAEC,WAAW,yBAAXA,WAAW;MAAEC,eAAe,yBAAfA,eAAe;MAAEC,UAAU,yBAAVA,UAAU;MAAEC,WAAW,yBAAXA,WAAW;IAExE,IAAI9B,QAAQ;IACZ,IAAI,IAAI,CAAC7O,MAAM,CAACC,MAAM,IAAI,CAAC,EAAE;MAC3B4O,QAAQ,GAAGuB,gBAAgB,CAACtB,SAAS,CAACC,kBAAkB,CAAC,iBAAiB,EAAE,CAC1EwB,SAAS,CAAC,CAAC,CAAC,EACZC,WAAW,CAAC,CAAC,CAAC,EACdC,eAAe,CAAC,CAAC,CAAC,EAClBE,WAAW,CAAC,CAAC,CAAC,EACdtL,YAAY,CACb,CAAC;KACH,MAAM;MACLwJ,QAAQ,GAAGuB,gBAAgB,CAACtB,SAAS,CAACC,kBAAkB,CAAC,0BAA0B,EAAE,CACnFwB,SAAS,EACTC,WAAW,EACXC,eAAe,EACfE,WAAW,EACXtL,YAAY,EACZ,KAAK,CACN,CAAC;;IAGJgB,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACO,aAAa,EAAE,CAAC8P,UAAU,EAAE7B,QAAQ,CAAC,EAAElC,MAAM,CAACpJ,WAAW,CAAC;GAC1F;EAAA,OAEDiM,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,qDAAmB,IAAI,CAACzP,MAAM,wCAAE;MAAA,IAArBsP,IAAI;MACb,IAAMI,YAAY,GAAGJ,IAAI,CAACsB,QAAQ,CAACC,UAAU;MAC7C,IAAMjB,SAAS,GACbN,IAAI,CAACsB,QAAQ,CAACE,cAAc,IAAIV,gBAAgB,CAACW,YAAY,GAAG3Q,SAAS,CAAC+P,MAAM,GAAG/P,SAAS,CAAC4Q,OAAO;MACtG,sDAAsB1B,IAAI,CAACsB,QAAQ,CAACK,OAAO,2CACzC;QAAA,IADS1B,OAAO;QAChBE,QAAQ,CAAC/L,IAAI,CAAC;UACZgM,YAAY,EAAZA,YAAY;UACZH,OAAO,EAAPA,OAAO;UACPK,SAAS,EAATA;SACD,CAAC;;;IAEN,OAAOH,QAAQ;GAChB;EAAA,OAEDlC,aAAa,GAAb;IACE,IAAIuC,KAAK,GAAG7K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAmB,IAAI,CAAClF,MAAM,2CAAE;MAAA,IAArBsP,IAAI;MACbQ,KAAK,GAAGA,KAAK,CAACjC,GAAG,CAACyB,IAAI,CAACsB,QAAQ,CAACX,KAAK,CAAC;;IAExC,OAAOH,KAAK;GACb;EAAA,OAEOQ,eAAe,GAAf,yBAAgBtQ,MAAyB;IAO/C,IAAIuQ,SAAS,GAAiB,EAAE;IAChC,IAAIC,WAAW,GAAiB,EAAE;IAClC,IAAIC,eAAe,GAAa,EAAE;IAClC,IAAIC,UAAU,GAAczL,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7C,IAAIyL,WAAW,GAAiB,EAAE;IAElC3Q,MAAM,CAAC4N,OAAO,CAAC,UAACsD,KAAK;;MACnBV,WAAW,CAAC9M,IAAI,cAAMwN,KAAK,CAACN,QAAQ,EAAG;MAEvCH,eAAe,CAAC/M,IAAI,CAACwN,KAAK,CAACN,QAAQ,CAACnF,SAAS,CAAC;MAE9C8E,SAAS,CAAC7M,IAAI,CAAC;QACboD,SAAS,EAAEoK,KAAK,CAACC,KAAK;QACtBC,oBAAoB,EAAE;OACvB,CAAC;MAEFV,UAAU,GAAGA,UAAU,CAAC7C,GAAG,CAAC5I,SAAS,CAACC,IAAI,CAACgM,KAAK,CAACN,QAAQ,CAACX,KAAK,CAAC,CAAC;MAEjEU,WAAW,CAACjN,IAAI,CAAC;QACf2N,IAAI,2BAAEH,KAAK,CAACN,QAAQ,CAACU,UAAU,oCAAI,oEAAoE;QACvGC,KAAK,4BAAEL,KAAK,CAACN,QAAQ,CAACY,WAAW,qCAAI;OACtC,CAAC;KACH,CAAC;IAEF,OAAO;MAAEjB,SAAS,EAATA,SAAS;MAAEC,WAAW,EAAXA,WAAW;MAAEC,eAAe,EAAfA,eAAe;MAAEC,UAAU,EAAVA,UAAU;MAAEC,WAAW,EAAXA;KAAa;GAC5E;EAAA;AAAA,EA1FmC7Q,QAAyB;AAC/CsQ,0BAAS,gBAAc,IAAIlB,SAAS,CAACC,KAAG,CAAC;AACxCiB,6BAAY,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICzCpBqB,UAAW;EAAA;EAGtB,oBAAYzR,MAAmB;WAC7B,qBAAMG,MAAM,CAACc,KAAK,EAAEjB,MAAM,CAAC;;EAC5B;EAAA,OAEDkE,MAAM,GAAN,gBAAOmC,OAAqB,EAAEsG,MAAmB;IAC/C,qDAAoB,IAAI,CAAC3M,MAAM,wCAAE;MAAA,IAAtBkR,KAAK;MACd,IAAMrC,QAAQ,GAAG4C,UAAU,CAAC3C,SAAS,CAACC,kBAAkB,CAAC,WAAW,EAAE,CACpEmC,KAAK,CAACxB,YAAY,EAClBwB,KAAK,CAACQ,QAAQ,EACdR,KAAK,CAACS,YAAY,EAClBT,KAAK,CAACpK,SAAS,EACfoK,KAAK,CAACvL,GAAG,EACTuL,KAAK,CAACU,IAAI,CACX,CAAC;MACFvL,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACY,KAAK,EAAE,CAACiQ,KAAK,CAAClC,KAAK,EAAEH,QAAQ,CAAC,EAAElC,MAAM,CAACpJ,WAAW,CAAC;;GAErF;EAAA,OAEDiM,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAmB,IAAI,CAACzP,MAAM,2CAAE;MAAA,IAArBmJ,IAAI;MACb,sDAAsBA,IAAI,CAACuI,QAAQ,2CAAE;QAAA,IAA1BnC,OAAO;QAChBE,QAAQ,CAAC/L,IAAI,CAAC;UACZgM,YAAY,EAAEvG,IAAI,CAACuG,YAAY;UAC/BH,OAAO,EAAEA,OAAO;UAChBK,SAAS,EAAExP,SAAS,CAAC+P;SACtB,CAAC;;;IAIN,OAAOV,QAAQ;GAChB;EAAA,OAEDlC,aAAa,GAAb;IACE,IAAIuC,KAAK,GAAG7K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAmB,IAAI,CAAClF,MAAM,2CAAE;MAAA,IAArBsP,IAAI;MACbQ,KAAK,GAAGA,KAAK,CAACjC,GAAG,CAACyB,IAAI,CAACN,KAAK,CAAC;;IAE/B,OAAOc,KAAK;GACb;EAAA;AAAA,EA1C6BhQ,QAAmB;AACnC2R,oBAAS,gBAAc,IAAIvC,SAAS,CAACC,KAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICF5C0C,SAAU;EAAA;EAGrB,mBAAY7R,MAAkB;WAC5B,qBAAMG,MAAM,CAACQ,IAAI,EAAEX,MAAM,CAAC;;EAC3B;EAAA,OAEDkE,MAAM,GAAN,gBAAOmC,OAAqB,EAAEsG,MAAmB;IAC/C,qDAAoB,IAAI,CAAC3M,MAAM,wCAAE;MAAA,IAAtBkR,KAAK;MACd,IAAMrC,QAAQ,GAAGgD,SAAS,CAAC/C,SAAS,CAACC,kBAAkB,CAAC,cAAc,EAAE,CACtEmC,KAAK,CAACY,OAAO,EACbZ,KAAK,CAACQ,QAAQ,CAACzR,MAAM,EACrBiR,KAAK,CAACQ,QAAQ,EACdR,KAAK,CAACa,YAAY,EAClBb,KAAK,CAACpK,SAAS,CAChB,CAAC;MAEFT,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACM,IAAI,EAAE,CAACuQ,KAAK,CAAClC,KAAK,EAAEH,QAAQ,CAAC,EAAElC,MAAM,CAACpJ,WAAW,CAAC;;GAEpF;EAAA,OAEDiM,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAoB,IAAI,CAACzP,MAAM,2CAAE;MAAA,IAAtBkR,KAAK;MACd,sDAAsBA,KAAK,CAACQ,QAAQ,2CAAE;QAAA,IAA3BnC,OAAO;QAChBE,QAAQ,CAAC/L,IAAI,CAAC;UACZgM,YAAY,EAAEwB,KAAK,CAACxB,YAAY;UAChCH,OAAO,EAAEA,OAAO;UAChBK,SAAS,EAAExP,SAAS,CAAC+P;SACtB,CAAC;;;IAGN,OAAOV,QAAQ;GAChB;EAAA,OAEDlC,aAAa,GAAb;IACE,IAAIuC,KAAK,GAAG7K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAmB,IAAI,CAAClF,MAAM,2CAAE;MAAA,IAArBsP,IAAI;MACbQ,KAAK,GAAGA,KAAK,CAACjC,GAAG,CAACyB,IAAI,CAACN,KAAK,CAAC;;IAE/B,OAAOc,KAAK;GACb;EAAA;AAAA,EAzC4BhQ,QAAkB;AACjC+R,mBAAS,gBAAcgD5C6C,YAAa;EAAA;EAIxB,sBAAYhS,MAAqB;WAC/B,qBAAMG,MAAM,CAACqN,OAAO,EAAExN,MAAM,CAAC;;EAC9B;EAAA,OAEDkE,MAAM,GAAN,gBAAOmC,OAAqB,EAAEsG,MAAmB;IAC/C,qDAAoB,IAAI,CAAC3M,MAAM,wCAAE;MAAA,IAAtBkR,KAAK;MACd,IAAIe,cAAc,GAAoB,EAAE;MACxC,IAAIC,iBAAiB,GAA6BhB,KAAK,CAACiB,KAAK,CAACjJ,GAAG,CAAC,UAAC8D,CAAC,EAAEoF,KAAK;QAAA,OAAK,CAC9E;UAAEC,UAAU,EAAED,KAAK;UAAEE,SAAS,EAAE;SAAG,CACpC;QAAC;MACF,IAAIC,yBAAyB,GAA6B,IAAI,CAACC,4BAA4B,CAACtB,KAAK,CAACiB,KAAK,CAAC;MAExG,sDAAmBjB,KAAK,CAACiB,KAAK,2CAAE;QAAA,IAArB7C,IAAI;QACb,4BAA0B,IAAI,CAACmD,sBAAsB,CAACnD,IAAI,CAAC;UAAnDoD,aAAa,yBAAbA,aAAa;QACrBT,cAAc,CAACvO,IAAI,CAACgP,aAAa,CAAC;;MAGpC,IAAI7D,QAAgB;MACpB,IAAIoD,cAAc,CAAChS,MAAM,IAAI,CAAC,EAAE;QAC9B4O,QAAQ,GAAGmD,YAAY,CAAClD,SAAS,CAACC,kBAAkB,CAAC,sBAAsB,EAAE,CAC3EkD,cAAc,CAAC,CAAC,CAAC,EACjB,EAAE,EACFD,YAAY,CAACW,mBAAmB,EAChCzB,KAAK,CAACpK,SAAS,CAChB,CAAC;OACH,MAAM;QACL+H,QAAQ,GAAGmD,YAAY,CAAClD,SAAS,CAACC,kBAAkB,CAAC,gCAAgC,EAAE,CACrFkD,cAAc,EACd,EAAE,EACFC,iBAAiB,EACjBK,yBAAyB,EACzBP,YAAY,CAACW,mBAAmB,EAChCzB,KAAK,CAACpK,SAAS,EACf,GAAG,CACJ,CAAC;;MAGJ,IAAI,CAAC,CAACoK,KAAK,CAAC0B,oBAAoB,EAAE;QAChC,sDAAyB1B,KAAK,CAAC0B,oBAAoB,2CACjD;UAAA,IADSzI,UAAU;UACnB4B,uBAAuB,CAAC1F,OAAO,EAAE;YAC/B2F,QAAQ,EAAE7B,UAAU,CAAC0I,gBAAgB,GACjC;cAAE3G,KAAK,EAAE/B,UAAU,CAAC+B,KAAK;cAAEtE,QAAQ,EAAEsJ,KAAK,CAAC5E;aAAiB,GAC5DqC,SAAS;YACb1C,aAAa,EAAE9B,UAAU,CAAC8B,aAAa;YACvCG,mBAAmB,EAAEjC,UAAU,CAACiC,mBAAmB,GAC/C;cAAEF,KAAK,EAAE/B,UAAU,CAAC+B,KAAK;cAAErD,MAAM,EAAE,IAAI,CAACiK,kBAAkB,CAAC5B,KAAK,EAAE/G,UAAU,CAAC+B,KAAK,CAAC,CAACnI,QAAQ;aAAI,GAChG4K;WACL,CAAC;;;MAGNtI,OAAO,CAACjD,UAAU,CAChB,IAAI,CAAC2P,UAAU,CAAC7B,KAAK,CAAC5E,eAAe,CAAC,EACtC,CAAC,IAAI,CAACwG,kBAAkB,CAAC5B,KAAK,EAAE9L,WAAW,CAAC,CAACrB,QAAQ,EAAE,EAAE8K,QAAQ,CAAC,EAClElC,MAAM,CAACpJ,WAAW,CACnB;;GAEJ;EAAA,OAEDiM,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAoB,IAAI,CAACzP,MAAM,2CAAE;MAAA,IAAtBkR,KAAK;MACd,sDAAmBA,KAAK,CAACiB,KAAK,2CAAE;QAAA,IAArB7C,IAAI;QACb,sDAAoBA,IAAI,CAAChM,UAAU,CAAC0P,KAAK,2CAAE;UAAA,IAAhCA,KAAK;UACdvD,QAAQ,CAAC/L,IAAI,CAAC;YACZgM,YAAY,EAAEsD,KAAK,CAAC9G,KAAK;YACzBqD,OAAO,EAAEyD,KAAK,CAACC,oBAAoB;YACnCrD,SAAS,EAAExP,SAAS,CAAC+P;WACtB,CAAC;;;;IAIR,OAAOV,QAAQ;GAChB;EAAA,OAED9B,cAAc,GAAd;IACE,IAAIuF,WAAW,GAAG,IAAI1S,GAAG,EAAU;IACnC,sDAAoB,IAAI,CAACR,MAAM,2CAAE;MAAA,IAAtBkR,KAAK;MACd,sDAAmBA,KAAK,CAACiB,KAAK,2CAAE;QAAA,IAArB7C,IAAI;QACb,sDAA4BA,IAAI,CAAChM,UAAU,CAAC6P,aAAa,2CAAE;UAAA,IAAhDA,aAAa;UACtB,IAAMjH,KAAK,GAAGiH,aAAa,CAACjH,KAAK,CAACK,WAAW,EAAE;UAC/C2G,WAAW,CAACrF,GAAG,CAAC3B,KAAK,CAAC;;;;IAI5B,OAAOgH,WAAW;GACnB;EAAA,OAEDJ,kBAAkB,GAAlB,4BAAmB5B,KAAkB,EAAEhF;QAAAA;MAAAA,QAAgB9G,WAAW;;IAChE,IAAIgO,eAAe,GAAGnO,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IACvC,uDAAmBgM,KAAK,CAACiB,KAAK,8CAAE;MAAA,IAArB7C,IAAI;MACb8D,eAAe,GAAGA,eAAe,CAACvF,GAAG,CAAC,IAAI,CAACwF,cAAc,CAAC/D,IAAI,CAAChM,UAAU,CAAC6P,aAAa,EAAEjH,KAAK,CAAC,CAAC;;IAElG,OAAOkH,eAAe;GACvB;EAAA,OAED7F,aAAa,GAAb,uBAAcrB;QAAAA;MAAAA,QAAgB9G,WAAW;;IACvC,IAAIiJ,UAAU,GAAGpJ,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAClC,uDAAoB,IAAI,CAAClF,MAAM,8CAAE;MAAA,IAAtBkR,KAAK;MACd,uDAAmBA,KAAK,CAACiB,KAAK,8CAAE;QAAA,IAArB7C,IAAI;QACbjB,UAAU,GAAGA,UAAU,CAACR,GAAG,CAAC,IAAI,CAACwF,cAAc,CAAC/D,IAAI,CAAChM,UAAU,CAAC6P,aAAa,EAAEjH,KAAK,CAAC,CAAC;;;IAG1F,OAAOmC,UAAU;GAClB;EAAA,OAEO0E,UAAU,GAAV,oBAAWzG,eAAuB;IACxC,QAAQA,eAAe,CAACC,WAAW,EAAE;MACnC,KAAK,4CAA4C;;QAC/C,OAAOlM,WAAW,CAACI,YAAY;MACjC,KAAK,4CAA4C;;QAC/C,OAAOJ,WAAW,CAACK,YAAY;MACjC;QACE,MAAM,IAAImD,KAAK,CAAC,6BAA6B,CAAC;;GAEnD;EAAA,OAEO2O,4BAA4B,GAA5B,sCAA6Bc,aAAsB;IACzD,IAAIC,yBAAyB,GAA6B,EAAE;IAC5D,IAAMC,uBAAuB,GAAa,EAAE;IAE5C,KAAK,IAAMvJ,CAAC,IAAIqJ,aAAa,EAAE;MAC7B,IAAMG,YAAY,GAAGH,aAAa,CAACrJ,CAAC,CAAC;MAAA,2BAE1ByJ,CAAC;QACV,IAAMpE,IAAI,GAAGmE,YAAY,CAACnQ,UAAU,CAAC6P,aAAa,CAACO,CAAC,CAAC;QAErD,IAAIF,uBAAuB,CAACG,SAAS,CAAC,UAACC,CAAC;UAAA,OAAKA,CAAC,KAAKtE,IAAI,CAACxI,SAAS;UAAC,KAAK,CAAC,CAAC,EAAE;UACzE0M,uBAAuB,CAAC9P,IAAI,CAAC4L,IAAI,CAACxI,SAAS,CAAC;;QAG9C,IAAM+M,cAAc,GAAGL,uBAAuB,CAACG,SAAS,CAAC,UAACC,CAAC;UAAA,OAAKA,CAAC,KAAKtE,IAAI,CAACxI,SAAS;UAAC;QAErF,IAAI,CAACyM,yBAAyB,CAACM,cAAc,CAAC,EAAE;UAC9CN,yBAAyB,CAAC7P,IAAI,CAAC,CAC7B;YACE2O,UAAU,EAAEpI,CAAC;YACbqI,SAAS,EAAEoB;WACZ,CACF,CAAC;SACH,MAAM;UACLH,yBAAyB,CAACM,cAAc,CAAC,CAACnQ,IAAI,CAAC;YAC7C2O,UAAU,EAAEpI,CAAC;YACbqI,SAAS,EAAEoB;WACZ,CAAC;;;MApBN,KAAK,IAAMA,CAAC,IAAID,YAAY,CAACnQ,UAAU,CAAC6P,aAAa,EAAE;QAAA,MAA5CO,CAAC;;;IAwBd,OAAOH,yBAAyB;GACjC;EAAA,OAEOd,sBAAsB,GAAtB,gCAAuBqB,IAAW;IACxC,IAAMpB,aAAa,GAAG;MACpBpP,UAAU,EAAEwQ,IAAI,CAACxQ,UAAU;MAC3ByQ,SAAS,EAAE9O,SAAS,CAACC,IAAI,CAAC,GAAG,CAAC;MAC9B8O,WAAW,EAAE/O,SAAS,CAACC,IAAI,CAAC,GAAG,CAAC;MAChCuG,SAAS,EAAEqI,IAAI,CAACrI,SAAS;MACzBwI,SAAS,EAAE;KACZ;IACD,OAAO;MAAEvB,aAAa,EAAbA;KAAe;GACzB;EAAA,OAEOW,cAAc,GAAd,wBAAea,cAAmC,EAAEhI,KAAa;IACvE,OAAOgI,cAAc,CAACC,MAAM,CAC1B,UAACC,GAAc,EAAEjB,aAAgC;MAAA,OAC/CA,aAAa,CAACjH,KAAK,CAACK,WAAW,EAAE,IAAIL,KAAK,CAACK,WAAW,EAAE,GAAG6H,GAAG,CAACvG,GAAG,CAACsF,aAAa,CAACkB,WAAW,CAAC,GAAGD,GAAG;OACrGnP,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAClB;GACF;EAAA;AAAA,EA3K+BpF,QAAqB;AACvCkS,sBAAS,gBAAc,IAAI9C,SAAS,CAACC,KAAG,CAAC;AACzC6C,gCAAmB,GAAW,oEAAorGsC,aAAc;EAAA;EAGzB,uBAAYtU,MAAsB;WAChC,qBAAMG,MAAM,CAACoU,QAAQ,EAAEvU,MAAM,CAAC;;EAC/B;EAAA,OAEDkE,MAAM,GAAN,gBAAOmC,OAAqB,EAAEsG,MAAmB;IAC/C,qDAAoB,IAAI,CAAC3M,MAAM,wCAAE;MAAA,IAAtBkR,KAAK;MACd,IAAMrC,QAAQ,GAAGyF,aAAa,CAACxF,SAAS,CAACC,kBAAkB,CAAC,8BAA8B,EAAE,CAC1FmC,KAAK,CAACzJ,KAAK,CAACyB,GAAG,CAAC,UAACxB,IAAI;QACnB,OAAO;UAAE8M,QAAQ,EAAE9M,IAAI,CAAC8M,QAAQ;UAAEC,OAAO,EAAE/M,IAAI,CAAC+M;SAAS;OAC1D,CAAC,EACFvD,KAAK,CAACwD,YAAY,EAClBxD,KAAK,CAACyD,YAAY,EAClBzD,KAAK,CAACzC,QAAQ,CACf,CAAC;MACF,IAAMO,KAAK,GAAGkC,KAAK,CAACzJ,KAAK,CAAC0M,MAAM,CAAC,UAACS,OAAO,EAAElN,IAAI;QAC7C,OAAOkN,OAAO,CAAC/G,GAAG,CAACnG,IAAI,CAAC+M,OAAO,CAAC;OACjC,EAAExP,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MACrBmB,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACW,QAAQ,EAAE,CAACgO,KAAK,EAAEH,QAAQ,CAAC,EAAElC,MAAM,CAACpJ,WAAW,CAAC;;GAElF;EAAA,OAEDiM,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAoB,IAAI,CAACzP,MAAM,2CAAE;MAAA,IAAtBkR,KAAK;MACd,sDAAmBA,KAAK,CAACzJ,KAAK,2CAAE;QAAA,IAArBC,IAAI;QACb,sDAAsBA,IAAI,CAAC8M,QAAQ,CAACK,MAAM,2CAAE;UAAA,IAAjCtF,OAAO;UAChBE,QAAQ,CAAC/L,IAAI,CAAC;YACZgM,YAAY,EAAEhI,IAAI,CAACgI,YAAY;YAC/BH,OAAO,EAAPA,OAAO;YACPK,SAAS,EAAExP,SAAS,CAAC+P;WACtB,CAAC;;;;IAIR,OAAOV,QAAQ;GAChB;EAAA,OAEDlC,aAAa,GAAb;IACE,IAAIuC,KAAK,GAAG7K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAoB,IAAI,CAAClF,MAAM,2CAAE;MAAA,IAAtBkR,KAAK;MACd,sDAAmBA,KAAK,CAACzJ,KAAK,2CAAE;QAAA,IAArBC,IAAI;QACboI,KAAK,GAAGA,KAAK,CAACjC,GAAG,CAACnG,IAAI,CAAC+M,OAAO,CAAC;;;IAGnC,OAAO3E,KAAK;GACb;EAAA;AAAA,EAhDgChQ,QAAsB;AACzCwU,uBAAS,gBAAc,IAAIprB,mBAAY9U,MAAkB;WAC5B,qBAAMG,MAAM,CAAC4U,IAAI,EAAE/U,MAAM,CAAC;;EAC3B;EAAA,OAEDkE,MAAM,GAAN,gBAAOmC,OAAqB,EAAEsG,MAAmB;IAC/C,qDAAmB,IAAI,CAAC3M,MAAM,wCAAE;MAAA,IAArBsP,IAAI;MACb,IAAM0F,gBAAgB,GAAGF,SAAS,CAAChG,SAAS,CAACmG,UAAU,CAACH,SAAS,CAAChG,SAAS,CAACoG,WAAW,CAAC,KAAK,CAAC,CAAC;MAC/F,IAAMrG,QAAQ,GAAGmG,gBAAgB,GAAG1F,IAAI,CAAC6F,WAAW,CAACC,KAAK,CAAC,CAAC,CAAC;MAE7D,IAAI9F,IAAI,CAACM,SAAS,IAAIxP,SAAS,CAAC+P,MAAM,EAAE;QACtC9J,OAAO,CAACjD,UAAU,CAChB/C,WAAW,CAACQ,QAAQ,EACpB,CAACyO,IAAI,CAACW,KAAK,EAAEpB,QAAQ,EAAES,IAAI,CAACxI,SAAS,EAAEwI,IAAI,CAACI,YAAY,EAAEJ,IAAI,CAACC,OAAO,CAAC,EACvE5C,MAAM,CAACpJ,WAAW,CACnB;OACF,MAAM,IAAI+L,IAAI,CAACM,SAAS,IAAIxP,SAAS,CAAC4Q,OAAO,EAAE;QAC9C3K,OAAO,CAACjD,UAAU,CAChB/C,WAAW,CAACS,SAAS,EACrB,CAACwO,IAAI,CAACW,KAAK,EAAEpB,QAAQ,EAAES,IAAI,CAACxI,SAAS,EAAEwI,IAAI,CAACI,YAAY,EAAEJ,IAAI,CAACC,OAAO,EAAED,IAAI,CAAC+F,WAAW,CAAC,EACzF1I,MAAM,CAACpJ,WAAW,CACnB;;;GAGN;EAAA,OAEDiM,WAAW,GAAX;IACE,IAAIC,QAAQ,GAAc,EAAE;IAC5B,sDAAmB,IAAI,CAACzP,MAAM,2CAAE;MAAA,IAArBsP,IAAI;MACbG,QAAQ,CAAC/L,IAAI,CAAC;QACZgM,YAAY,EAAEJ,IAAI,CAACI,YAAY;QAC/BH,OAAO,EAAED,IAAI,CAACC,OAAO;QACrBK,SAAS,EAAEN,IAAI,CAACM;OACjB,CAAC;;IAEJ,OAAOH,QAAQ;GAChB;EAAA,OAEDlC,aAAa,GAAb;IACE,IAAIuC,KAAK,GAAG7K,SAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B,sDAAmB,IAAI,CAAClF,MAAM,2CAAE;MAAA,IAArBsP,IAAI;MACbQ,KAAK,GAAGA,KAAK,CAACjC,GAAG,CAACyB,IAAI,CAACW,KAAK,CAAC;;IAE/B,OAAOH,KAAK;GACb;EAAA;AAAA,EA9C4BhQ,QAAkB;AACjCgV,mBAAS,gBAAc,IAAI5F,SAAS,CAACC,KAAG,CAAC;;ICpB5CnB,UAAU;EAMrB,oBAAYnF,MAAoB,EAAElE,OAAe,EAAE6G,OAAuB;IALjE,cAAS,GAAoB3L,eAAe,CAACmO,UAAU;IAM9D,IAAI,CAACsH,WAAW,GAAGzQ,YAAY,CAACF,OAAO,CAAC;IACxC,IAAI,CAACkE,MAAM,GAAGA,MAAM;IAEpB,IAAI,CAAC,CAAC2C,OAAO,EAAE;MACb,EACEA,OAAO,CAACW,OAAO,CAACD,KAAK,CAACK,WAAW,EAAE,KAAK,IAAI,CAAC+I,WAAW,CAAC/I,WAAW,EAAE,4CADxErM,SAAS,8CAE6B,IAAI,CAACoV,WAAW,IAFtDpV,SAAS;MAIT,EAAUsL,OAAO,CAACW,OAAO,CAACtD,MAAM,IAAIA,MAAM,4CAA1C3I,SAAS,mEAATA,SAAS;MACT,IAAI,CAACqV,WAAW,GAAG/J,OAAO;;;EAE7B;EAAA,OAEDtH,MAAM,GAAN,gBAAOmC,OAAqB,EAAE2G,CAAc;IAC1CjB,uBAAuB,CAAC1F,OAAO,EAAE;MAC/B4F,aAAa,EAAE,IAAI,CAACsJ,WAAW;MAC/BnJ,mBAAmB,EAAE;QACnBF,KAAK,EAAE,IAAI,CAACoJ,WAAW;QACvBzM,MAAM,EAAE,IAAI,CAACA,MAAM,CAAC9E,QAAQ;;KAE/B,CAAC;IACFsC,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAAC8B,WAAW,EAAE,CAACoD,mBAAmB,EAAE,IAAI,CAACsD,MAAM,CAAC,CAAC;GAChF;EAAA;AAAA;;IC7BUoF,SAAS;EAOpB,mBAAYpF,MAAoB,EAAElE,OAAe,EAAE6G,OAAuB,EAAEgK,UAAyB;IAN5F,cAAS,GAAoB3V,eAAe,CAACoO,SAAS;IAO7D,IAAI,CAACwH,YAAY,GAAG3Q,aAAa,CAACH,OAAO,CAAC;IAC1C,IAAI,CAACkE,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC2M,UAAU,GAAGA,UAAU,WAAVA,UAAU,GAAIxQ,gBAAgB;IAEhD,IAAI,CAAC,CAACwG,OAAO,EAAE;MACb,EACEA,OAAO,CAACW,OAAO,CAACD,KAAK,CAACK,WAAW,EAAE,KAAK,IAAI,CAACkJ,YAAY,CAAClJ,WAAW,EAAE,4CADzErM,SAAS,+CAE8B,IAAI,CAACuV,YAAY,IAFxDvV,SAAS;MAIT,EAAUsL,OAAO,CAACW,OAAO,CAACtD,MAAM,IAAIA,MAAM,4CAA1C3I,SAAS,qEAATA,SAAS;MACT,IAAI,CAACqV,WAAW,GAAG/J,OAAO;;;EAE7B;EAAA,OAEDtH,MAAM,GAAN,gBAAOmC,OAAqB,EAAE2G,CAAc;IAC1CjB,uBAAuB,CAAC1F,OAAO,EAAE;MAC/B4F,aAAa,EAAE,IAAI,CAACsJ,WAAW;MAC/BnJ,mBAAmB,EAAE;QACnBF,KAAK,EAAE,IAAI,CAACuJ,YAAY;QACxB5M,MAAM,EAAE,IAAI,CAACA,MAAM,CAAC9E,QAAQ;;KAE/B,CAAC;IACFsC,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACwC,UAAU,EAAE,CAAC0C,mBAAmB,EAAE,IAAI,CAACiQ,UAAU,CAAC,CAAC;GACnF;EAAA;AAAA;;IChCUtH,WAAW;EAKtB,qBAAYpH,SAAiB,EAAE4O,aAA2B,EAAE/Q,OAAe;IAJlE,cAAS,GAAoB9E,eAAe,CAACqO,WAAW;IAK/D,IAAI,CAACpH,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAAC4O,aAAa,GAAGA,aAAa;IAClC,EAAU5Q,aAAa,CAACH,OAAO,CAAC,IAAIR,sBAAsB,4CAA1DjE,SAAS,0CAAmFyE,OAAO,IAAnGzE,SAAS;;EACV;EAAA,OAEDgE,MAAM,GAAN,gBAAOmC,OAAqB,EAAE2G,CAAc;IAC1C3G,OAAO,CAACjD,UAAU,CAAC/C,WAAW,CAACyC,YAAY,EAAE,CAAC,IAAI,CAACgE,SAAS,EAAE,IAAI,CAAC4O,aAAa,CAAC,CAAC;GACnF;EAAA;AAAA;;;;"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/constants.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/constants.d.ts
index def3e07..a75fafb 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/utils/constants.d.ts
+++ b/node_modules/@uniswap/universal-router-sdk/dist/utils/constants.d.ts
@@ -1,7 +1,10 @@
 import { BigNumber } from 'ethers';
+export declare const NOT_SUPPORTED_ON_CHAIN = "0x0000000000000000000000000000000000000000";
 export declare const UNIVERSAL_ROUTER_ADDRESS: (chainId: number) => string;
 export declare const UNIVERSAL_ROUTER_CREATION_BLOCK: (chainId: number) => number;
 export declare const WETH_ADDRESS: (chainId: number) => string;
+export declare const STETH_ADDRESS: (chainId: number) => string;
+export declare const WSTETH_ADDRESS: (chainId: number) => string;
 export declare const PERMIT2_ADDRESS = "0x000000000022D473030F116dDEE9F6B43aC78BA3";
 export declare const CONTRACT_BALANCE: BigNumber;
 export declare const ETH_ADDRESS = "0x0000000000000000000000000000000000000000";
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/expandTo18Decimals.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/numbers.d.ts
similarity index 62%
rename from node_modules/@uniswap/universal-router-sdk/dist/utils/expandTo18Decimals.d.ts
rename to node_modules/@uniswap/universal-router-sdk/dist/utils/numbers.d.ts
index 631b56b..15a8757 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/utils/expandTo18Decimals.d.ts
+++ b/node_modules/@uniswap/universal-router-sdk/dist/utils/numbers.d.ts
@@ -1,4 +1,6 @@
 import { BigNumber } from 'ethers';
 import JSBI from 'jsbi';
+import { Percent } from '@uniswap/sdk-core';
 export declare function expandTo18DecimalsBN(n: number): BigNumber;
 export declare function expandTo18Decimals(n: number): JSBI;
+export declare function encodeFeeBips(fee: Percent): string;
diff --git a/node_modules/@uniswap/universal-router-sdk/dist/utils/routerCommands.d.ts b/node_modules/@uniswap/universal-router-sdk/dist/utils/routerCommands.d.ts
index 8f1bd62..557b512 100644
--- a/node_modules/@uniswap/universal-router-sdk/dist/utils/routerCommands.d.ts
+++ b/node_modules/@uniswap/universal-router-sdk/dist/utils/routerCommands.d.ts
@@ -34,7 +34,9 @@ export declare enum CommandType {
     ELEMENT_MARKET = 30,
     SEAPORT_V1_4 = 32,
     EXECUTE_SUB_PLAN = 33,
-    APPROVE_ERC20 = 34
+    APPROVE_ERC20 = 34,
+    WRAP_STETH = 35,
+    UNWRAP_STETH = 36
 }
 export declare class RoutePlanner {
     commands: string;
